{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1526201831377},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1526201831377},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1526201831377},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1526201831377},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1526201831377},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1526201831393},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1526201831377},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1526201831377},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1526201831377},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1526201831377},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1526201831377},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1526201831377},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1526201831377},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1526201831377},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1526201831377},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1526201831377},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1526201831377},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1526201831377},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1526201831393},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1526201831393},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1526201831393},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1526201831393},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1526201831393},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1526201831393},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1526201831393},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1526201831393},{"_id":"source/_posts/2013-4-17-about.md","hash":"80e733911622d1e595653df1cabec0acb2deaf0f","modified":1526197236339},{"_id":"source/_posts/2014-11-10-DES加密.md","hash":"9ad3a13998a8a9a10ba66e504b812930f94f00b4","modified":1526197236340},{"_id":"source/_posts/2014-10-28-SecureCRT-RSA登陆服务器笔记.md","hash":"0e640df4256188f27626d4f84199b73000ff64ac","modified":1526203103148},{"_id":"source/_posts/2014-11-16-批量获取歌曲链接.md","hash":"74499a3ec583772553001abe7515c081e2c4ef6d","modified":1526203154065},{"_id":"source/_posts/2014-11-13-计算两个文件的相对路径.md","hash":"7ffd08b256211edd8acbc4d1142bd1e031325c4b","modified":1526203217456},{"_id":"source/_posts/2014-11-17-文本处理-小笔记.md","hash":"7d4dcf67a29e6f977e54707b437dab21889fec75","modified":1526203161050},{"_id":"source/_posts/2015-1-14-python-发送邮件.md","hash":"e600b517959a57f8ee74f09de928ce3c939350b4","modified":1526203024988},{"_id":"source/_posts/2015-1-14-python-ssh传输文件.md","hash":"e2d3b492019e02ce530e682afdbf0c412bfee1b0","modified":1526203197574},{"_id":"source/_posts/2014-2-21-Ubuntu下搭建FTP服务器.md","hash":"45e18509cc46533e7794c6dc38870bc819a2e7b5","modified":1526202902474},{"_id":"source/_posts/2015-1-20-python-tree.md","hash":"5c44b6f32003f78a0a2638b5e67e960cd85edeb9","modified":1526202984642},{"_id":"source/_posts/2015-1-26-计算A文件相对B文件的路径.md","hash":"9d9d6d19a10dfce148a9524fb9b34b50f5e0283a","modified":1526203057339},{"_id":"source/_posts/2015-1-28-daemon-use-c.md","hash":"0ee4dbca4c9320aff85fea734328e16f53bd9579","modified":1526202948547},{"_id":"source/_posts/2015-11-15-miniseed-note.md","hash":"4be2e8d66481001e656ccb1de8283359dd97370f","modified":1526197236351},{"_id":"source/_posts/2015-11-20-C++内存对齐.md","hash":"a82082228e7ae65a95912a22abfb09cf3eba35fe","modified":1526197236352},{"_id":"source/_posts/2016-07-28-centos_upgrade_gcc.md","hash":"4ae3aae2bfa3a968ca400ae9f75385455840bfdd","modified":1526197236353},{"_id":"source/_posts/2016-07-28-centos_upgrade_python.md","hash":"131b1af94faf3e5c4f8d7774b588a2b8741f5ccc","modified":1526197236354},{"_id":"source/_posts/2016-08-29-单引号’字符串‘.md","hash":"810a8aca5ea66d726250ec6b23dcc62978e58683","modified":1526197236354},{"_id":"source/_posts/2016-08-31-fstab-shell-script.md","hash":"9c0393c5276651f2f8aded6b6152ef97b106e6d6","modified":1526197236355},{"_id":"source/_posts/2016-1-18-C++中set和get的简单方式.md","hash":"0d7b55d54c6cb08eb5d8eae49bc838e1865f89aa","modified":1526197236356},{"_id":"source/_posts/2016-4-13-my-string-format.md","hash":"303fc664e4c65287a4680a3752690a104f3613b5","modified":1526197236356},{"_id":"source/_posts/2016-6-6-browser-plugin.md","hash":"f4fe747494126960d0961e7f84030fabad6f4321","modified":1526197236357},{"_id":"source/_posts/2018-05-13-ffmpeg-scale-samples.md","hash":"5b2f929b10cb8c8b22b1aa3f89d92adee4c0c5c3","modified":1526205284500},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1526201831393},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1526201831393},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1526201831393},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1526201831393},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1526201831393},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1526201831377},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1526201831377},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1526201831377},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1526201831377},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1526201831393},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1526201831393},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1526201831393},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1526201831393},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1526201831393},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1526201831393},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1526201831393},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1526201831393},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1526201831409},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1526201831409},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1526201831409},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1526201831424},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1526201831424},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1526201831424},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1526201831424},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1526201831424},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1526201831424},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1526201831424},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1526201831424},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1526201831424},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1526201831393},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1526201831393},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1526201831393},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1526201831393},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1526201831393},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1526201831393},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1526201831409},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1526201831409},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1526201831409},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1526201831409},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1526201831409},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1526201831409},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1526201831409},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1526201831409},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1526201831409},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1526201831409},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1526201831409},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1526201831409},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1526201831409},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1526201831409},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1526201831409},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1526201831424},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1526201831424},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1526201831424},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1526201831424},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1526201831424},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1526201831424},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1526201831409},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1526201831409},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1526201831409},{"_id":"public/2018/05/13/2018-05-13-ffmpeg-scale-samples/index.html","hash":"db5929e669903419c01a0aa4ba22f43693434e7d","modified":1526205827178},{"_id":"public/2016/08/31/2016-08-31-fstab-shell-script/index.html","hash":"ec760e6c02e898cd7dba846efd0f571af432ab98","modified":1526205827209},{"_id":"public/2016/08/29/2016-08-29-单引号’字符串‘/index.html","hash":"1ea3ed305aa56d8b35308496357d889c5f898bc1","modified":1526205827209},{"_id":"public/2016/07/28/2016-07-28-centos_upgrade_python/index.html","hash":"b14307b2190514b8c8b00227c21deed12e3a81f3","modified":1526205827209},{"_id":"public/2016/07/28/2016-07-28-centos_upgrade_gcc/index.html","hash":"7a149ca03af853081684a2af3653001276586b75","modified":1526205827209},{"_id":"public/2016/06/06/2016-6-6-browser-plugin/index.html","hash":"45f911fc2394e56cfe844d90bd8bc67e2554827b","modified":1526205827209},{"_id":"public/2016/04/13/2016-4-13-my-string-format/index.html","hash":"ea198c2c2baeeac4791fcff898895234f2e98d6b","modified":1526205827209},{"_id":"public/2016/01/18/2016-1-18-C++中set和get的简单方式/index.html","hash":"9d1c4a77fb27355e42e640e3dd10ac9f1b666bd6","modified":1526205827209},{"_id":"public/2015/11/20/2015-11-20-C++内存对齐/index.html","hash":"4a73917a79588adeceb23e7d8ab4d94bfee59db3","modified":1526205827209},{"_id":"public/2015/11/15/2015-11-15-miniseed-note/index.html","hash":"8b3d4dc37e888f17f6ae4e51938ba3d2ff774d1d","modified":1526205827209},{"_id":"public/2015/01/28/2015-1-28-daemon-use-c/index.html","hash":"68225775a80e37b06b51b9160546dec468549a16","modified":1526205827209},{"_id":"public/2015/01/22/2015-1-26-计算A文件相对B文件的路径/index.html","hash":"ca30d25967e13f4df28019622a55ba11a9b6c060","modified":1526205827209},{"_id":"public/2015/01/20/2015-1-20-python-tree/index.html","hash":"1b08cfd1f1b97aa77753a1e9506435f5d1b4e416","modified":1526205827209},{"_id":"public/2015/01/14/2015-1-14-python-发送邮件/index.html","hash":"b23b3d504684c1f091d194c229c406aabe26c97f","modified":1526205827209},{"_id":"public/2015/01/14/2015-1-14-python-ssh传输文件/index.html","hash":"dfe9c8c1a4cef00216528ca5308058942df52a81","modified":1526205827209},{"_id":"public/2014/11/17/2014-11-17-文本处理-小笔记/index.html","hash":"e35407ec6b02eb0f841ce195fdad6b35b16b8ec1","modified":1526205827209},{"_id":"public/2014/11/16/2014-11-16-批量获取歌曲链接/index.html","hash":"4e990a96fc3c5bd3e0a7e1c0148d56cc0e7c80a1","modified":1526205827209},{"_id":"public/2014/11/10/2014-11-10-DES加密/index.html","hash":"c9db55397d66897d0be09a2a9a164e07310bd600","modified":1526205827209},{"_id":"public/2014/11/13/2014-11-13-计算两个文件的相对路径/index.html","hash":"2017e8de8af7243320833fa1c5abf997e32b4885","modified":1526205827209},{"_id":"public/2014/10/28/2014-10-28-SecureCRT-RSA登陆服务器笔记/index.html","hash":"1af0806c6b8e4b9a815f7d204ac3e75577836e2b","modified":1526205827209},{"_id":"public/2014/02/21/2014-2-21-Ubuntu下搭建FTP服务器/index.html","hash":"e718ec3a63e8ea52110e01bcbefb395ea99227ed","modified":1526205827209},{"_id":"public/2013/04/17/2013-4-17-about/index.html","hash":"6d9b044f53136c7640e267d06efd9316829fbe36","modified":1526205827209},{"_id":"public/archives/page/2/index.html","hash":"fe8d8b43d0912b2b6c41750459a17734d9d04345","modified":1526205827209},{"_id":"public/archives/index.html","hash":"07bfa1e5732c253a03a49e682c1d631a223f026e","modified":1526205827209},{"_id":"public/archives/page/3/index.html","hash":"a7c074f95dacade0a6548504d84bac184763f9b2","modified":1526205827209},{"_id":"public/archives/2013/index.html","hash":"24987a92aeeca9f55ea6955d81f77ce62b6a669f","modified":1526205827209},{"_id":"public/archives/2013/04/index.html","hash":"9096d8e4e1c2ef8c645dcb89beff3e6b50b748d7","modified":1526205827209},{"_id":"public/archives/2014/index.html","hash":"f5c9b7d40290ca3baa19f93855bf49b8c1bf7d8f","modified":1526205827209},{"_id":"public/archives/2014/02/index.html","hash":"10d967e1742632b032ba5ba93a623815b03b22c2","modified":1526205827209},{"_id":"public/archives/2014/11/index.html","hash":"e7b24b7b73115f5c37ba2039d3c18a7eabda7acd","modified":1526205827209},{"_id":"public/archives/2014/10/index.html","hash":"fdce6ffeefbf597ab74a6a6e6d6b2b2225be7103","modified":1526205827209},{"_id":"public/archives/2015/index.html","hash":"2609f6e381069bbf8a152e7ca8c3279932497530","modified":1526205827209},{"_id":"public/archives/2015/01/index.html","hash":"bca829d37d791b66f507df83086745fb267634df","modified":1526205827209},{"_id":"public/archives/2015/11/index.html","hash":"8c98b940b16ec77943ac991ca837f1d74c95fec0","modified":1526205827225},{"_id":"public/archives/2016/index.html","hash":"dc273a8fe386ee43ee9ef970842a0e5b02333f4c","modified":1526205827225},{"_id":"public/archives/2016/01/index.html","hash":"a057deebcc51c87ac016e31edefee9107581c73e","modified":1526205827225},{"_id":"public/archives/2016/04/index.html","hash":"8337cf80d3f62dcba02d513da16070e8705a562d","modified":1526205827225},{"_id":"public/archives/2016/06/index.html","hash":"c5c8b08d2982cffc5c0d4e8267c2e0e8211051c2","modified":1526205827225},{"_id":"public/archives/2016/07/index.html","hash":"d1e0118875a5bf29f411cd353e2f63807d59ff91","modified":1526205827225},{"_id":"public/archives/2016/08/index.html","hash":"599e14e5f8a2ce161c4aa9f30a60b5fb69a32f6b","modified":1526205827225},{"_id":"public/archives/2018/index.html","hash":"80d6bb117b989f378ed9e17414e07879330db15a","modified":1526205827225},{"_id":"public/archives/2018/05/index.html","hash":"957757369afef973f2362466737111c7a0a3134d","modified":1526205827225},{"_id":"public/categories/未分类/index.html","hash":"b65757225f2b0283442e97116f4f82fd5488a85d","modified":1526205827225},{"_id":"public/categories/无聊/index.html","hash":"9073ddd1d605641cb0211612622c027c2286b590","modified":1526205827225},{"_id":"public/categories/unclassified/index.html","hash":"1024513b715b3eaa7904bde8fde62f1404aaf75b","modified":1526205827225},{"_id":"public/categories/Unclassified/index.html","hash":"8526d3578283ec4f8e5fb20d488f366a87020861","modified":1526205827225},{"_id":"public/tags/SecureCRT/index.html","hash":"31631ea5e2dcce0962b3eacd833a441400111ccc","modified":1526205827225},{"_id":"public/tags/DES/index.html","hash":"24f2c994110d641cb0b56569873115cb5ce91344","modified":1526205827225},{"_id":"public/tags/shell/index.html","hash":"340204c0607a1d5b1162cfaa61f05a65764eac4d","modified":1526205827225},{"_id":"public/tags/lambda/index.html","hash":"35c437f193f3994b96bef8bf1c7222fa623c23e2","modified":1526205827225},{"_id":"public/tags/Python/index.html","hash":"015926954441efa02fabebb8b615d91b42a65f56","modified":1526205827225},{"_id":"public/tags/FTP/index.html","hash":"ee680178742801651a9c899f86f1cd06466680ba","modified":1526205827225},{"_id":"public/tags/C/index.html","hash":"332f0d6487116e47941dadf31fa25ce885a10181","modified":1526205827225},{"_id":"public/page/3/index.html","hash":"dde8fed9ffdc927047c761fbed0e8267e43f56e4","modified":1526205827225},{"_id":"public/index.html","hash":"08583e2c690c89049a5a2bd1d215535088cdd325","modified":1526205827225},{"_id":"public/page/2/index.html","hash":"249e738eb2ff5c1257e18587dce2b940525d5bf0","modified":1526205827225},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1526205827225},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1526205827225},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1526205827225},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1526205827225},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1526205827225},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1526205827225},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1526205827225},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1526205827225},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1526205827225},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1526205827225},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1526205828628},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1526205828634},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1526205828634},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1526205828634},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1526205828634},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1526205828635},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1526205828635},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1526205828635},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1526205828635},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1526205828635},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1526205828635},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1526205828641},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1526205828641}],"Category":[{"name":"未分类","_id":"cjh4njkc300021sufcy18f4x9"},{"name":"无聊","_id":"cjh4njkc3000c1sufrht7vlt2"},{"name":"unclassified","_id":"cjh4njkcj000q1sufuctu7d6k"},{"name":"Unclassified","_id":"cjh4njkcy00151suf9lo2vtei"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":"SecureCRT-RSA登陆服务器笔记","date":"2014-10-27T19:23:41.000Z","_content":"\n系统环境：CentOS\n--------------\n登录用户：root\n--------------\n\n0.创建RSA密钥对\n\t\nSecureCRT → 工具 → 创建公钥 → 选择RSA加密算法 → 通行短语（例如：huangjinqiang.johnny） → 密钥长度 1024 → 选择 OpenSSH密钥格式\n\n1.上传并修改公钥文件\n\t\nSecureCRT →  选项 → 会话选项 → 类别 X/Y/Zmoderm → 上传,将上传的公钥重命名为\n~/.ssh/authorized_keys\n\t\t\n\t# chmod 700 ~/.ssh\n\t# chmod 644 ~/.ssh/authorized_keys\n\n2.修改/etc/ssh/sshd_config\n\t\n在Linux服务器上编辑 sshd.config 文件\n\t\n\t# vi /usr/local/etc/sshd_config\t\n\tPasswordAuthentication no  # （关闭口令认证）\t\t\n\tPubkeyAuthentication yes   # （开启公钥认证） // 默认好像是开启的\t\t\n\tAuthorizedKeysFile .ssh/authorized_keys  # （认证公钥文件位置）\n\n3.重启sshd服务\n\t\n\t# /etc/init.d/sshd restart\n\n4.登录设置\n\t\nSecureCRT → 文件 → 快速连接 → 选择协议(SSH2)、主机名、端口、用户名，将鉴权中的公钥选为首选登录方式，连接\n\n5.密钥登录\n\t\n首次登陆需要选择客户端的公钥所在位置(*)，然后点击登陆即可。\n如果设置有误导致登陆失败，SecureCRT将执行鉴权后面的登录方式（如密码登陆）尝试登陆服务器。\n\n*关键点：\n\nwindows客户端的公钥和私钥需要放在同一目录下，打开时选择公钥后，SecureCRT会对比客户端与服务器的公钥是否一致，如果一致则继续读取客户端的私钥，使用加密算法验证私钥与公钥是否匹配（关键点属作者个人理解，如有错误，欢迎讨论：hellojinqiang [at] gmail.com）\n\n","source":"_posts/2014-10-28-SecureCRT-RSA登陆服务器笔记.md","raw":"---\nlayout: post\ntitle: SecureCRT-RSA登陆服务器笔记\ndate: 2014-10-28 03:23:41\ntags: SecureCRT\ncategories: 未分类\n---\n\n系统环境：CentOS\n--------------\n登录用户：root\n--------------\n\n0.创建RSA密钥对\n\t\nSecureCRT → 工具 → 创建公钥 → 选择RSA加密算法 → 通行短语（例如：huangjinqiang.johnny） → 密钥长度 1024 → 选择 OpenSSH密钥格式\n\n1.上传并修改公钥文件\n\t\nSecureCRT →  选项 → 会话选项 → 类别 X/Y/Zmoderm → 上传,将上传的公钥重命名为\n~/.ssh/authorized_keys\n\t\t\n\t# chmod 700 ~/.ssh\n\t# chmod 644 ~/.ssh/authorized_keys\n\n2.修改/etc/ssh/sshd_config\n\t\n在Linux服务器上编辑 sshd.config 文件\n\t\n\t# vi /usr/local/etc/sshd_config\t\n\tPasswordAuthentication no  # （关闭口令认证）\t\t\n\tPubkeyAuthentication yes   # （开启公钥认证） // 默认好像是开启的\t\t\n\tAuthorizedKeysFile .ssh/authorized_keys  # （认证公钥文件位置）\n\n3.重启sshd服务\n\t\n\t# /etc/init.d/sshd restart\n\n4.登录设置\n\t\nSecureCRT → 文件 → 快速连接 → 选择协议(SSH2)、主机名、端口、用户名，将鉴权中的公钥选为首选登录方式，连接\n\n5.密钥登录\n\t\n首次登陆需要选择客户端的公钥所在位置(*)，然后点击登陆即可。\n如果设置有误导致登陆失败，SecureCRT将执行鉴权后面的登录方式（如密码登陆）尝试登陆服务器。\n\n*关键点：\n\nwindows客户端的公钥和私钥需要放在同一目录下，打开时选择公钥后，SecureCRT会对比客户端与服务器的公钥是否一致，如果一致则继续读取客户端的私钥，使用加密算法验证私钥与公钥是否匹配（关键点属作者个人理解，如有错误，欢迎讨论：hellojinqiang [at] gmail.com）\n\n","slug":"2014-10-28-SecureCRT-RSA登陆服务器笔记","published":1,"updated":"2018-05-13T09:18:23.148Z","comments":1,"photos":[],"link":"","_id":"cjh4njkbo00001sufohi5gd5d","content":"<h2 id=\"系统环境：CentOS\"><a href=\"#系统环境：CentOS\" class=\"headerlink\" title=\"系统环境：CentOS\"></a>系统环境：CentOS</h2><h2 id=\"登录用户：root\"><a href=\"#登录用户：root\" class=\"headerlink\" title=\"登录用户：root\"></a>登录用户：root</h2><p>0.创建RSA密钥对</p>\n<p>SecureCRT → 工具 → 创建公钥 → 选择RSA加密算法 → 通行短语（例如：huangjinqiang.johnny） → 密钥长度 1024 → 选择 OpenSSH密钥格式</p>\n<p>1.上传并修改公钥文件</p>\n<p>SecureCRT →  选项 → 会话选项 → 类别 X/Y/Zmoderm → 上传,将上传的公钥重命名为<br>~/.ssh/authorized_keys</p>\n<pre><code># chmod 700 ~/.ssh\n# chmod 644 ~/.ssh/authorized_keys\n</code></pre><p>2.修改/etc/ssh/sshd_config</p>\n<p>在Linux服务器上编辑 sshd.config 文件</p>\n<pre><code># vi /usr/local/etc/sshd_config    \nPasswordAuthentication no  # （关闭口令认证）        \nPubkeyAuthentication yes   # （开启公钥认证） // 默认好像是开启的        \nAuthorizedKeysFile .ssh/authorized_keys  # （认证公钥文件位置）\n</code></pre><p>3.重启sshd服务</p>\n<pre><code># /etc/init.d/sshd restart\n</code></pre><p>4.登录设置</p>\n<p>SecureCRT → 文件 → 快速连接 → 选择协议(SSH2)、主机名、端口、用户名，将鉴权中的公钥选为首选登录方式，连接</p>\n<p>5.密钥登录</p>\n<p>首次登陆需要选择客户端的公钥所在位置(*)，然后点击登陆即可。<br>如果设置有误导致登陆失败，SecureCRT将执行鉴权后面的登录方式（如密码登陆）尝试登陆服务器。</p>\n<p>*关键点：</p>\n<p>windows客户端的公钥和私钥需要放在同一目录下，打开时选择公钥后，SecureCRT会对比客户端与服务器的公钥是否一致，如果一致则继续读取客户端的私钥，使用加密算法验证私钥与公钥是否匹配（关键点属作者个人理解，如有错误，欢迎讨论：hellojinqiang [at] gmail.com）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"系统环境：CentOS\"><a href=\"#系统环境：CentOS\" class=\"headerlink\" title=\"系统环境：CentOS\"></a>系统环境：CentOS</h2><h2 id=\"登录用户：root\"><a href=\"#登录用户：root\" class=\"headerlink\" title=\"登录用户：root\"></a>登录用户：root</h2><p>0.创建RSA密钥对</p>\n<p>SecureCRT → 工具 → 创建公钥 → 选择RSA加密算法 → 通行短语（例如：huangjinqiang.johnny） → 密钥长度 1024 → 选择 OpenSSH密钥格式</p>\n<p>1.上传并修改公钥文件</p>\n<p>SecureCRT →  选项 → 会话选项 → 类别 X/Y/Zmoderm → 上传,将上传的公钥重命名为<br>~/.ssh/authorized_keys</p>\n<pre><code># chmod 700 ~/.ssh\n# chmod 644 ~/.ssh/authorized_keys\n</code></pre><p>2.修改/etc/ssh/sshd_config</p>\n<p>在Linux服务器上编辑 sshd.config 文件</p>\n<pre><code># vi /usr/local/etc/sshd_config    \nPasswordAuthentication no  # （关闭口令认证）        \nPubkeyAuthentication yes   # （开启公钥认证） // 默认好像是开启的        \nAuthorizedKeysFile .ssh/authorized_keys  # （认证公钥文件位置）\n</code></pre><p>3.重启sshd服务</p>\n<pre><code># /etc/init.d/sshd restart\n</code></pre><p>4.登录设置</p>\n<p>SecureCRT → 文件 → 快速连接 → 选择协议(SSH2)、主机名、端口、用户名，将鉴权中的公钥选为首选登录方式，连接</p>\n<p>5.密钥登录</p>\n<p>首次登陆需要选择客户端的公钥所在位置(*)，然后点击登陆即可。<br>如果设置有误导致登陆失败，SecureCRT将执行鉴权后面的登录方式（如密码登陆）尝试登陆服务器。</p>\n<p>*关键点：</p>\n<p>windows客户端的公钥和私钥需要放在同一目录下，打开时选择公钥后，SecureCRT会对比客户端与服务器的公钥是否一致，如果一致则继续读取客户端的私钥，使用加密算法验证私钥与公钥是否匹配（关键点属作者个人理解，如有错误，欢迎讨论：hellojinqiang [at] gmail.com）</p>\n"},{"layout":"post","title":"About","date":"2013-04-17T05:15:44.000Z","_content":"\n[Johzzy](https://github.com/Johzzy), Programmer, Open source and Math.\n\n[Just For Fun](/just-for-fun/)\n","source":"_posts/2013-4-17-about.md","raw":"---\nlayout: post\ntitle: About\ndate: 2013-04-17 13:15:44\n---\n\n[Johzzy](https://github.com/Johzzy), Programmer, Open source and Math.\n\n[Just For Fun](/just-for-fun/)\n","slug":"2013-4-17-about","published":1,"updated":"2018-05-13T07:40:36.339Z","comments":1,"photos":[],"link":"","_id":"cjh4njkc300011sufqx46jr73","content":"<p><a href=\"https://github.com/Johzzy\" target=\"_blank\" rel=\"noopener\">Johzzy</a>, Programmer, Open source and Math.</p>\n<p><a href=\"/just-for-fun/\">Just For Fun</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/Johzzy\" target=\"_blank\" rel=\"noopener\">Johzzy</a>, Programmer, Open source and Math.</p>\n<p><a href=\"/just-for-fun/\">Just For Fun</a></p>\n"},{"layout":"post","title":"DES加密","date":"2014-11-10T05:20:59.000Z","_content":"\nDES（Data Encrypt Standard数据库加密标准）是对称加密算法。\n\n在《信息安全》课上，老师要求用C语言实现DES算法，如果你用C++或者JAVA，同样的代码，估计要慢10倍。\n\n废话不多说，直接上代码。 \n\n>程序组织结构\n\n\t.\n\t├── des.cpp\n\t├── des.h\n\t├── des_test.cpp\n\t└── makefile\t\n\n\t0 directories, 4 files\n\t\n\n>[des.cpp](https://github.com/ligelaige/some_cpp_code/blob/master/des/des.cpp)\n\n\t/**\n\t * 文件比较长，直接转下载查看吧！\n\t */\n\n***[des.cpp](https://github.com/ligelaige/some_cpp_code/blob/master/des/des.cpp)***\n\t \n>[des.h](https://github.com/ligelaige/some_cpp_code/blob/master/des/des.h)\n\n\t#ifndef _DES_H_\n\t#define _DES_H_\n\n\tenum { ENCRYPT, DECRYPT };\n\n\t// 加密/解密 Type=ENCRYPT:加密,DECRYPT:解密\n\tvoid Des_Run(char Out[8], char In[8], bool Type = ENCRYPT);\n\t// 设置密钥\n\tvoid Des_SetKey(const char Key[8]);\n\n\t#endif\n\t\n>[des_test.cpp](https://github.com/ligelaige/some_cpp_code/blob/master/des/des_test.cpp)\n\n\t/*************************************************************************\n\t\t>    File Name: des_test.cpp\n\t\t>       Author: huangjinqiang\n\t\t>        Email: ligelaige@gmail.com\n\t\t> Created Time: Tue 04 Nov 2014 11:27:19 PM CST\n\t ************************************************************************/\n\n\t#include <stdio.h>\n\t#include \"des.h\"\n\n\t#define SIZE 128\n\n\tunsigned getaline(char* str)\n\t{\n\t\tchar c='\\n';\n\t\tunsigned i = 0;\n\t\tdo\n\t\t{\n\t\t\tc = getchar();\n\t\t\tstr[i++] = c;\n\t\t} while(c != '\\n');\n\t\n\t\tstr[i-1] = '\\0';\n\t\treturn i-1;\n\t}\n\n\tvoid writeline(const char a[], const char b[])\n\t{\n\t\tprintf(\"%s: [\", a);\n\t\tprintf(\"%s\", b);\n\t\tprintf(\"]\\n\");\n\t}\n\n\tint main(void)\n\t{\n\t\tchar key[8]={1,9,8,0,9,1,7};\n\t\tchar str[SIZE];\n\t\tDes_SetKey(key);\n\t\n\t\tprintf(\"Enter a string(<=128): \");\n\t\tunsigned length = getaline(str);\n\n\t\twriteline(\"Before encrypting\", str);\n\n\t\tfor (int i=0; i<length; i+= 8)\n\t\t{\n\t\t\tDes_Run(str+i, str+i, ENCRYPT);\n\t\t}\n\t\twriteline(\"After  encrypting\", str);\n\n\t\tfor (int i=0; i<length; i+= 8)\n\t\t{\n\t\t\tDes_Run(str+i, str+i, DECRYPT);\n\t\t}\n\t\twriteline(\"After  decrypting\", str);\n\n\t\treturn 0;\n\t}\n\t\n\n>[makefile](https://github.com/ligelaige/some_cpp_code/blob/master/des/makefile)\n\n\tmain: des.o des_test.o\n\t\tg++ -o main des.o des_test.o\n\n\tdes.o: des.cpp\n\t\tg++ -c des.cpp\n\n\tdes_test.o: des_test.cpp\n\t\tg++ -c des_test.cpp\n\n\tclean:\n\t\trm *.o\n\t\t\n(完)\n\t\t\n\t\n","source":"_posts/2014-11-10-DES加密.md","raw":"---\nlayout: post\ntitle: DES加密\ndate: 2014-11-10 13:20:59\ntags: DES\ncategories: 未分类\n---\n\nDES（Data Encrypt Standard数据库加密标准）是对称加密算法。\n\n在《信息安全》课上，老师要求用C语言实现DES算法，如果你用C++或者JAVA，同样的代码，估计要慢10倍。\n\n废话不多说，直接上代码。 \n\n>程序组织结构\n\n\t.\n\t├── des.cpp\n\t├── des.h\n\t├── des_test.cpp\n\t└── makefile\t\n\n\t0 directories, 4 files\n\t\n\n>[des.cpp](https://github.com/ligelaige/some_cpp_code/blob/master/des/des.cpp)\n\n\t/**\n\t * 文件比较长，直接转下载查看吧！\n\t */\n\n***[des.cpp](https://github.com/ligelaige/some_cpp_code/blob/master/des/des.cpp)***\n\t \n>[des.h](https://github.com/ligelaige/some_cpp_code/blob/master/des/des.h)\n\n\t#ifndef _DES_H_\n\t#define _DES_H_\n\n\tenum { ENCRYPT, DECRYPT };\n\n\t// 加密/解密 Type=ENCRYPT:加密,DECRYPT:解密\n\tvoid Des_Run(char Out[8], char In[8], bool Type = ENCRYPT);\n\t// 设置密钥\n\tvoid Des_SetKey(const char Key[8]);\n\n\t#endif\n\t\n>[des_test.cpp](https://github.com/ligelaige/some_cpp_code/blob/master/des/des_test.cpp)\n\n\t/*************************************************************************\n\t\t>    File Name: des_test.cpp\n\t\t>       Author: huangjinqiang\n\t\t>        Email: ligelaige@gmail.com\n\t\t> Created Time: Tue 04 Nov 2014 11:27:19 PM CST\n\t ************************************************************************/\n\n\t#include <stdio.h>\n\t#include \"des.h\"\n\n\t#define SIZE 128\n\n\tunsigned getaline(char* str)\n\t{\n\t\tchar c='\\n';\n\t\tunsigned i = 0;\n\t\tdo\n\t\t{\n\t\t\tc = getchar();\n\t\t\tstr[i++] = c;\n\t\t} while(c != '\\n');\n\t\n\t\tstr[i-1] = '\\0';\n\t\treturn i-1;\n\t}\n\n\tvoid writeline(const char a[], const char b[])\n\t{\n\t\tprintf(\"%s: [\", a);\n\t\tprintf(\"%s\", b);\n\t\tprintf(\"]\\n\");\n\t}\n\n\tint main(void)\n\t{\n\t\tchar key[8]={1,9,8,0,9,1,7};\n\t\tchar str[SIZE];\n\t\tDes_SetKey(key);\n\t\n\t\tprintf(\"Enter a string(<=128): \");\n\t\tunsigned length = getaline(str);\n\n\t\twriteline(\"Before encrypting\", str);\n\n\t\tfor (int i=0; i<length; i+= 8)\n\t\t{\n\t\t\tDes_Run(str+i, str+i, ENCRYPT);\n\t\t}\n\t\twriteline(\"After  encrypting\", str);\n\n\t\tfor (int i=0; i<length; i+= 8)\n\t\t{\n\t\t\tDes_Run(str+i, str+i, DECRYPT);\n\t\t}\n\t\twriteline(\"After  decrypting\", str);\n\n\t\treturn 0;\n\t}\n\t\n\n>[makefile](https://github.com/ligelaige/some_cpp_code/blob/master/des/makefile)\n\n\tmain: des.o des_test.o\n\t\tg++ -o main des.o des_test.o\n\n\tdes.o: des.cpp\n\t\tg++ -c des.cpp\n\n\tdes_test.o: des_test.cpp\n\t\tg++ -c des_test.cpp\n\n\tclean:\n\t\trm *.o\n\t\t\n(完)\n\t\t\n\t\n","slug":"2014-11-10-DES加密","published":1,"updated":"2018-05-13T07:40:36.340Z","comments":1,"photos":[],"link":"","_id":"cjh4njkc300041sufz4d19ict","content":"<p>DES（Data Encrypt Standard数据库加密标准）是对称加密算法。</p>\n<p>在《信息安全》课上，老师要求用C语言实现DES算法，如果你用C++或者JAVA，同样的代码，估计要慢10倍。</p>\n<p>废话不多说，直接上代码。 </p>\n<blockquote>\n<p>程序组织结构</p>\n</blockquote>\n<pre><code>.\n├── des.cpp\n├── des.h\n├── des_test.cpp\n└── makefile    \n\n0 directories, 4 files\n</code></pre><blockquote>\n<p><a href=\"https://github.com/ligelaige/some_cpp_code/blob/master/des/des.cpp\" target=\"_blank\" rel=\"noopener\">des.cpp</a></p>\n</blockquote>\n<pre><code>/**\n * 文件比较长，直接转下载查看吧！\n */\n</code></pre><p><strong><em><a href=\"https://github.com/ligelaige/some_cpp_code/blob/master/des/des.cpp\" target=\"_blank\" rel=\"noopener\">des.cpp</a></em></strong></p>\n<blockquote>\n<p><a href=\"https://github.com/ligelaige/some_cpp_code/blob/master/des/des.h\" target=\"_blank\" rel=\"noopener\">des.h</a></p>\n</blockquote>\n<pre><code>#ifndef _DES_H_\n#define _DES_H_\n\nenum { ENCRYPT, DECRYPT };\n\n// 加密/解密 Type=ENCRYPT:加密,DECRYPT:解密\nvoid Des_Run(char Out[8], char In[8], bool Type = ENCRYPT);\n// 设置密钥\nvoid Des_SetKey(const char Key[8]);\n\n#endif\n</code></pre><blockquote>\n<p><a href=\"https://github.com/ligelaige/some_cpp_code/blob/master/des/des_test.cpp\" target=\"_blank\" rel=\"noopener\">des_test.cpp</a></p>\n</blockquote>\n<pre><code>/*************************************************************************\n    &gt;    File Name: des_test.cpp\n    &gt;       Author: huangjinqiang\n    &gt;        Email: ligelaige@gmail.com\n    &gt; Created Time: Tue 04 Nov 2014 11:27:19 PM CST\n ************************************************************************/\n\n#include &lt;stdio.h&gt;\n#include &quot;des.h&quot;\n\n#define SIZE 128\n\nunsigned getaline(char* str)\n{\n    char c=&apos;\\n&apos;;\n    unsigned i = 0;\n    do\n    {\n        c = getchar();\n        str[i++] = c;\n    } while(c != &apos;\\n&apos;);\n\n    str[i-1] = &apos;\\0&apos;;\n    return i-1;\n}\n\nvoid writeline(const char a[], const char b[])\n{\n    printf(&quot;%s: [&quot;, a);\n    printf(&quot;%s&quot;, b);\n    printf(&quot;]\\n&quot;);\n}\n\nint main(void)\n{\n    char key[8]={1,9,8,0,9,1,7};\n    char str[SIZE];\n    Des_SetKey(key);\n\n    printf(&quot;Enter a string(&lt;=128): &quot;);\n    unsigned length = getaline(str);\n\n    writeline(&quot;Before encrypting&quot;, str);\n\n    for (int i=0; i&lt;length; i+= 8)\n    {\n        Des_Run(str+i, str+i, ENCRYPT);\n    }\n    writeline(&quot;After  encrypting&quot;, str);\n\n    for (int i=0; i&lt;length; i+= 8)\n    {\n        Des_Run(str+i, str+i, DECRYPT);\n    }\n    writeline(&quot;After  decrypting&quot;, str);\n\n    return 0;\n}\n</code></pre><blockquote>\n<p><a href=\"https://github.com/ligelaige/some_cpp_code/blob/master/des/makefile\" target=\"_blank\" rel=\"noopener\">makefile</a></p>\n</blockquote>\n<pre><code>main: des.o des_test.o\n    g++ -o main des.o des_test.o\n\ndes.o: des.cpp\n    g++ -c des.cpp\n\ndes_test.o: des_test.cpp\n    g++ -c des_test.cpp\n\nclean:\n    rm *.o\n</code></pre><p>(完)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>DES（Data Encrypt Standard数据库加密标准）是对称加密算法。</p>\n<p>在《信息安全》课上，老师要求用C语言实现DES算法，如果你用C++或者JAVA，同样的代码，估计要慢10倍。</p>\n<p>废话不多说，直接上代码。 </p>\n<blockquote>\n<p>程序组织结构</p>\n</blockquote>\n<pre><code>.\n├── des.cpp\n├── des.h\n├── des_test.cpp\n└── makefile    \n\n0 directories, 4 files\n</code></pre><blockquote>\n<p><a href=\"https://github.com/ligelaige/some_cpp_code/blob/master/des/des.cpp\" target=\"_blank\" rel=\"noopener\">des.cpp</a></p>\n</blockquote>\n<pre><code>/**\n * 文件比较长，直接转下载查看吧！\n */\n</code></pre><p><strong><em><a href=\"https://github.com/ligelaige/some_cpp_code/blob/master/des/des.cpp\" target=\"_blank\" rel=\"noopener\">des.cpp</a></em></strong></p>\n<blockquote>\n<p><a href=\"https://github.com/ligelaige/some_cpp_code/blob/master/des/des.h\" target=\"_blank\" rel=\"noopener\">des.h</a></p>\n</blockquote>\n<pre><code>#ifndef _DES_H_\n#define _DES_H_\n\nenum { ENCRYPT, DECRYPT };\n\n// 加密/解密 Type=ENCRYPT:加密,DECRYPT:解密\nvoid Des_Run(char Out[8], char In[8], bool Type = ENCRYPT);\n// 设置密钥\nvoid Des_SetKey(const char Key[8]);\n\n#endif\n</code></pre><blockquote>\n<p><a href=\"https://github.com/ligelaige/some_cpp_code/blob/master/des/des_test.cpp\" target=\"_blank\" rel=\"noopener\">des_test.cpp</a></p>\n</blockquote>\n<pre><code>/*************************************************************************\n    &gt;    File Name: des_test.cpp\n    &gt;       Author: huangjinqiang\n    &gt;        Email: ligelaige@gmail.com\n    &gt; Created Time: Tue 04 Nov 2014 11:27:19 PM CST\n ************************************************************************/\n\n#include &lt;stdio.h&gt;\n#include &quot;des.h&quot;\n\n#define SIZE 128\n\nunsigned getaline(char* str)\n{\n    char c=&apos;\\n&apos;;\n    unsigned i = 0;\n    do\n    {\n        c = getchar();\n        str[i++] = c;\n    } while(c != &apos;\\n&apos;);\n\n    str[i-1] = &apos;\\0&apos;;\n    return i-1;\n}\n\nvoid writeline(const char a[], const char b[])\n{\n    printf(&quot;%s: [&quot;, a);\n    printf(&quot;%s&quot;, b);\n    printf(&quot;]\\n&quot;);\n}\n\nint main(void)\n{\n    char key[8]={1,9,8,0,9,1,7};\n    char str[SIZE];\n    Des_SetKey(key);\n\n    printf(&quot;Enter a string(&lt;=128): &quot;);\n    unsigned length = getaline(str);\n\n    writeline(&quot;Before encrypting&quot;, str);\n\n    for (int i=0; i&lt;length; i+= 8)\n    {\n        Des_Run(str+i, str+i, ENCRYPT);\n    }\n    writeline(&quot;After  encrypting&quot;, str);\n\n    for (int i=0; i&lt;length; i+= 8)\n    {\n        Des_Run(str+i, str+i, DECRYPT);\n    }\n    writeline(&quot;After  decrypting&quot;, str);\n\n    return 0;\n}\n</code></pre><blockquote>\n<p><a href=\"https://github.com/ligelaige/some_cpp_code/blob/master/des/makefile\" target=\"_blank\" rel=\"noopener\">makefile</a></p>\n</blockquote>\n<pre><code>main: des.o des_test.o\n    g++ -o main des.o des_test.o\n\ndes.o: des.cpp\n    g++ -c des.cpp\n\ndes_test.o: des_test.cpp\n    g++ -c des_test.cpp\n\nclean:\n    rm *.o\n</code></pre><p>(完)</p>\n"},{"layout":"post","title":"批量获取歌曲链接","date":"2014-11-16T07:40:59.000Z","_content":"\n今天闲来无事，就准备下载一些歌曲，尼玛，不搜不知道，一不小心搜了一片，很是欣喜很是愁！\n\n可能是被各种网盘惯坏了，不想一个一个去下载，索性把这些歌曲的网盘链接保存下来，就写了一个批量获取歌曲链接的脚本，在此记录一下。\n\n基本思路很简单：wget下载网页，grep、awk分析网页，保存结果。\n\n代码贴一下：\n\n\t#!/bin/bash\n\t#    File Name: getapeurl.sh\n\t#       Author: huangjinqiang\n\t#        Email: ligelaige@gmail.com\n\t# Created Time: Sun 16 Nov 2014 03:01:34 PM CST\n\n\n\t#while read line\n\t#do\n\t#\techo $line\n\t#done < readme.txt\n\n\tpart=\"songs_part\"\n\tbak=\"songs_bak_part\"\n\tfile=\"songs.txt\"\n\tmusicurl=\"musicurl.txt\"\n\n\tdeclare -i num=0\n\n\tfor url in `cat $musicurl` ; \n\tdo\n\t\tlet num++\n\t\tafile=\"$part$num\"\n\t\tbfile=\"$bak$num\"\n\t\techo $url\n\t\twget $url -O $afile -o $file 2>&1 /dev/null\n\t\n\t\tgrep href $afile > $bfile\n\t\tgrep \"http://115.com\" $bfile > $afile\n\t\tawk -F \">\" '{ printf $2 \"\\n\" }' $afile > $bfile\n\t\tawk -F \"<\" '{ printf $1 \"\\n\" }' $bfile > $afile\n\tdone\n\n\techo -n > $file\n\n\tfor i in `seq $num` ;\n\tdo \n\t\tcat \"$part$i\" >> $file\n\t\trm \"$part$i\" \"$bak$i\"\n\tdone\n\t[ $? = 0 ] && echo \"ok, all songs url in the file $file.\"\n        \n其中文件musicurl.txt保存了相关网页\n        \n        http://www.cdbao.net/thread-20150-1-1.html\n        http://www.cdbao.net/thread-20157-1-1.html\n        http://www.cdbao.net/thread-20170-1-1.html\n\n公开一下代码链接吧\n\n[getapeurl.sh](http://huangjinqiang.github.io/resources/getapeurl/getapeurl.sh)\n\n[musicurl.txt](http://huangjinqiang.github.io/resources/getapeurl/musicurl.txt)\n\n生成的链接文件\n\n[songs.txt](http://huangjinqiang.github.io/resources/getapeurl/songs.txt)\n\n欢迎下载，如果可以请分享一下你下载的歌曲给我，谢谢！\n\n(完)\n\n","source":"_posts/2014-11-16-批量获取歌曲链接.md","raw":"---\nlayout: post\ntitle: 批量获取歌曲链接\ndate: 2014-11-16 15:40:59\ntags: shell\ncategories: 无聊\n---\n\n今天闲来无事，就准备下载一些歌曲，尼玛，不搜不知道，一不小心搜了一片，很是欣喜很是愁！\n\n可能是被各种网盘惯坏了，不想一个一个去下载，索性把这些歌曲的网盘链接保存下来，就写了一个批量获取歌曲链接的脚本，在此记录一下。\n\n基本思路很简单：wget下载网页，grep、awk分析网页，保存结果。\n\n代码贴一下：\n\n\t#!/bin/bash\n\t#    File Name: getapeurl.sh\n\t#       Author: huangjinqiang\n\t#        Email: ligelaige@gmail.com\n\t# Created Time: Sun 16 Nov 2014 03:01:34 PM CST\n\n\n\t#while read line\n\t#do\n\t#\techo $line\n\t#done < readme.txt\n\n\tpart=\"songs_part\"\n\tbak=\"songs_bak_part\"\n\tfile=\"songs.txt\"\n\tmusicurl=\"musicurl.txt\"\n\n\tdeclare -i num=0\n\n\tfor url in `cat $musicurl` ; \n\tdo\n\t\tlet num++\n\t\tafile=\"$part$num\"\n\t\tbfile=\"$bak$num\"\n\t\techo $url\n\t\twget $url -O $afile -o $file 2>&1 /dev/null\n\t\n\t\tgrep href $afile > $bfile\n\t\tgrep \"http://115.com\" $bfile > $afile\n\t\tawk -F \">\" '{ printf $2 \"\\n\" }' $afile > $bfile\n\t\tawk -F \"<\" '{ printf $1 \"\\n\" }' $bfile > $afile\n\tdone\n\n\techo -n > $file\n\n\tfor i in `seq $num` ;\n\tdo \n\t\tcat \"$part$i\" >> $file\n\t\trm \"$part$i\" \"$bak$i\"\n\tdone\n\t[ $? = 0 ] && echo \"ok, all songs url in the file $file.\"\n        \n其中文件musicurl.txt保存了相关网页\n        \n        http://www.cdbao.net/thread-20150-1-1.html\n        http://www.cdbao.net/thread-20157-1-1.html\n        http://www.cdbao.net/thread-20170-1-1.html\n\n公开一下代码链接吧\n\n[getapeurl.sh](http://huangjinqiang.github.io/resources/getapeurl/getapeurl.sh)\n\n[musicurl.txt](http://huangjinqiang.github.io/resources/getapeurl/musicurl.txt)\n\n生成的链接文件\n\n[songs.txt](http://huangjinqiang.github.io/resources/getapeurl/songs.txt)\n\n欢迎下载，如果可以请分享一下你下载的歌曲给我，谢谢！\n\n(完)\n\n","slug":"2014-11-16-批量获取歌曲链接","published":1,"updated":"2018-05-13T09:19:14.065Z","comments":1,"photos":[],"link":"","_id":"cjh4njkc300051sufuh51kgjv","content":"<p>今天闲来无事，就准备下载一些歌曲，尼玛，不搜不知道，一不小心搜了一片，很是欣喜很是愁！</p>\n<p>可能是被各种网盘惯坏了，不想一个一个去下载，索性把这些歌曲的网盘链接保存下来，就写了一个批量获取歌曲链接的脚本，在此记录一下。</p>\n<p>基本思路很简单：wget下载网页，grep、awk分析网页，保存结果。</p>\n<p>代码贴一下：</p>\n<pre><code>#!/bin/bash\n#    File Name: getapeurl.sh\n#       Author: huangjinqiang\n#        Email: ligelaige@gmail.com\n# Created Time: Sun 16 Nov 2014 03:01:34 PM CST\n\n\n#while read line\n#do\n#    echo $line\n#done &lt; readme.txt\n\npart=&quot;songs_part&quot;\nbak=&quot;songs_bak_part&quot;\nfile=&quot;songs.txt&quot;\nmusicurl=&quot;musicurl.txt&quot;\n\ndeclare -i num=0\n\nfor url in `cat $musicurl` ; \ndo\n    let num++\n    afile=&quot;$part$num&quot;\n    bfile=&quot;$bak$num&quot;\n    echo $url\n    wget $url -O $afile -o $file 2&gt;&amp;1 /dev/null\n\n    grep href $afile &gt; $bfile\n    grep &quot;http://115.com&quot; $bfile &gt; $afile\n    awk -F &quot;&gt;&quot; &apos;{ printf $2 &quot;\\n&quot; }&apos; $afile &gt; $bfile\n    awk -F &quot;&lt;&quot; &apos;{ printf $1 &quot;\\n&quot; }&apos; $bfile &gt; $afile\ndone\n\necho -n &gt; $file\n\nfor i in `seq $num` ;\ndo \n    cat &quot;$part$i&quot; &gt;&gt; $file\n    rm &quot;$part$i&quot; &quot;$bak$i&quot;\ndone\n[ $? = 0 ] &amp;&amp; echo &quot;ok, all songs url in the file $file.&quot;\n</code></pre><p>其中文件musicurl.txt保存了相关网页</p>\n<pre><code>http://www.cdbao.net/thread-20150-1-1.html\nhttp://www.cdbao.net/thread-20157-1-1.html\nhttp://www.cdbao.net/thread-20170-1-1.html\n</code></pre><p>公开一下代码链接吧</p>\n<p><a href=\"http://huangjinqiang.github.io/resources/getapeurl/getapeurl.sh\" target=\"_blank\" rel=\"noopener\">getapeurl.sh</a></p>\n<p><a href=\"http://huangjinqiang.github.io/resources/getapeurl/musicurl.txt\" target=\"_blank\" rel=\"noopener\">musicurl.txt</a></p>\n<p>生成的链接文件</p>\n<p><a href=\"http://huangjinqiang.github.io/resources/getapeurl/songs.txt\" target=\"_blank\" rel=\"noopener\">songs.txt</a></p>\n<p>欢迎下载，如果可以请分享一下你下载的歌曲给我，谢谢！</p>\n<p>(完)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天闲来无事，就准备下载一些歌曲，尼玛，不搜不知道，一不小心搜了一片，很是欣喜很是愁！</p>\n<p>可能是被各种网盘惯坏了，不想一个一个去下载，索性把这些歌曲的网盘链接保存下来，就写了一个批量获取歌曲链接的脚本，在此记录一下。</p>\n<p>基本思路很简单：wget下载网页，grep、awk分析网页，保存结果。</p>\n<p>代码贴一下：</p>\n<pre><code>#!/bin/bash\n#    File Name: getapeurl.sh\n#       Author: huangjinqiang\n#        Email: ligelaige@gmail.com\n# Created Time: Sun 16 Nov 2014 03:01:34 PM CST\n\n\n#while read line\n#do\n#    echo $line\n#done &lt; readme.txt\n\npart=&quot;songs_part&quot;\nbak=&quot;songs_bak_part&quot;\nfile=&quot;songs.txt&quot;\nmusicurl=&quot;musicurl.txt&quot;\n\ndeclare -i num=0\n\nfor url in `cat $musicurl` ; \ndo\n    let num++\n    afile=&quot;$part$num&quot;\n    bfile=&quot;$bak$num&quot;\n    echo $url\n    wget $url -O $afile -o $file 2&gt;&amp;1 /dev/null\n\n    grep href $afile &gt; $bfile\n    grep &quot;http://115.com&quot; $bfile &gt; $afile\n    awk -F &quot;&gt;&quot; &apos;{ printf $2 &quot;\\n&quot; }&apos; $afile &gt; $bfile\n    awk -F &quot;&lt;&quot; &apos;{ printf $1 &quot;\\n&quot; }&apos; $bfile &gt; $afile\ndone\n\necho -n &gt; $file\n\nfor i in `seq $num` ;\ndo \n    cat &quot;$part$i&quot; &gt;&gt; $file\n    rm &quot;$part$i&quot; &quot;$bak$i&quot;\ndone\n[ $? = 0 ] &amp;&amp; echo &quot;ok, all songs url in the file $file.&quot;\n</code></pre><p>其中文件musicurl.txt保存了相关网页</p>\n<pre><code>http://www.cdbao.net/thread-20150-1-1.html\nhttp://www.cdbao.net/thread-20157-1-1.html\nhttp://www.cdbao.net/thread-20170-1-1.html\n</code></pre><p>公开一下代码链接吧</p>\n<p><a href=\"http://huangjinqiang.github.io/resources/getapeurl/getapeurl.sh\" target=\"_blank\" rel=\"noopener\">getapeurl.sh</a></p>\n<p><a href=\"http://huangjinqiang.github.io/resources/getapeurl/musicurl.txt\" target=\"_blank\" rel=\"noopener\">musicurl.txt</a></p>\n<p>生成的链接文件</p>\n<p><a href=\"http://huangjinqiang.github.io/resources/getapeurl/songs.txt\" target=\"_blank\" rel=\"noopener\">songs.txt</a></p>\n<p>欢迎下载，如果可以请分享一下你下载的歌曲给我，谢谢！</p>\n<p>(完)</p>\n"},{"layout":"post","title":"计算两个文件的相对路径","date":"2014-11-12T23:20:59.000Z","_content":"\n平台：Ubuntu 14.10\n\n编译器：gcc 4.9.1\n\n语言：c++14\n\n相关特性：lambda，auto\n\nGithub：https://github.com/ligelaige/some_cpp_code/blob/master/cpp_lambda/relative_path.cpp\n\n    /************************************************************************* \n    > File Name: relative_path.cpp \n    > Author: huangjinqiang \n    > Email: ligelaige@gmail.com \n    > Created Time: Thu 13 Nov 2014 01:59:18 AM CST \n    > Compile: g++ relative_path.cpp -std=c++14 \n    ************************************************************************/  \n    #include <iostream>  \n    #include <string>  \n    #include <vector>  \n    #include <sstream>  \n    using namespace std;  \n    auto split(const string &s, const char delim = ' ')  \n    {  \n    stringstream ss(s);  \n    string item;  \n    vector<string> elems;  \n    while(getline(ss, item, delim) != NULL)  \n    {  \n    elems.push_back(item);  \n    }  \n    return elems;  \n    }  \n    int main(void)  \n    {  \n    string a, b;  \n    cout << \"Please Enter the Absolute Path of the File!\" << endl;  \n    cout << \"a = \";  \n    cin >> a;  \n    cout << \"b = \";  \n    cin >> b;  \n    auto diffpath = [](const string &a, const string &b) {  \n    int k = 0;  \n    for (int i=0; i< a.length() && i<b.length() && a[i] == b[i]; ++i)  \n    if (a[i] == '/') k=i;  \n    return k+1;  \n    };  \n    int index = diffpath(a, b);  \n    a = a.substr(index);  \n    b = b.substr(index);  \n    auto vecta = split(a, '/');  \n    auto vectb = split(b, '/');  \n    string a_path_b = \"\"; //a relative to b path  \n    string b_path_a = \"\"; //b relative to a path  \n    for (int i=1; i<vecta.size(); ++i)  \n    a_path_b += \"../\";  \n    a_path_b += a;  \n    for(int i=1; i<vectb.size(); ++i)  \n    b_path_a += \"../\";  \n    b_path_a += b;  \n    cout << \"a relative to b path: \" << a_path_b << endl;  \n    cout << \"b relative to a path: \" << b_path_a << endl;  \n    return 0;  \n    }  \n    \n(完)\n\nPS:\n\n一个实用的参数：$_\n\n比如\n\t\n\t$ vi 2014-11-13-计算两个文件的相对路径.md\n\t# 编辑完成之后，突然想使用gedit看看\n\t$ gedit $_\n\t# 这里的 $_ 就是上一个命令的最后一个参数\n\t\n\n\n","source":"_posts/2014-11-13-计算两个文件的相对路径.md","raw":"---\nlayout: post\ntitle: 计算两个文件的相对路径\ndate: 2014-11-13 7:20:59\ntags: lambda\ncategories: 未分类\n---\n\n平台：Ubuntu 14.10\n\n编译器：gcc 4.9.1\n\n语言：c++14\n\n相关特性：lambda，auto\n\nGithub：https://github.com/ligelaige/some_cpp_code/blob/master/cpp_lambda/relative_path.cpp\n\n    /************************************************************************* \n    > File Name: relative_path.cpp \n    > Author: huangjinqiang \n    > Email: ligelaige@gmail.com \n    > Created Time: Thu 13 Nov 2014 01:59:18 AM CST \n    > Compile: g++ relative_path.cpp -std=c++14 \n    ************************************************************************/  \n    #include <iostream>  \n    #include <string>  \n    #include <vector>  \n    #include <sstream>  \n    using namespace std;  \n    auto split(const string &s, const char delim = ' ')  \n    {  \n    stringstream ss(s);  \n    string item;  \n    vector<string> elems;  \n    while(getline(ss, item, delim) != NULL)  \n    {  \n    elems.push_back(item);  \n    }  \n    return elems;  \n    }  \n    int main(void)  \n    {  \n    string a, b;  \n    cout << \"Please Enter the Absolute Path of the File!\" << endl;  \n    cout << \"a = \";  \n    cin >> a;  \n    cout << \"b = \";  \n    cin >> b;  \n    auto diffpath = [](const string &a, const string &b) {  \n    int k = 0;  \n    for (int i=0; i< a.length() && i<b.length() && a[i] == b[i]; ++i)  \n    if (a[i] == '/') k=i;  \n    return k+1;  \n    };  \n    int index = diffpath(a, b);  \n    a = a.substr(index);  \n    b = b.substr(index);  \n    auto vecta = split(a, '/');  \n    auto vectb = split(b, '/');  \n    string a_path_b = \"\"; //a relative to b path  \n    string b_path_a = \"\"; //b relative to a path  \n    for (int i=1; i<vecta.size(); ++i)  \n    a_path_b += \"../\";  \n    a_path_b += a;  \n    for(int i=1; i<vectb.size(); ++i)  \n    b_path_a += \"../\";  \n    b_path_a += b;  \n    cout << \"a relative to b path: \" << a_path_b << endl;  \n    cout << \"b relative to a path: \" << b_path_a << endl;  \n    return 0;  \n    }  \n    \n(完)\n\nPS:\n\n一个实用的参数：$_\n\n比如\n\t\n\t$ vi 2014-11-13-计算两个文件的相对路径.md\n\t# 编辑完成之后，突然想使用gedit看看\n\t$ gedit $_\n\t# 这里的 $_ 就是上一个命令的最后一个参数\n\t\n\n\n","slug":"2014-11-13-计算两个文件的相对路径","published":1,"updated":"2018-05-13T09:20:17.456Z","comments":1,"photos":[],"link":"","_id":"cjh4njkc300061sufv1yuwiwe","content":"<p>平台：Ubuntu 14.10</p>\n<p>编译器：gcc 4.9.1</p>\n<p>语言：c++14</p>\n<p>相关特性：lambda，auto</p>\n<p>Github：<a href=\"https://github.com/ligelaige/some_cpp_code/blob/master/cpp_lambda/relative_path.cpp\" target=\"_blank\" rel=\"noopener\">https://github.com/ligelaige/some_cpp_code/blob/master/cpp_lambda/relative_path.cpp</a></p>\n<pre><code>/************************************************************************* \n&gt; File Name: relative_path.cpp \n&gt; Author: huangjinqiang \n&gt; Email: ligelaige@gmail.com \n&gt; Created Time: Thu 13 Nov 2014 01:59:18 AM CST \n&gt; Compile: g++ relative_path.cpp -std=c++14 \n************************************************************************/  \n#include &lt;iostream&gt;  \n#include &lt;string&gt;  \n#include &lt;vector&gt;  \n#include &lt;sstream&gt;  \nusing namespace std;  \nauto split(const string &amp;s, const char delim = &apos; &apos;)  \n{  \nstringstream ss(s);  \nstring item;  \nvector&lt;string&gt; elems;  \nwhile(getline(ss, item, delim) != NULL)  \n{  \nelems.push_back(item);  \n}  \nreturn elems;  \n}  \nint main(void)  \n{  \nstring a, b;  \ncout &lt;&lt; &quot;Please Enter the Absolute Path of the File!&quot; &lt;&lt; endl;  \ncout &lt;&lt; &quot;a = &quot;;  \ncin &gt;&gt; a;  \ncout &lt;&lt; &quot;b = &quot;;  \ncin &gt;&gt; b;  \nauto diffpath = [](const string &amp;a, const string &amp;b) {  \nint k = 0;  \nfor (int i=0; i&lt; a.length() &amp;&amp; i&lt;b.length() &amp;&amp; a[i] == b[i]; ++i)  \nif (a[i] == &apos;/&apos;) k=i;  \nreturn k+1;  \n};  \nint index = diffpath(a, b);  \na = a.substr(index);  \nb = b.substr(index);  \nauto vecta = split(a, &apos;/&apos;);  \nauto vectb = split(b, &apos;/&apos;);  \nstring a_path_b = &quot;&quot;; //a relative to b path  \nstring b_path_a = &quot;&quot;; //b relative to a path  \nfor (int i=1; i&lt;vecta.size(); ++i)  \na_path_b += &quot;../&quot;;  \na_path_b += a;  \nfor(int i=1; i&lt;vectb.size(); ++i)  \nb_path_a += &quot;../&quot;;  \nb_path_a += b;  \ncout &lt;&lt; &quot;a relative to b path: &quot; &lt;&lt; a_path_b &lt;&lt; endl;  \ncout &lt;&lt; &quot;b relative to a path: &quot; &lt;&lt; b_path_a &lt;&lt; endl;  \nreturn 0;  \n}  \n</code></pre><p>(完)</p>\n<p>PS:</p>\n<p>一个实用的参数：$_</p>\n<p>比如</p>\n<pre><code>$ vi 2014-11-13-计算两个文件的相对路径.md\n# 编辑完成之后，突然想使用gedit看看\n$ gedit $_\n# 这里的 $_ 就是上一个命令的最后一个参数\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>平台：Ubuntu 14.10</p>\n<p>编译器：gcc 4.9.1</p>\n<p>语言：c++14</p>\n<p>相关特性：lambda，auto</p>\n<p>Github：<a href=\"https://github.com/ligelaige/some_cpp_code/blob/master/cpp_lambda/relative_path.cpp\" target=\"_blank\" rel=\"noopener\">https://github.com/ligelaige/some_cpp_code/blob/master/cpp_lambda/relative_path.cpp</a></p>\n<pre><code>/************************************************************************* \n&gt; File Name: relative_path.cpp \n&gt; Author: huangjinqiang \n&gt; Email: ligelaige@gmail.com \n&gt; Created Time: Thu 13 Nov 2014 01:59:18 AM CST \n&gt; Compile: g++ relative_path.cpp -std=c++14 \n************************************************************************/  \n#include &lt;iostream&gt;  \n#include &lt;string&gt;  \n#include &lt;vector&gt;  \n#include &lt;sstream&gt;  \nusing namespace std;  \nauto split(const string &amp;s, const char delim = &apos; &apos;)  \n{  \nstringstream ss(s);  \nstring item;  \nvector&lt;string&gt; elems;  \nwhile(getline(ss, item, delim) != NULL)  \n{  \nelems.push_back(item);  \n}  \nreturn elems;  \n}  \nint main(void)  \n{  \nstring a, b;  \ncout &lt;&lt; &quot;Please Enter the Absolute Path of the File!&quot; &lt;&lt; endl;  \ncout &lt;&lt; &quot;a = &quot;;  \ncin &gt;&gt; a;  \ncout &lt;&lt; &quot;b = &quot;;  \ncin &gt;&gt; b;  \nauto diffpath = [](const string &amp;a, const string &amp;b) {  \nint k = 0;  \nfor (int i=0; i&lt; a.length() &amp;&amp; i&lt;b.length() &amp;&amp; a[i] == b[i]; ++i)  \nif (a[i] == &apos;/&apos;) k=i;  \nreturn k+1;  \n};  \nint index = diffpath(a, b);  \na = a.substr(index);  \nb = b.substr(index);  \nauto vecta = split(a, &apos;/&apos;);  \nauto vectb = split(b, &apos;/&apos;);  \nstring a_path_b = &quot;&quot;; //a relative to b path  \nstring b_path_a = &quot;&quot;; //b relative to a path  \nfor (int i=1; i&lt;vecta.size(); ++i)  \na_path_b += &quot;../&quot;;  \na_path_b += a;  \nfor(int i=1; i&lt;vectb.size(); ++i)  \nb_path_a += &quot;../&quot;;  \nb_path_a += b;  \ncout &lt;&lt; &quot;a relative to b path: &quot; &lt;&lt; a_path_b &lt;&lt; endl;  \ncout &lt;&lt; &quot;b relative to a path: &quot; &lt;&lt; b_path_a &lt;&lt; endl;  \nreturn 0;  \n}  \n</code></pre><p>(完)</p>\n<p>PS:</p>\n<p>一个实用的参数：$_</p>\n<p>比如</p>\n<pre><code>$ vi 2014-11-13-计算两个文件的相对路径.md\n# 编辑完成之后，突然想使用gedit看看\n$ gedit $_\n# 这里的 $_ 就是上一个命令的最后一个参数\n</code></pre>"},{"layout":"post","title":"文本处理-小笔记","date":"2014-11-17T03:20:59.000Z","_content":"\n工作中遇到的，蛮简单，将下列ip\n\n\t10.158.139.11,10.158.139.13,10.158.139.16,10.158.139.19,10.158.139.20,10.158.139.22,10.158.139.24,10.158.139.27,10.158.139.28,10.158.139.29,10.158.139.36,10.158.139.37,10.158.139.39,10.158.139.42,10.158.139.43,10.158.139.44,10.158.139.45,10.158.139.46,10.158.139.47,10.158.139.48,10.158.139.50,10.158.139.51,10.158.139.58,10.158.139.59,10.158.150.13\n\n处理成这样\n\n\t10.158.139.11\n\t10.158.139.13\n\t10.158.139.16\n\t10.158.139.19\n\t10.158.139.20\n\t10.158.139.22\n\t10.158.139.24\n\t10.158.139.27\n\t10.158.139.28\n\t10.158.139.29\n\t10.158.139.36\n\t10.158.139.37\n\t10.158.139.39\n\t10.158.139.42\n\t10.158.139.43\n\t10.158.139.44\n\t10.158.139.45\n\t10.158.139.46\n\t10.158.139.47\n\t10.158.139.48\n\t10.158.139.50\n\t10.158.139.51\n\t10.158.139.58\n\t10.158.139.59\n\t10.158.150.13\t\n\t\n操作很简单\n\t\n\tsed 's/,/\\n/g' ip.txt > ip_result\n\t\n相关代码:\n\n[ip.sh](http://huangjinqiang.github.io/resources/ip_handle/ip.sh)\n\n[ip.txt](http://huangjinqiang.github.io/resources/ip_handle/ip.txt)\n\n[ip_result](http://huangjinqiang.github.io/resources/ip_handle/ip_result)\n\n\n","source":"_posts/2014-11-17-文本处理-小笔记.md","raw":"---\nlayout: post\ntitle: 文本处理-小笔记\ndate: 2014-11-17 11:20:59\ntags: shell\ncategories: 未分类\n---\n\n工作中遇到的，蛮简单，将下列ip\n\n\t10.158.139.11,10.158.139.13,10.158.139.16,10.158.139.19,10.158.139.20,10.158.139.22,10.158.139.24,10.158.139.27,10.158.139.28,10.158.139.29,10.158.139.36,10.158.139.37,10.158.139.39,10.158.139.42,10.158.139.43,10.158.139.44,10.158.139.45,10.158.139.46,10.158.139.47,10.158.139.48,10.158.139.50,10.158.139.51,10.158.139.58,10.158.139.59,10.158.150.13\n\n处理成这样\n\n\t10.158.139.11\n\t10.158.139.13\n\t10.158.139.16\n\t10.158.139.19\n\t10.158.139.20\n\t10.158.139.22\n\t10.158.139.24\n\t10.158.139.27\n\t10.158.139.28\n\t10.158.139.29\n\t10.158.139.36\n\t10.158.139.37\n\t10.158.139.39\n\t10.158.139.42\n\t10.158.139.43\n\t10.158.139.44\n\t10.158.139.45\n\t10.158.139.46\n\t10.158.139.47\n\t10.158.139.48\n\t10.158.139.50\n\t10.158.139.51\n\t10.158.139.58\n\t10.158.139.59\n\t10.158.150.13\t\n\t\n操作很简单\n\t\n\tsed 's/,/\\n/g' ip.txt > ip_result\n\t\n相关代码:\n\n[ip.sh](http://huangjinqiang.github.io/resources/ip_handle/ip.sh)\n\n[ip.txt](http://huangjinqiang.github.io/resources/ip_handle/ip.txt)\n\n[ip_result](http://huangjinqiang.github.io/resources/ip_handle/ip_result)\n\n\n","slug":"2014-11-17-文本处理-小笔记","published":1,"updated":"2018-05-13T09:19:21.050Z","comments":1,"photos":[],"link":"","_id":"cjh4njkc3000a1sufh4g4q5jb","content":"<p>工作中遇到的，蛮简单，将下列ip</p>\n<pre><code>10.158.139.11,10.158.139.13,10.158.139.16,10.158.139.19,10.158.139.20,10.158.139.22,10.158.139.24,10.158.139.27,10.158.139.28,10.158.139.29,10.158.139.36,10.158.139.37,10.158.139.39,10.158.139.42,10.158.139.43,10.158.139.44,10.158.139.45,10.158.139.46,10.158.139.47,10.158.139.48,10.158.139.50,10.158.139.51,10.158.139.58,10.158.139.59,10.158.150.13\n</code></pre><p>处理成这样</p>\n<pre><code>10.158.139.11\n10.158.139.13\n10.158.139.16\n10.158.139.19\n10.158.139.20\n10.158.139.22\n10.158.139.24\n10.158.139.27\n10.158.139.28\n10.158.139.29\n10.158.139.36\n10.158.139.37\n10.158.139.39\n10.158.139.42\n10.158.139.43\n10.158.139.44\n10.158.139.45\n10.158.139.46\n10.158.139.47\n10.158.139.48\n10.158.139.50\n10.158.139.51\n10.158.139.58\n10.158.139.59\n10.158.150.13    \n</code></pre><p>操作很简单</p>\n<pre><code>sed &apos;s/,/\\n/g&apos; ip.txt &gt; ip_result\n</code></pre><p>相关代码:</p>\n<p><a href=\"http://huangjinqiang.github.io/resources/ip_handle/ip.sh\" target=\"_blank\" rel=\"noopener\">ip.sh</a></p>\n<p><a href=\"http://huangjinqiang.github.io/resources/ip_handle/ip.txt\" target=\"_blank\" rel=\"noopener\">ip.txt</a></p>\n<p><a href=\"http://huangjinqiang.github.io/resources/ip_handle/ip_result\" target=\"_blank\" rel=\"noopener\">ip_result</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>工作中遇到的，蛮简单，将下列ip</p>\n<pre><code>10.158.139.11,10.158.139.13,10.158.139.16,10.158.139.19,10.158.139.20,10.158.139.22,10.158.139.24,10.158.139.27,10.158.139.28,10.158.139.29,10.158.139.36,10.158.139.37,10.158.139.39,10.158.139.42,10.158.139.43,10.158.139.44,10.158.139.45,10.158.139.46,10.158.139.47,10.158.139.48,10.158.139.50,10.158.139.51,10.158.139.58,10.158.139.59,10.158.150.13\n</code></pre><p>处理成这样</p>\n<pre><code>10.158.139.11\n10.158.139.13\n10.158.139.16\n10.158.139.19\n10.158.139.20\n10.158.139.22\n10.158.139.24\n10.158.139.27\n10.158.139.28\n10.158.139.29\n10.158.139.36\n10.158.139.37\n10.158.139.39\n10.158.139.42\n10.158.139.43\n10.158.139.44\n10.158.139.45\n10.158.139.46\n10.158.139.47\n10.158.139.48\n10.158.139.50\n10.158.139.51\n10.158.139.58\n10.158.139.59\n10.158.150.13    \n</code></pre><p>操作很简单</p>\n<pre><code>sed &apos;s/,/\\n/g&apos; ip.txt &gt; ip_result\n</code></pre><p>相关代码:</p>\n<p><a href=\"http://huangjinqiang.github.io/resources/ip_handle/ip.sh\" target=\"_blank\" rel=\"noopener\">ip.sh</a></p>\n<p><a href=\"http://huangjinqiang.github.io/resources/ip_handle/ip.txt\" target=\"_blank\" rel=\"noopener\">ip.txt</a></p>\n<p><a href=\"http://huangjinqiang.github.io/resources/ip_handle/ip_result\" target=\"_blank\" rel=\"noopener\">ip_result</a></p>\n"},{"layout":"post","title":"Python 发送邮件","date":"2015-01-14T06:23:41.000Z","_content":"\n\t#!/bin/python\n\t#    -*-coding: utf-8-*-     \n\t#    File Name: send_mail.py\n\t#       Author: huangjinqiang\n\t#        Email: ligelaige@gmail.com\n\t# Created Time: Wed 07 Jan 2015 02:36:04 PM CST\n\n\timport smtplib  \n\tfrom email.mime.text import MIMEText  \n\n\tmailto_list \t= ['Inboxs@inboxmail'] \t\t#收件箱\n\tuser \t\t\t= \"OutboxName\"  \t\t\t#邮件署名 可省略为\"\"\n\tmail_user \t\t= \"Outbox\"    \t\t\t\t#发件箱的用户名\n\tmail_postfix \t= \"outboxmail\"  \t\t\t#发件箱的后缀\n\tmail_pass \t\t= \"OutboxLoginPassword\"   \t#发件箱的登陆密码 \n\tmail_host \t\t= \"smtp.outboxmail\"  \t\t#发件箱的服务器\n\t  \n\tdef send_mail(to_list,sub,content):  \n\t    me = user+\"<\"+mail_user+\"@\"+mail_postfix+\">\"   \t\t\t\t#\tOutboxName<Outbox@outboxmail>\n\t    msg = MIMEText(content,_subtype='plain',_charset='utf8')  \n\t    msg['Subject'] = sub  \n\t    msg['From'] = me  \n\t    msg['To'] = \";\".join(to_list)  \n\t    try:  \n\t        server = smtplib.SMTP()  \n\t        server.connect(mail_host)  \n\t        server.login(mail_user,mail_pass)  \n\t        server.sendmail(me, to_list, msg.as_string())  \n\t        server.close()  \n\t        return True  \n\t    except Exception, e:  \n\t        print str(e)  \n\t        return False  \n\n\tif __name__ == '__main__':  \n\t    if send_mail(mailto_list,\"hello\",\"hello world！\"):  \n\t        print \"发送成功\"  \n\t    else:  \n\t        print \"发送失败\"\n","source":"_posts/2015-1-14-python-发送邮件.md","raw":"---\nlayout: post\ntitle: Python 发送邮件\ndate: 2015-1-14 14:23:41\ntags: Python\ncategories: 未分类\n---\n\n\t#!/bin/python\n\t#    -*-coding: utf-8-*-     \n\t#    File Name: send_mail.py\n\t#       Author: huangjinqiang\n\t#        Email: ligelaige@gmail.com\n\t# Created Time: Wed 07 Jan 2015 02:36:04 PM CST\n\n\timport smtplib  \n\tfrom email.mime.text import MIMEText  \n\n\tmailto_list \t= ['Inboxs@inboxmail'] \t\t#收件箱\n\tuser \t\t\t= \"OutboxName\"  \t\t\t#邮件署名 可省略为\"\"\n\tmail_user \t\t= \"Outbox\"    \t\t\t\t#发件箱的用户名\n\tmail_postfix \t= \"outboxmail\"  \t\t\t#发件箱的后缀\n\tmail_pass \t\t= \"OutboxLoginPassword\"   \t#发件箱的登陆密码 \n\tmail_host \t\t= \"smtp.outboxmail\"  \t\t#发件箱的服务器\n\t  \n\tdef send_mail(to_list,sub,content):  \n\t    me = user+\"<\"+mail_user+\"@\"+mail_postfix+\">\"   \t\t\t\t#\tOutboxName<Outbox@outboxmail>\n\t    msg = MIMEText(content,_subtype='plain',_charset='utf8')  \n\t    msg['Subject'] = sub  \n\t    msg['From'] = me  \n\t    msg['To'] = \";\".join(to_list)  \n\t    try:  \n\t        server = smtplib.SMTP()  \n\t        server.connect(mail_host)  \n\t        server.login(mail_user,mail_pass)  \n\t        server.sendmail(me, to_list, msg.as_string())  \n\t        server.close()  \n\t        return True  \n\t    except Exception, e:  \n\t        print str(e)  \n\t        return False  \n\n\tif __name__ == '__main__':  \n\t    if send_mail(mailto_list,\"hello\",\"hello world！\"):  \n\t        print \"发送成功\"  \n\t    else:  \n\t        print \"发送失败\"\n","slug":"2015-1-14-python-发送邮件","published":1,"updated":"2018-05-13T09:17:04.988Z","comments":1,"photos":[],"link":"","_id":"cjh4njkc3000b1sufomij2h4s","content":"<pre><code>#!/bin/python\n#    -*-coding: utf-8-*-     \n#    File Name: send_mail.py\n#       Author: huangjinqiang\n#        Email: ligelaige@gmail.com\n# Created Time: Wed 07 Jan 2015 02:36:04 PM CST\n\nimport smtplib  \nfrom email.mime.text import MIMEText  \n\nmailto_list     = [&apos;Inboxs@inboxmail&apos;]         #收件箱\nuser             = &quot;OutboxName&quot;              #邮件署名 可省略为&quot;&quot;\nmail_user         = &quot;Outbox&quot;                    #发件箱的用户名\nmail_postfix     = &quot;outboxmail&quot;              #发件箱的后缀\nmail_pass         = &quot;OutboxLoginPassword&quot;       #发件箱的登陆密码 \nmail_host         = &quot;smtp.outboxmail&quot;          #发件箱的服务器\n\ndef send_mail(to_list,sub,content):  \n    me = user+&quot;&lt;&quot;+mail_user+&quot;@&quot;+mail_postfix+&quot;&gt;&quot;                   #    OutboxName&lt;Outbox@outboxmail&gt;\n    msg = MIMEText(content,_subtype=&apos;plain&apos;,_charset=&apos;utf8&apos;)  \n    msg[&apos;Subject&apos;] = sub  \n    msg[&apos;From&apos;] = me  \n    msg[&apos;To&apos;] = &quot;;&quot;.join(to_list)  \n    try:  \n        server = smtplib.SMTP()  \n        server.connect(mail_host)  \n        server.login(mail_user,mail_pass)  \n        server.sendmail(me, to_list, msg.as_string())  \n        server.close()  \n        return True  \n    except Exception, e:  \n        print str(e)  \n        return False  \n\nif __name__ == &apos;__main__&apos;:  \n    if send_mail(mailto_list,&quot;hello&quot;,&quot;hello world！&quot;):  \n        print &quot;发送成功&quot;  \n    else:  \n        print &quot;发送失败&quot;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>#!/bin/python\n#    -*-coding: utf-8-*-     \n#    File Name: send_mail.py\n#       Author: huangjinqiang\n#        Email: ligelaige@gmail.com\n# Created Time: Wed 07 Jan 2015 02:36:04 PM CST\n\nimport smtplib  \nfrom email.mime.text import MIMEText  \n\nmailto_list     = [&apos;Inboxs@inboxmail&apos;]         #收件箱\nuser             = &quot;OutboxName&quot;              #邮件署名 可省略为&quot;&quot;\nmail_user         = &quot;Outbox&quot;                    #发件箱的用户名\nmail_postfix     = &quot;outboxmail&quot;              #发件箱的后缀\nmail_pass         = &quot;OutboxLoginPassword&quot;       #发件箱的登陆密码 \nmail_host         = &quot;smtp.outboxmail&quot;          #发件箱的服务器\n\ndef send_mail(to_list,sub,content):  \n    me = user+&quot;&lt;&quot;+mail_user+&quot;@&quot;+mail_postfix+&quot;&gt;&quot;                   #    OutboxName&lt;Outbox@outboxmail&gt;\n    msg = MIMEText(content,_subtype=&apos;plain&apos;,_charset=&apos;utf8&apos;)  \n    msg[&apos;Subject&apos;] = sub  \n    msg[&apos;From&apos;] = me  \n    msg[&apos;To&apos;] = &quot;;&quot;.join(to_list)  \n    try:  \n        server = smtplib.SMTP()  \n        server.connect(mail_host)  \n        server.login(mail_user,mail_pass)  \n        server.sendmail(me, to_list, msg.as_string())  \n        server.close()  \n        return True  \n    except Exception, e:  \n        print str(e)  \n        return False  \n\nif __name__ == &apos;__main__&apos;:  \n    if send_mail(mailto_list,&quot;hello&quot;,&quot;hello world！&quot;):  \n        print &quot;发送成功&quot;  \n    else:  \n        print &quot;发送失败&quot;\n</code></pre>"},{"layout":"post","title":"Python SSH 传输文件","date":"2015-01-13T23:23:41.000Z","_content":"\n\t#!/usr/bin/env python\n\t#    -*-coding: utf-8-*-     \n\t#    File Name: ssh_test.py\n\t#       Author: huangjinqiang\n\t#        Email: ligelaige@gmail.com\n\t# Created Time: Tue 13 Jan 2015 07:18:41 PM CST\n\n\timport pexpect  \n\n\timport subprocess\n\n\tclass rsync_tool:\n\t    def __init__(self):\n\t        self.user = 'johnny'\n\t        self.host = '172.16.123.128'\n\t        self.remote_file = '/tmp/joke'\n\t        self.local_file = '/tmp/me'\n\t        self.passwd_file = '/tmp/johnny.pwd'\n\n\t        self.fhandler = open(self.passwd_file, 'r')\n\t        self.passwd = self.fhandler.read()\n\t        self.fhandler.close()\n\n\t    def download(self, remote_file, local_file):\n\t        getfile = 'rsync %s@%s:%s %s' % (self.user, self.host, remote_file, local_file)\n\t        \n\t        child = pexpect.spawn(getfile)\n\t        child.expect(\"password: \")\n\t        child.sendline(self.passwd)\n\t        child.read()\n\n\t    def upload(self, local_file, remote_file):\n\t        sendfile = 'rsync %s %s@%s:%s' % (local_file, self.user, self.host, remote_file)\n\n\t        child = pexpect.spawn(sendfile)\n\t        child.expect(\"password: \")\n\t        child.sendline(self.passwd)\n\t        child.read()\n\n\t    def test(self):\n\t        subprocess.call(\"rsync  --password-file='/tmp/johnny.pwd' johnny@172.16.123.128:/tmp/joke /tmp/joke\")\n\n\t    def main(self):\n\t        self.upload(\"/tmp/hello.txt\", \"/tmp/world.txt\")\n\t        self.download(\"/tmp/world.txt\", \"/tmp/hello\")\n\n\tif __name__ == \"__main__\":\n\t    r = rsync_tool()\n\t    r.main()\n\n\n\n\n","source":"_posts/2015-1-14-python-ssh传输文件.md","raw":"---\nlayout: post\ntitle: Python SSH 传输文件\ndate: 2015-1-14 07:23:41\ntags: Python\ncategories: 未分类\n---\n\n\t#!/usr/bin/env python\n\t#    -*-coding: utf-8-*-     \n\t#    File Name: ssh_test.py\n\t#       Author: huangjinqiang\n\t#        Email: ligelaige@gmail.com\n\t# Created Time: Tue 13 Jan 2015 07:18:41 PM CST\n\n\timport pexpect  \n\n\timport subprocess\n\n\tclass rsync_tool:\n\t    def __init__(self):\n\t        self.user = 'johnny'\n\t        self.host = '172.16.123.128'\n\t        self.remote_file = '/tmp/joke'\n\t        self.local_file = '/tmp/me'\n\t        self.passwd_file = '/tmp/johnny.pwd'\n\n\t        self.fhandler = open(self.passwd_file, 'r')\n\t        self.passwd = self.fhandler.read()\n\t        self.fhandler.close()\n\n\t    def download(self, remote_file, local_file):\n\t        getfile = 'rsync %s@%s:%s %s' % (self.user, self.host, remote_file, local_file)\n\t        \n\t        child = pexpect.spawn(getfile)\n\t        child.expect(\"password: \")\n\t        child.sendline(self.passwd)\n\t        child.read()\n\n\t    def upload(self, local_file, remote_file):\n\t        sendfile = 'rsync %s %s@%s:%s' % (local_file, self.user, self.host, remote_file)\n\n\t        child = pexpect.spawn(sendfile)\n\t        child.expect(\"password: \")\n\t        child.sendline(self.passwd)\n\t        child.read()\n\n\t    def test(self):\n\t        subprocess.call(\"rsync  --password-file='/tmp/johnny.pwd' johnny@172.16.123.128:/tmp/joke /tmp/joke\")\n\n\t    def main(self):\n\t        self.upload(\"/tmp/hello.txt\", \"/tmp/world.txt\")\n\t        self.download(\"/tmp/world.txt\", \"/tmp/hello\")\n\n\tif __name__ == \"__main__\":\n\t    r = rsync_tool()\n\t    r.main()\n\n\n\n\n","slug":"2015-1-14-python-ssh传输文件","published":1,"updated":"2018-05-13T09:19:57.574Z","comments":1,"photos":[],"link":"","_id":"cjh4njkcj000f1sufc8im17ej","content":"<pre><code>#!/usr/bin/env python\n#    -*-coding: utf-8-*-     \n#    File Name: ssh_test.py\n#       Author: huangjinqiang\n#        Email: ligelaige@gmail.com\n# Created Time: Tue 13 Jan 2015 07:18:41 PM CST\n\nimport pexpect  \n\nimport subprocess\n\nclass rsync_tool:\n    def __init__(self):\n        self.user = &apos;johnny&apos;\n        self.host = &apos;172.16.123.128&apos;\n        self.remote_file = &apos;/tmp/joke&apos;\n        self.local_file = &apos;/tmp/me&apos;\n        self.passwd_file = &apos;/tmp/johnny.pwd&apos;\n\n        self.fhandler = open(self.passwd_file, &apos;r&apos;)\n        self.passwd = self.fhandler.read()\n        self.fhandler.close()\n\n    def download(self, remote_file, local_file):\n        getfile = &apos;rsync %s@%s:%s %s&apos; % (self.user, self.host, remote_file, local_file)\n\n        child = pexpect.spawn(getfile)\n        child.expect(&quot;password: &quot;)\n        child.sendline(self.passwd)\n        child.read()\n\n    def upload(self, local_file, remote_file):\n        sendfile = &apos;rsync %s %s@%s:%s&apos; % (local_file, self.user, self.host, remote_file)\n\n        child = pexpect.spawn(sendfile)\n        child.expect(&quot;password: &quot;)\n        child.sendline(self.passwd)\n        child.read()\n\n    def test(self):\n        subprocess.call(&quot;rsync  --password-file=&apos;/tmp/johnny.pwd&apos; johnny@172.16.123.128:/tmp/joke /tmp/joke&quot;)\n\n    def main(self):\n        self.upload(&quot;/tmp/hello.txt&quot;, &quot;/tmp/world.txt&quot;)\n        self.download(&quot;/tmp/world.txt&quot;, &quot;/tmp/hello&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    r = rsync_tool()\n    r.main()\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>#!/usr/bin/env python\n#    -*-coding: utf-8-*-     \n#    File Name: ssh_test.py\n#       Author: huangjinqiang\n#        Email: ligelaige@gmail.com\n# Created Time: Tue 13 Jan 2015 07:18:41 PM CST\n\nimport pexpect  \n\nimport subprocess\n\nclass rsync_tool:\n    def __init__(self):\n        self.user = &apos;johnny&apos;\n        self.host = &apos;172.16.123.128&apos;\n        self.remote_file = &apos;/tmp/joke&apos;\n        self.local_file = &apos;/tmp/me&apos;\n        self.passwd_file = &apos;/tmp/johnny.pwd&apos;\n\n        self.fhandler = open(self.passwd_file, &apos;r&apos;)\n        self.passwd = self.fhandler.read()\n        self.fhandler.close()\n\n    def download(self, remote_file, local_file):\n        getfile = &apos;rsync %s@%s:%s %s&apos; % (self.user, self.host, remote_file, local_file)\n\n        child = pexpect.spawn(getfile)\n        child.expect(&quot;password: &quot;)\n        child.sendline(self.passwd)\n        child.read()\n\n    def upload(self, local_file, remote_file):\n        sendfile = &apos;rsync %s %s@%s:%s&apos; % (local_file, self.user, self.host, remote_file)\n\n        child = pexpect.spawn(sendfile)\n        child.expect(&quot;password: &quot;)\n        child.sendline(self.passwd)\n        child.read()\n\n    def test(self):\n        subprocess.call(&quot;rsync  --password-file=&apos;/tmp/johnny.pwd&apos; johnny@172.16.123.128:/tmp/joke /tmp/joke&quot;)\n\n    def main(self):\n        self.upload(&quot;/tmp/hello.txt&quot;, &quot;/tmp/world.txt&quot;)\n        self.download(&quot;/tmp/world.txt&quot;, &quot;/tmp/hello&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    r = rsync_tool()\n    r.main()\n</code></pre>"},{"layout":"post","title":"Ubuntu下搭建FTP服务器","date":"2014-02-21T08:24:44.000Z","_content":"<div>由于连接开发板，传输文件的需要，我在ubuntu上安装了ftp服务器</div>\n<div>FTP软件选择vsftpd（very secure FTP daemon）\n<pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo apt-get install vsftpd</pre>\n<code></code></div>\n<div>命令执行过程中，安装程序会给本地创建一个名为“ftp”的用户组，命令执行完之后会自动启动FTP服务。</div>\n<div></div>\n<div>在浏览器里输入\"ftp://localhost\" 检查FTP端口有没有打开</div>\n<div></div>\n<div>创建一个专门用来访问的用户：ligelaige</div>\n<pre class=\"brush: bash; gutter: true\">mkdir -p /home/test\nuseradd test -g ftp -d /home/test -s /sbin/nologin</pre>\n设置密码:\n<pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# mkdir /home/ligelaige\nroot@ubuntu:/home/uwin# useradd ligelaige -g ftp -d /home/ligelaige/ -s /sbin/nologin\nroot@ubuntu:/home/uwin# passwd ligelaige\n输入新的 UNIX 密码： \n重新输入新的 UNIX 密码： \npasswd：已成功更新密码\nroot@ubuntu:/home/uwin#</pre>\n<div> 修改vsftpd的配置文件</div>\n<div>\n<pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# gedit /etc/vsftpd.conf</pre>\n</div>\n<div>\n\n需要修改到字段有\n<pre class=\"brush: bash; gutter: true\">#禁止匿名访问\nanonymous_enable=NO\n#接受本地用户\nlocal_enable=YES\n#可以上传\nwrite_enable=YES\n#启用在chroot_list_file的用户只能访问根目录\nchroot_list_enable=YES\nchroot_list_file=/etc/vsftpd.chroot_list</pre>\n建议修改的方法是\n\n</div>\n<div>alt + F 搜索 anonymous_enable=NO（举例）进行修改</div>\n<div></div>\n<div>\n\n在/etc/vsftpd.chroot_list添加受访问目录限制的用户：\n<pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# echo &quot;ligelaige&quot; &gt;&gt; /etc/vsftpd.chroot_list\nroot@ubuntu:/home/uwin# chmod a-w /home/ligelaige/</pre>\n重启vsftpd之后就可以使用ligelaige账号访问了\n<pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo service vsftpd restart</pre>\n</div>","source":"_posts/2014-2-21-Ubuntu下搭建FTP服务器.md","raw":"---\nlayout: post\ntitle: Ubuntu下搭建FTP服务器\ndate: 2014-02-21 16:24:44\ntags: FTP\ncategories: 未分类\n---\n<div>由于连接开发板，传输文件的需要，我在ubuntu上安装了ftp服务器</div>\n<div>FTP软件选择vsftpd（very secure FTP daemon）\n<pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo apt-get install vsftpd</pre>\n<code></code></div>\n<div>命令执行过程中，安装程序会给本地创建一个名为“ftp”的用户组，命令执行完之后会自动启动FTP服务。</div>\n<div></div>\n<div>在浏览器里输入\"ftp://localhost\" 检查FTP端口有没有打开</div>\n<div></div>\n<div>创建一个专门用来访问的用户：ligelaige</div>\n<pre class=\"brush: bash; gutter: true\">mkdir -p /home/test\nuseradd test -g ftp -d /home/test -s /sbin/nologin</pre>\n设置密码:\n<pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# mkdir /home/ligelaige\nroot@ubuntu:/home/uwin# useradd ligelaige -g ftp -d /home/ligelaige/ -s /sbin/nologin\nroot@ubuntu:/home/uwin# passwd ligelaige\n输入新的 UNIX 密码： \n重新输入新的 UNIX 密码： \npasswd：已成功更新密码\nroot@ubuntu:/home/uwin#</pre>\n<div> 修改vsftpd的配置文件</div>\n<div>\n<pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# gedit /etc/vsftpd.conf</pre>\n</div>\n<div>\n\n需要修改到字段有\n<pre class=\"brush: bash; gutter: true\">#禁止匿名访问\nanonymous_enable=NO\n#接受本地用户\nlocal_enable=YES\n#可以上传\nwrite_enable=YES\n#启用在chroot_list_file的用户只能访问根目录\nchroot_list_enable=YES\nchroot_list_file=/etc/vsftpd.chroot_list</pre>\n建议修改的方法是\n\n</div>\n<div>alt + F 搜索 anonymous_enable=NO（举例）进行修改</div>\n<div></div>\n<div>\n\n在/etc/vsftpd.chroot_list添加受访问目录限制的用户：\n<pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# echo &quot;ligelaige&quot; &gt;&gt; /etc/vsftpd.chroot_list\nroot@ubuntu:/home/uwin# chmod a-w /home/ligelaige/</pre>\n重启vsftpd之后就可以使用ligelaige账号访问了\n<pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo service vsftpd restart</pre>\n</div>","slug":"2014-2-21-Ubuntu下搭建FTP服务器","published":1,"updated":"2018-05-13T09:15:02.474Z","comments":1,"photos":[],"link":"","_id":"cjh4njkcj000i1sufv8xq0n6j","content":"<div>由于连接开发板，传输文件的需要，我在ubuntu上安装了ftp服务器</div><br><div>FTP软件选择vsftpd（very secure FTP daemon）<br><pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo apt-get install vsftpd</pre><br><code></code></div><br><div>命令执行过程中，安装程序会给本地创建一个名为“ftp”的用户组，命令执行完之后会自动启动FTP服务。</div><br><div></div><br><div>在浏览器里输入”<a href=\"ftp://localhost&quot;\" target=\"_blank\" rel=\"noopener\">ftp://localhost&quot;</a> 检查FTP端口有没有打开</div><br><div></div><br><div>创建一个专门用来访问的用户：ligelaige</div><br><pre class=\"brush: bash; gutter: true\">mkdir -p /home/test<br>useradd test -g ftp -d /home/test -s /sbin/nologin</pre><br>设置密码:<br><pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# mkdir /home/ligelaige<br>root@ubuntu:/home/uwin# useradd ligelaige -g ftp -d /home/ligelaige/ -s /sbin/nologin<br>root@ubuntu:/home/uwin# passwd ligelaige<br>输入新的 UNIX 密码：<br>重新输入新的 UNIX 密码：<br>passwd：已成功更新密码<br>root@ubuntu:/home/uwin#</pre><br><div> 修改vsftpd的配置文件</div><br><div><br><pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# gedit /etc/vsftpd.conf</pre><br></div><br><div><br><br>需要修改到字段有<br><pre class=\"brush: bash; gutter: true\">#禁止匿名访问<br>anonymous_enable=NO<br>#接受本地用户<br>local_enable=YES<br>#可以上传<br>write_enable=YES<br>#启用在chroot_list_file的用户只能访问根目录<br>chroot_list_enable=YES<br>chroot_list_file=/etc/vsftpd.chroot_list</pre><br>建议修改的方法是<br><br></div><br><div>alt + F 搜索 anonymous_enable=NO（举例）进行修改</div><br><div></div><br><div><br><br>在/etc/vsftpd.chroot_list添加受访问目录限制的用户：<br><pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# echo &quot;ligelaige&quot; &gt;&gt; /etc/vsftpd.chroot_list<br>root@ubuntu:/home/uwin# chmod a-w /home/ligelaige/</pre><br>重启vsftpd之后就可以使用ligelaige账号访问了<br><pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo service vsftpd restart</pre><br></div>","site":{"data":{}},"excerpt":"","more":"<div>由于连接开发板，传输文件的需要，我在ubuntu上安装了ftp服务器</div><br><div>FTP软件选择vsftpd（very secure FTP daemon）<br><pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo apt-get install vsftpd</pre><br><code></code></div><br><div>命令执行过程中，安装程序会给本地创建一个名为“ftp”的用户组，命令执行完之后会自动启动FTP服务。</div><br><div></div><br><div>在浏览器里输入”<a href=\"ftp://localhost&quot;\" target=\"_blank\" rel=\"noopener\">ftp://localhost&quot;</a> 检查FTP端口有没有打开</div><br><div></div><br><div>创建一个专门用来访问的用户：ligelaige</div><br><pre class=\"brush: bash; gutter: true\">mkdir -p /home/test<br>useradd test -g ftp -d /home/test -s /sbin/nologin</pre><br>设置密码:<br><pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# mkdir /home/ligelaige<br>root@ubuntu:/home/uwin# useradd ligelaige -g ftp -d /home/ligelaige/ -s /sbin/nologin<br>root@ubuntu:/home/uwin# passwd ligelaige<br>输入新的 UNIX 密码：<br>重新输入新的 UNIX 密码：<br>passwd：已成功更新密码<br>root@ubuntu:/home/uwin#</pre><br><div> 修改vsftpd的配置文件</div><br><div><br><pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# gedit /etc/vsftpd.conf</pre><br></div><br><div><br><br>需要修改到字段有<br><pre class=\"brush: bash; gutter: true\">#禁止匿名访问<br>anonymous_enable=NO<br>#接受本地用户<br>local_enable=YES<br>#可以上传<br>write_enable=YES<br>#启用在chroot_list_file的用户只能访问根目录<br>chroot_list_enable=YES<br>chroot_list_file=/etc/vsftpd.chroot_list</pre><br>建议修改的方法是<br><br></div><br><div>alt + F 搜索 anonymous_enable=NO（举例）进行修改</div><br><div></div><br><div><br><br>在/etc/vsftpd.chroot_list添加受访问目录限制的用户：<br><pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# echo &quot;ligelaige&quot; &gt;&gt; /etc/vsftpd.chroot_list<br>root@ubuntu:/home/uwin# chmod a-w /home/ligelaige/</pre><br>重启vsftpd之后就可以使用ligelaige账号访问了<br><pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo service vsftpd restart</pre><br></div>"},{"layout":"post","title":"计算A文件相对B文件的路径","date":"2015-01-22T07:53:41.000Z","_content":"\n以前写的代码，今天发一下\n\n\n\t/*************************************************************************\n\t\t>    File Name: relative_path.cpp\n\t\t>       Author: huangjinqiang\n\t\t>        Email: ligelaige@gmail.com\n\t\t> Created Time: Thu 13 Nov 2014 01:59:18 AM CST\n\t\t>      Compile: g++ relative_path.cpp -std=c++14\n\t ************************************************************************/\n\n\t#include <iostream>\n\t#include <string>\n\t#include <vector>\n\t#include <sstream>\n\n\tusing namespace std;\n\n\tauto split(const string &s, const char delim = ' ')\n\t{\n\t\tstringstream ss(s);\n\t\tstring item;\n\t\tvector<string> elems;\n\n\t\twhile(getline(ss, item, delim) != NULL)\n\t\t{\n\t\t\telems.push_back(item);\n\t\t}\n\t\treturn  elems;\n\t}\n\n\tint main(void)\n\t{\n\t\tstring a, b;\n\t\tcout << \"Please Enter the Absolute Path of the File!\" << endl; \n\t\tcout << \"a = \";\n\t\tcin >> a;\n\t\tcout << \"b = \";\n\t\tcin >> b;\n\n\t\tauto diffpath = [](const string &a, const string &b) {\n\t\t\tint k = 0;\n\t\t\tfor (int i=0; i< a.length() && i<b.length() && a[i] == b[i]; ++i)\n\t\t\t\tif (a[i] == '/') k=i;\n\t\t\treturn k+1;\n\t\t};\n\n\t\tint index = diffpath(a, b);\n\n\t\ta = a.substr(index);\n\t\tb = b.substr(index);\n\n\t\tauto vecta = split(a, '/');\n\t\tauto vectb = split(b, '/');\n\n\t\tstring a_path_b = \"\"; //a relative to b path\n\t\tstring b_path_a = \"\"; //b relative to a path\n\n\t\tfor (int i=1; i<vecta.size(); ++i)\n\t\t\ta_path_b += \"../\";\n\t\ta_path_b += a;\n\n\t\tfor(int i=1; i<vectb.size(); ++i)\n\t\t\tb_path_a += \"../\";\n\t\tb_path_a += b;\n\n\t\tcout << \"a relative to b path: \" << a_path_b << endl;\n\t\tcout << \"b relative to a path: \" << b_path_a << endl;\n\n\t\treturn 0;\n\t}\n","source":"_posts/2015-1-26-计算A文件相对B文件的路径.md","raw":"---\nlayout: post\ntitle: 计算A文件相对B文件的路径\ndate: 2015-1-22 15:53:41\ntags: C++\ncategories: unclassified\n---\n\n以前写的代码，今天发一下\n\n\n\t/*************************************************************************\n\t\t>    File Name: relative_path.cpp\n\t\t>       Author: huangjinqiang\n\t\t>        Email: ligelaige@gmail.com\n\t\t> Created Time: Thu 13 Nov 2014 01:59:18 AM CST\n\t\t>      Compile: g++ relative_path.cpp -std=c++14\n\t ************************************************************************/\n\n\t#include <iostream>\n\t#include <string>\n\t#include <vector>\n\t#include <sstream>\n\n\tusing namespace std;\n\n\tauto split(const string &s, const char delim = ' ')\n\t{\n\t\tstringstream ss(s);\n\t\tstring item;\n\t\tvector<string> elems;\n\n\t\twhile(getline(ss, item, delim) != NULL)\n\t\t{\n\t\t\telems.push_back(item);\n\t\t}\n\t\treturn  elems;\n\t}\n\n\tint main(void)\n\t{\n\t\tstring a, b;\n\t\tcout << \"Please Enter the Absolute Path of the File!\" << endl; \n\t\tcout << \"a = \";\n\t\tcin >> a;\n\t\tcout << \"b = \";\n\t\tcin >> b;\n\n\t\tauto diffpath = [](const string &a, const string &b) {\n\t\t\tint k = 0;\n\t\t\tfor (int i=0; i< a.length() && i<b.length() && a[i] == b[i]; ++i)\n\t\t\t\tif (a[i] == '/') k=i;\n\t\t\treturn k+1;\n\t\t};\n\n\t\tint index = diffpath(a, b);\n\n\t\ta = a.substr(index);\n\t\tb = b.substr(index);\n\n\t\tauto vecta = split(a, '/');\n\t\tauto vectb = split(b, '/');\n\n\t\tstring a_path_b = \"\"; //a relative to b path\n\t\tstring b_path_a = \"\"; //b relative to a path\n\n\t\tfor (int i=1; i<vecta.size(); ++i)\n\t\t\ta_path_b += \"../\";\n\t\ta_path_b += a;\n\n\t\tfor(int i=1; i<vectb.size(); ++i)\n\t\t\tb_path_a += \"../\";\n\t\tb_path_a += b;\n\n\t\tcout << \"a relative to b path: \" << a_path_b << endl;\n\t\tcout << \"b relative to a path: \" << b_path_a << endl;\n\n\t\treturn 0;\n\t}\n","slug":"2015-1-26-计算A文件相对B文件的路径","published":1,"updated":"2018-05-13T09:17:37.339Z","comments":1,"photos":[],"link":"","_id":"cjh4njkcj000l1sufg8ut8ik3","content":"<p>以前写的代码，今天发一下</p>\n<pre><code>/*************************************************************************\n    &gt;    File Name: relative_path.cpp\n    &gt;       Author: huangjinqiang\n    &gt;        Email: ligelaige@gmail.com\n    &gt; Created Time: Thu 13 Nov 2014 01:59:18 AM CST\n    &gt;      Compile: g++ relative_path.cpp -std=c++14\n ************************************************************************/\n\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;sstream&gt;\n\nusing namespace std;\n\nauto split(const string &amp;s, const char delim = &apos; &apos;)\n{\n    stringstream ss(s);\n    string item;\n    vector&lt;string&gt; elems;\n\n    while(getline(ss, item, delim) != NULL)\n    {\n        elems.push_back(item);\n    }\n    return  elems;\n}\n\nint main(void)\n{\n    string a, b;\n    cout &lt;&lt; &quot;Please Enter the Absolute Path of the File!&quot; &lt;&lt; endl; \n    cout &lt;&lt; &quot;a = &quot;;\n    cin &gt;&gt; a;\n    cout &lt;&lt; &quot;b = &quot;;\n    cin &gt;&gt; b;\n\n    auto diffpath = [](const string &amp;a, const string &amp;b) {\n        int k = 0;\n        for (int i=0; i&lt; a.length() &amp;&amp; i&lt;b.length() &amp;&amp; a[i] == b[i]; ++i)\n            if (a[i] == &apos;/&apos;) k=i;\n        return k+1;\n    };\n\n    int index = diffpath(a, b);\n\n    a = a.substr(index);\n    b = b.substr(index);\n\n    auto vecta = split(a, &apos;/&apos;);\n    auto vectb = split(b, &apos;/&apos;);\n\n    string a_path_b = &quot;&quot;; //a relative to b path\n    string b_path_a = &quot;&quot;; //b relative to a path\n\n    for (int i=1; i&lt;vecta.size(); ++i)\n        a_path_b += &quot;../&quot;;\n    a_path_b += a;\n\n    for(int i=1; i&lt;vectb.size(); ++i)\n        b_path_a += &quot;../&quot;;\n    b_path_a += b;\n\n    cout &lt;&lt; &quot;a relative to b path: &quot; &lt;&lt; a_path_b &lt;&lt; endl;\n    cout &lt;&lt; &quot;b relative to a path: &quot; &lt;&lt; b_path_a &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>以前写的代码，今天发一下</p>\n<pre><code>/*************************************************************************\n    &gt;    File Name: relative_path.cpp\n    &gt;       Author: huangjinqiang\n    &gt;        Email: ligelaige@gmail.com\n    &gt; Created Time: Thu 13 Nov 2014 01:59:18 AM CST\n    &gt;      Compile: g++ relative_path.cpp -std=c++14\n ************************************************************************/\n\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;sstream&gt;\n\nusing namespace std;\n\nauto split(const string &amp;s, const char delim = &apos; &apos;)\n{\n    stringstream ss(s);\n    string item;\n    vector&lt;string&gt; elems;\n\n    while(getline(ss, item, delim) != NULL)\n    {\n        elems.push_back(item);\n    }\n    return  elems;\n}\n\nint main(void)\n{\n    string a, b;\n    cout &lt;&lt; &quot;Please Enter the Absolute Path of the File!&quot; &lt;&lt; endl; \n    cout &lt;&lt; &quot;a = &quot;;\n    cin &gt;&gt; a;\n    cout &lt;&lt; &quot;b = &quot;;\n    cin &gt;&gt; b;\n\n    auto diffpath = [](const string &amp;a, const string &amp;b) {\n        int k = 0;\n        for (int i=0; i&lt; a.length() &amp;&amp; i&lt;b.length() &amp;&amp; a[i] == b[i]; ++i)\n            if (a[i] == &apos;/&apos;) k=i;\n        return k+1;\n    };\n\n    int index = diffpath(a, b);\n\n    a = a.substr(index);\n    b = b.substr(index);\n\n    auto vecta = split(a, &apos;/&apos;);\n    auto vectb = split(b, &apos;/&apos;);\n\n    string a_path_b = &quot;&quot;; //a relative to b path\n    string b_path_a = &quot;&quot;; //b relative to a path\n\n    for (int i=1; i&lt;vecta.size(); ++i)\n        a_path_b += &quot;../&quot;;\n    a_path_b += a;\n\n    for(int i=1; i&lt;vectb.size(); ++i)\n        b_path_a += &quot;../&quot;;\n    b_path_a += b;\n\n    cout &lt;&lt; &quot;a relative to b path: &quot; &lt;&lt; a_path_b &lt;&lt; endl;\n    cout &lt;&lt; &quot;b relative to a path: &quot; &lt;&lt; b_path_a &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"layout":"post","title":"Python Tree","date":"2015-01-19T23:23:41.000Z","_content":"\n\t#!/usr/bin/env python\n\t#    -*-coding: utf-8-*-     \n\t#    File Name: tree\n\t#       Author: huangjinqiang\n\t#        Email: ligelaige@gmail.com\n\t# Created Time: Tue 20 Jan 2015 10:17:03 PM CST\n\n\timport sys\n\timport os\n\n\tDEBUG = False\n\tCLEAN = False\n\tALL = False\n\n\tdef lsall(dir, space = \"\"):\n\t\tdirname = dir\n\t\tglobal CLEAN\n\t\tif CLEAN and not os.listdir(dirname):\n\t\t\tos.rmdir(dirname)\n\t\t\treturn\n\n\t\tdirs = filter(lambda x: ALL or x[0] != '.', os.listdir(dirname))\n\t\tfor item in dirs:\n\t\t\tif os.path.isdir(os.path.join(dirname, item)):\n\t\t\t\tsubspace = space + \"|  \"\n\t\t\t\tprint \"%s%s\" % (subspace, item)\n\t\t\t\tlsall(os.path.join(dirname, item), subspace)\n\t\t\telse:\n\t\t\t\tsubspace = space + \"|--\"\n\t\t\t\tprint \"%s%s\" % (subspace, item)\n\n\n\tdef main(args):\n\t\tfor arg in filter(lambda x: os.path.exists(x), args):\n\t\t\tprint arg\n\t\t\tlsall(arg, \"\")\n\n\tdef help():\n\t\tprint '''\n\tUsage:\n\t1) tree \n\t\tdefault dir is your home directory\n\t2) tree demodir\n\t\tprint all files in demodir\n\t3) tree demo1 demo2 demo3 ...\n\t\tprint all files in these directories\n\t4) tree --help or tree -h\n\t\tprint tree Usage\n\t5) tree --clean or tree -c\n\t\tprint all file(s) in directory(s) and delete empty directory\n\n\tversion: 0.03\n\t author: Johnny Wong\n\t   date: 2015-01-20\n\t\t'''\n\n\tif __name__ == \"__main__\":\n\t\tif len(sys.argv) > 1:\n\t\t\targs = sys.argv[1:]\n\t\telse:\n\t\t\targs = [os.getcwd()]\n\n\t\tif '--help' in args or '-h' in args:\n\t\t\thelp()\n\t\t\texit(0)\n\n\t\tif '--clean' in args:\n\t\t\tCLEAN = True\n\t\t\targs.remove('--clean')\n\t\tif '-c' in args:\n\t\t\tCLEAN = True\n\t\t\targs.remove('-c')\n\n\t\tif '--all' in args:\n\t\t\tALL = True\n\t\t\targs.remove('--all')\n\t\tif '-a' in args:\n\t\t\tALL = True\n\t\t\targs.remove('-a')\n\n\t\tif DEBUG:\n\t\t\targs = ['/home/huangjinqiang/courses']\n\n\t\tmain(args)\n\n","source":"_posts/2015-1-20-python-tree.md","raw":"---\nlayout: post\ntitle: Python Tree\ndate: 2015-1-20 07:23:41\ntags: Python\ncategories: 未分类\n---\n\n\t#!/usr/bin/env python\n\t#    -*-coding: utf-8-*-     \n\t#    File Name: tree\n\t#       Author: huangjinqiang\n\t#        Email: ligelaige@gmail.com\n\t# Created Time: Tue 20 Jan 2015 10:17:03 PM CST\n\n\timport sys\n\timport os\n\n\tDEBUG = False\n\tCLEAN = False\n\tALL = False\n\n\tdef lsall(dir, space = \"\"):\n\t\tdirname = dir\n\t\tglobal CLEAN\n\t\tif CLEAN and not os.listdir(dirname):\n\t\t\tos.rmdir(dirname)\n\t\t\treturn\n\n\t\tdirs = filter(lambda x: ALL or x[0] != '.', os.listdir(dirname))\n\t\tfor item in dirs:\n\t\t\tif os.path.isdir(os.path.join(dirname, item)):\n\t\t\t\tsubspace = space + \"|  \"\n\t\t\t\tprint \"%s%s\" % (subspace, item)\n\t\t\t\tlsall(os.path.join(dirname, item), subspace)\n\t\t\telse:\n\t\t\t\tsubspace = space + \"|--\"\n\t\t\t\tprint \"%s%s\" % (subspace, item)\n\n\n\tdef main(args):\n\t\tfor arg in filter(lambda x: os.path.exists(x), args):\n\t\t\tprint arg\n\t\t\tlsall(arg, \"\")\n\n\tdef help():\n\t\tprint '''\n\tUsage:\n\t1) tree \n\t\tdefault dir is your home directory\n\t2) tree demodir\n\t\tprint all files in demodir\n\t3) tree demo1 demo2 demo3 ...\n\t\tprint all files in these directories\n\t4) tree --help or tree -h\n\t\tprint tree Usage\n\t5) tree --clean or tree -c\n\t\tprint all file(s) in directory(s) and delete empty directory\n\n\tversion: 0.03\n\t author: Johnny Wong\n\t   date: 2015-01-20\n\t\t'''\n\n\tif __name__ == \"__main__\":\n\t\tif len(sys.argv) > 1:\n\t\t\targs = sys.argv[1:]\n\t\telse:\n\t\t\targs = [os.getcwd()]\n\n\t\tif '--help' in args or '-h' in args:\n\t\t\thelp()\n\t\t\texit(0)\n\n\t\tif '--clean' in args:\n\t\t\tCLEAN = True\n\t\t\targs.remove('--clean')\n\t\tif '-c' in args:\n\t\t\tCLEAN = True\n\t\t\targs.remove('-c')\n\n\t\tif '--all' in args:\n\t\t\tALL = True\n\t\t\targs.remove('--all')\n\t\tif '-a' in args:\n\t\t\tALL = True\n\t\t\targs.remove('-a')\n\n\t\tif DEBUG:\n\t\t\targs = ['/home/huangjinqiang/courses']\n\n\t\tmain(args)\n\n","slug":"2015-1-20-python-tree","published":1,"updated":"2018-05-13T09:16:24.642Z","comments":1,"photos":[],"link":"","_id":"cjh4njkcj000o1suf7e2b522g","content":"<pre><code>#!/usr/bin/env python\n#    -*-coding: utf-8-*-     \n#    File Name: tree\n#       Author: huangjinqiang\n#        Email: ligelaige@gmail.com\n# Created Time: Tue 20 Jan 2015 10:17:03 PM CST\n\nimport sys\nimport os\n\nDEBUG = False\nCLEAN = False\nALL = False\n\ndef lsall(dir, space = &quot;&quot;):\n    dirname = dir\n    global CLEAN\n    if CLEAN and not os.listdir(dirname):\n        os.rmdir(dirname)\n        return\n\n    dirs = filter(lambda x: ALL or x[0] != &apos;.&apos;, os.listdir(dirname))\n    for item in dirs:\n        if os.path.isdir(os.path.join(dirname, item)):\n            subspace = space + &quot;|  &quot;\n            print &quot;%s%s&quot; % (subspace, item)\n            lsall(os.path.join(dirname, item), subspace)\n        else:\n            subspace = space + &quot;|--&quot;\n            print &quot;%s%s&quot; % (subspace, item)\n\n\ndef main(args):\n    for arg in filter(lambda x: os.path.exists(x), args):\n        print arg\n        lsall(arg, &quot;&quot;)\n\ndef help():\n    print &apos;&apos;&apos;\nUsage:\n1) tree \n    default dir is your home directory\n2) tree demodir\n    print all files in demodir\n3) tree demo1 demo2 demo3 ...\n    print all files in these directories\n4) tree --help or tree -h\n    print tree Usage\n5) tree --clean or tree -c\n    print all file(s) in directory(s) and delete empty directory\n\nversion: 0.03\n author: Johnny Wong\n   date: 2015-01-20\n    &apos;&apos;&apos;\n\nif __name__ == &quot;__main__&quot;:\n    if len(sys.argv) &gt; 1:\n        args = sys.argv[1:]\n    else:\n        args = [os.getcwd()]\n\n    if &apos;--help&apos; in args or &apos;-h&apos; in args:\n        help()\n        exit(0)\n\n    if &apos;--clean&apos; in args:\n        CLEAN = True\n        args.remove(&apos;--clean&apos;)\n    if &apos;-c&apos; in args:\n        CLEAN = True\n        args.remove(&apos;-c&apos;)\n\n    if &apos;--all&apos; in args:\n        ALL = True\n        args.remove(&apos;--all&apos;)\n    if &apos;-a&apos; in args:\n        ALL = True\n        args.remove(&apos;-a&apos;)\n\n    if DEBUG:\n        args = [&apos;/home/huangjinqiang/courses&apos;]\n\n    main(args)\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>#!/usr/bin/env python\n#    -*-coding: utf-8-*-     \n#    File Name: tree\n#       Author: huangjinqiang\n#        Email: ligelaige@gmail.com\n# Created Time: Tue 20 Jan 2015 10:17:03 PM CST\n\nimport sys\nimport os\n\nDEBUG = False\nCLEAN = False\nALL = False\n\ndef lsall(dir, space = &quot;&quot;):\n    dirname = dir\n    global CLEAN\n    if CLEAN and not os.listdir(dirname):\n        os.rmdir(dirname)\n        return\n\n    dirs = filter(lambda x: ALL or x[0] != &apos;.&apos;, os.listdir(dirname))\n    for item in dirs:\n        if os.path.isdir(os.path.join(dirname, item)):\n            subspace = space + &quot;|  &quot;\n            print &quot;%s%s&quot; % (subspace, item)\n            lsall(os.path.join(dirname, item), subspace)\n        else:\n            subspace = space + &quot;|--&quot;\n            print &quot;%s%s&quot; % (subspace, item)\n\n\ndef main(args):\n    for arg in filter(lambda x: os.path.exists(x), args):\n        print arg\n        lsall(arg, &quot;&quot;)\n\ndef help():\n    print &apos;&apos;&apos;\nUsage:\n1) tree \n    default dir is your home directory\n2) tree demodir\n    print all files in demodir\n3) tree demo1 demo2 demo3 ...\n    print all files in these directories\n4) tree --help or tree -h\n    print tree Usage\n5) tree --clean or tree -c\n    print all file(s) in directory(s) and delete empty directory\n\nversion: 0.03\n author: Johnny Wong\n   date: 2015-01-20\n    &apos;&apos;&apos;\n\nif __name__ == &quot;__main__&quot;:\n    if len(sys.argv) &gt; 1:\n        args = sys.argv[1:]\n    else:\n        args = [os.getcwd()]\n\n    if &apos;--help&apos; in args or &apos;-h&apos; in args:\n        help()\n        exit(0)\n\n    if &apos;--clean&apos; in args:\n        CLEAN = True\n        args.remove(&apos;--clean&apos;)\n    if &apos;-c&apos; in args:\n        CLEAN = True\n        args.remove(&apos;-c&apos;)\n\n    if &apos;--all&apos; in args:\n        ALL = True\n        args.remove(&apos;--all&apos;)\n    if &apos;-a&apos; in args:\n        ALL = True\n        args.remove(&apos;-a&apos;)\n\n    if DEBUG:\n        args = [&apos;/home/huangjinqiang/courses&apos;]\n\n    main(args)\n</code></pre>"},{"layout":"post","title":"c版daemon进程例子","date":"2015-01-28T05:53:41.000Z","_content":"\n\t/*************************************************************************\n\t\t>    File Name: deamon_test.c\n\t\t>       Author: huangjinqiang\n\t\t>        Email: ligelaige@gmail.com\n\t\t> Created Time: Mon 28 Jan 2015 13:56:43 PM CST\n\t ************************************************************************/\n\n\t#include <time.h>\n\t#include <stdlib.h>\n\t#include <unistd.h>\n\t#include <stdio.h>\n\t#include <sys/types.h>\n\n\tchar *getnow()\n\t{\n\t    char *wday[] = {\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"};\n\t    time_t timep;\n\t    struct tm *p;\n\t    time(&timep);\n\t    p = gmtime(&timep);\n\t\tchar *str = (char *)malloc(128);\n\t    sprintf(str, \"%4d-%02d-%02d %s %02d:%02d:%02d\", \n\t\t\t\t\t\t1900 + p->tm_year, 1 + p->tm_mon, p->tm_mday,\n\t\t\t\t\t\twday[p->tm_wday], 8 + p->tm_hour, p->tm_min, p->tm_sec); \n\t\treturn str;\n\t}\n\n\tint do_sth() \n\t{ \n\t\tFILE * fhander = fopen(\"daemon_test.log\", \"a\");\n\t\tchar *str = getnow();\n\t\tfprintf(fhander, \"Hello, Johnny! %d  NOW: %s\\n\", getpid(), str);\n\t\tfclose(fhander);\n\t\treturn 0 ; \n\t} \n\n\n\tint main(void)\n\t{\n\t    pid_t pid = fork();\n\t    if(pid < 0) \n\t\t\treturn -1;\n\t    else if(pid > 0)\n\t\t{\n\t\t\tprintf (\"new  pid: %d\\n\", pid);\t\t\t// new\n\t\t\tprintf (\"main pid: %d\\n\", getpid());\t// main\n\t\t\texit(0);\n\t\t}\n\t\t\n\t    while(1)\n\t    {\n\t        do_sth();\t\t\t\t\t\t\t\t// new\n\t        sleep(1);\n\t    }\n\t    return 0;\n\t}\n\n","source":"_posts/2015-1-28-daemon-use-c.md","raw":"---\nlayout: post\ntitle: c版daemon进程例子\ndate: 2015-1-28 13:53:41\ntags: C\ncategories: unclassified\n---\n\n\t/*************************************************************************\n\t\t>    File Name: deamon_test.c\n\t\t>       Author: huangjinqiang\n\t\t>        Email: ligelaige@gmail.com\n\t\t> Created Time: Mon 28 Jan 2015 13:56:43 PM CST\n\t ************************************************************************/\n\n\t#include <time.h>\n\t#include <stdlib.h>\n\t#include <unistd.h>\n\t#include <stdio.h>\n\t#include <sys/types.h>\n\n\tchar *getnow()\n\t{\n\t    char *wday[] = {\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"};\n\t    time_t timep;\n\t    struct tm *p;\n\t    time(&timep);\n\t    p = gmtime(&timep);\n\t\tchar *str = (char *)malloc(128);\n\t    sprintf(str, \"%4d-%02d-%02d %s %02d:%02d:%02d\", \n\t\t\t\t\t\t1900 + p->tm_year, 1 + p->tm_mon, p->tm_mday,\n\t\t\t\t\t\twday[p->tm_wday], 8 + p->tm_hour, p->tm_min, p->tm_sec); \n\t\treturn str;\n\t}\n\n\tint do_sth() \n\t{ \n\t\tFILE * fhander = fopen(\"daemon_test.log\", \"a\");\n\t\tchar *str = getnow();\n\t\tfprintf(fhander, \"Hello, Johnny! %d  NOW: %s\\n\", getpid(), str);\n\t\tfclose(fhander);\n\t\treturn 0 ; \n\t} \n\n\n\tint main(void)\n\t{\n\t    pid_t pid = fork();\n\t    if(pid < 0) \n\t\t\treturn -1;\n\t    else if(pid > 0)\n\t\t{\n\t\t\tprintf (\"new  pid: %d\\n\", pid);\t\t\t// new\n\t\t\tprintf (\"main pid: %d\\n\", getpid());\t// main\n\t\t\texit(0);\n\t\t}\n\t\t\n\t    while(1)\n\t    {\n\t        do_sth();\t\t\t\t\t\t\t\t// new\n\t        sleep(1);\n\t    }\n\t    return 0;\n\t}\n\n","slug":"2015-1-28-daemon-use-c","published":1,"updated":"2018-05-13T09:15:48.547Z","comments":1,"photos":[],"link":"","_id":"cjh4njkcj000s1suf27l0wvyf","content":"<pre><code>/*************************************************************************\n    &gt;    File Name: deamon_test.c\n    &gt;       Author: huangjinqiang\n    &gt;        Email: ligelaige@gmail.com\n    &gt; Created Time: Mon 28 Jan 2015 13:56:43 PM CST\n ************************************************************************/\n\n#include &lt;time.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n\nchar *getnow()\n{\n    char *wday[] = {&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;};\n    time_t timep;\n    struct tm *p;\n    time(&amp;timep);\n    p = gmtime(&amp;timep);\n    char *str = (char *)malloc(128);\n    sprintf(str, &quot;%4d-%02d-%02d %s %02d:%02d:%02d&quot;, \n                    1900 + p-&gt;tm_year, 1 + p-&gt;tm_mon, p-&gt;tm_mday,\n                    wday[p-&gt;tm_wday], 8 + p-&gt;tm_hour, p-&gt;tm_min, p-&gt;tm_sec); \n    return str;\n}\n\nint do_sth() \n{ \n    FILE * fhander = fopen(&quot;daemon_test.log&quot;, &quot;a&quot;);\n    char *str = getnow();\n    fprintf(fhander, &quot;Hello, Johnny! %d  NOW: %s\\n&quot;, getpid(), str);\n    fclose(fhander);\n    return 0 ; \n} \n\n\nint main(void)\n{\n    pid_t pid = fork();\n    if(pid &lt; 0) \n        return -1;\n    else if(pid &gt; 0)\n    {\n        printf (&quot;new  pid: %d\\n&quot;, pid);            // new\n        printf (&quot;main pid: %d\\n&quot;, getpid());    // main\n        exit(0);\n    }\n\n    while(1)\n    {\n        do_sth();                                // new\n        sleep(1);\n    }\n    return 0;\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>/*************************************************************************\n    &gt;    File Name: deamon_test.c\n    &gt;       Author: huangjinqiang\n    &gt;        Email: ligelaige@gmail.com\n    &gt; Created Time: Mon 28 Jan 2015 13:56:43 PM CST\n ************************************************************************/\n\n#include &lt;time.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n\nchar *getnow()\n{\n    char *wday[] = {&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;};\n    time_t timep;\n    struct tm *p;\n    time(&amp;timep);\n    p = gmtime(&amp;timep);\n    char *str = (char *)malloc(128);\n    sprintf(str, &quot;%4d-%02d-%02d %s %02d:%02d:%02d&quot;, \n                    1900 + p-&gt;tm_year, 1 + p-&gt;tm_mon, p-&gt;tm_mday,\n                    wday[p-&gt;tm_wday], 8 + p-&gt;tm_hour, p-&gt;tm_min, p-&gt;tm_sec); \n    return str;\n}\n\nint do_sth() \n{ \n    FILE * fhander = fopen(&quot;daemon_test.log&quot;, &quot;a&quot;);\n    char *str = getnow();\n    fprintf(fhander, &quot;Hello, Johnny! %d  NOW: %s\\n&quot;, getpid(), str);\n    fclose(fhander);\n    return 0 ; \n} \n\n\nint main(void)\n{\n    pid_t pid = fork();\n    if(pid &lt; 0) \n        return -1;\n    else if(pid &gt; 0)\n    {\n        printf (&quot;new  pid: %d\\n&quot;, pid);            // new\n        printf (&quot;main pid: %d\\n&quot;, getpid());    // main\n        exit(0);\n    }\n\n    while(1)\n    {\n        do_sth();                                // new\n        sleep(1);\n    }\n    return 0;\n}\n</code></pre>"},{"layout":"post","title":"Mini-Seed笔记","date":"2015-11-15T07:06:05.000Z","_content":"\n下载libmseed代码库\n\n\t`https://seiscode.iris.washington.edu/projects/libmseed/files`\n\n将 miniseed 数据流转化为 MSRecord 结构\n\t\n\t`\n\t// 引入头文件\n\t#include \"libmseed.h\"\n\t// 初始化一个 MSRecord\n\tMSRecord *msr = msr_init(NULL);\n\t/* 标注1 */\n\t// 尝试Unpack，如果 retcode == MS_NOERROR，则成功，相应信息保存在 msr 中\n\tint retcode = msr_unpack((char *)mseed_buffer, mseed_buffer_length, &msr, true, 1);\n\t// 从 msr 获取信息\n\tchar* network = msr->network;\n\tchar* station = msr->station;\n\tchar* channel = msr->channel;\n\tchar* location = msr->location;\n\tchar* starttime = msr->starttime;\n\tchar* samprate = msr->samprate;\n\n\tunsigned int numsamples =  msr->numsamples;\n\tchar sampletype = msr->sampletype;\n\n\tvoid * datasamples = msr->datasamples;\n\n\t// 释放MSRecord\n\tmsr_free(&msr);\n\t`\n\n标注\n\n\t如果mseed使用的是国家标准\n\t在 `标注1` 处可能需要修正 mseed 数据流，原因是在libmseed.h中有一个宏定义检查\n\t`\n\t\t#define MS_ISVALIDHEADER(X) (                               \\\n\t\t  (isdigit ((int) *(X))   || *(X)   == ' ' || !*(X) )   &&  \\\n\t\t  (isdigit ((int) *(X+1)) || *(X+1) == ' ' || !*(X+1) ) &&  \\\n\t\t  (isdigit ((int) *(X+2)) || *(X+2) == ' ' || !*(X+2) ) &&  \\\n\t\t  (isdigit ((int) *(X+3)) || *(X+3) == ' ' || !*(X+3) ) &&  \\\n\t\t  (isdigit ((int) *(X+4)) || *(X+4) == ' ' || !*(X+4) ) &&  \\\n\t\t  (isdigit ((int) *(X+5)) || *(X+5) == ' ' || !*(X+5) ) &&  \\\n\t\t  MS_ISDATAINDICATOR(*(X+6)) &&                             \\\n\t\t  (*(X+7) == ' ' || *(X+7) == '\\0') &&                      \\\n\t\t  (int)(*(X+24)) >= 0 && (int)(*(X+24)) <= 23 &&            \\\n\t\t  (int)(*(X+25)) >= 0 && (int)(*(X+25)) <= 59 &&            \\\n\t\t  (int)(*(X+26)) >= 0 && (int)(*(X+26)) <= 60 )\n\t`\n\t修正的方式可以将mseed_buffer的前6个字节置为 0(ascii 0, 不是 '0')，之前注意保存副本。\n\n\t此外，可能会遇到大小端的问题\n\n大小端转换\n\n\t`\n\t#define BigtoLittle16(A) ((((u16)(A) & 0xff00) >> 8) | (((u16)(A) & 0x00ff) << 8))\n\t#define BigtoLittle32(A) ((((u32)(A) & 0xff000000) >> 24) | (((u32)(A) & 0x00ff0000) >> 8) | (((u32)(A) & 0x0000ff00) << 8)  | (((u32)(A) & 0x000000ff) << 24))\n\t`\n\n另外，可能需要在设计数据结构时，注意内存对齐，解决的方法是：修改数据结构，或者 添加编译器指令 `#pragma   pack(n)` .\n\n\n\n","source":"_posts/2015-11-15-miniseed-note.md","raw":"---\nlayout: post\ntitle: Mini-Seed笔记 \ndate: 2015-11-15 15:06:05\ncategories: 未分类\n---\n\n下载libmseed代码库\n\n\t`https://seiscode.iris.washington.edu/projects/libmseed/files`\n\n将 miniseed 数据流转化为 MSRecord 结构\n\t\n\t`\n\t// 引入头文件\n\t#include \"libmseed.h\"\n\t// 初始化一个 MSRecord\n\tMSRecord *msr = msr_init(NULL);\n\t/* 标注1 */\n\t// 尝试Unpack，如果 retcode == MS_NOERROR，则成功，相应信息保存在 msr 中\n\tint retcode = msr_unpack((char *)mseed_buffer, mseed_buffer_length, &msr, true, 1);\n\t// 从 msr 获取信息\n\tchar* network = msr->network;\n\tchar* station = msr->station;\n\tchar* channel = msr->channel;\n\tchar* location = msr->location;\n\tchar* starttime = msr->starttime;\n\tchar* samprate = msr->samprate;\n\n\tunsigned int numsamples =  msr->numsamples;\n\tchar sampletype = msr->sampletype;\n\n\tvoid * datasamples = msr->datasamples;\n\n\t// 释放MSRecord\n\tmsr_free(&msr);\n\t`\n\n标注\n\n\t如果mseed使用的是国家标准\n\t在 `标注1` 处可能需要修正 mseed 数据流，原因是在libmseed.h中有一个宏定义检查\n\t`\n\t\t#define MS_ISVALIDHEADER(X) (                               \\\n\t\t  (isdigit ((int) *(X))   || *(X)   == ' ' || !*(X) )   &&  \\\n\t\t  (isdigit ((int) *(X+1)) || *(X+1) == ' ' || !*(X+1) ) &&  \\\n\t\t  (isdigit ((int) *(X+2)) || *(X+2) == ' ' || !*(X+2) ) &&  \\\n\t\t  (isdigit ((int) *(X+3)) || *(X+3) == ' ' || !*(X+3) ) &&  \\\n\t\t  (isdigit ((int) *(X+4)) || *(X+4) == ' ' || !*(X+4) ) &&  \\\n\t\t  (isdigit ((int) *(X+5)) || *(X+5) == ' ' || !*(X+5) ) &&  \\\n\t\t  MS_ISDATAINDICATOR(*(X+6)) &&                             \\\n\t\t  (*(X+7) == ' ' || *(X+7) == '\\0') &&                      \\\n\t\t  (int)(*(X+24)) >= 0 && (int)(*(X+24)) <= 23 &&            \\\n\t\t  (int)(*(X+25)) >= 0 && (int)(*(X+25)) <= 59 &&            \\\n\t\t  (int)(*(X+26)) >= 0 && (int)(*(X+26)) <= 60 )\n\t`\n\t修正的方式可以将mseed_buffer的前6个字节置为 0(ascii 0, 不是 '0')，之前注意保存副本。\n\n\t此外，可能会遇到大小端的问题\n\n大小端转换\n\n\t`\n\t#define BigtoLittle16(A) ((((u16)(A) & 0xff00) >> 8) | (((u16)(A) & 0x00ff) << 8))\n\t#define BigtoLittle32(A) ((((u32)(A) & 0xff000000) >> 24) | (((u32)(A) & 0x00ff0000) >> 8) | (((u32)(A) & 0x0000ff00) << 8)  | (((u32)(A) & 0x000000ff) << 24))\n\t`\n\n另外，可能需要在设计数据结构时，注意内存对齐，解决的方法是：修改数据结构，或者 添加编译器指令 `#pragma   pack(n)` .\n\n\n\n","slug":"2015-11-15-miniseed-note","published":1,"updated":"2018-05-13T07:40:36.351Z","comments":1,"photos":[],"link":"","_id":"cjh4njkcj000v1sufhab1av5u","content":"<p>下载libmseed代码库</p>\n<pre><code>`https://seiscode.iris.washington.edu/projects/libmseed/files`\n</code></pre><p>将 miniseed 数据流转化为 MSRecord 结构</p>\n<pre><code>`\n// 引入头文件\n#include &quot;libmseed.h&quot;\n// 初始化一个 MSRecord\nMSRecord *msr = msr_init(NULL);\n/* 标注1 */\n// 尝试Unpack，如果 retcode == MS_NOERROR，则成功，相应信息保存在 msr 中\nint retcode = msr_unpack((char *)mseed_buffer, mseed_buffer_length, &amp;msr, true, 1);\n// 从 msr 获取信息\nchar* network = msr-&gt;network;\nchar* station = msr-&gt;station;\nchar* channel = msr-&gt;channel;\nchar* location = msr-&gt;location;\nchar* starttime = msr-&gt;starttime;\nchar* samprate = msr-&gt;samprate;\n\nunsigned int numsamples =  msr-&gt;numsamples;\nchar sampletype = msr-&gt;sampletype;\n\nvoid * datasamples = msr-&gt;datasamples;\n\n// 释放MSRecord\nmsr_free(&amp;msr);\n`\n</code></pre><p>标注</p>\n<pre><code>如果mseed使用的是国家标准\n在 `标注1` 处可能需要修正 mseed 数据流，原因是在libmseed.h中有一个宏定义检查\n`\n    #define MS_ISVALIDHEADER(X) (                               \\\n      (isdigit ((int) *(X))   || *(X)   == &apos; &apos; || !*(X) )   &amp;&amp;  \\\n      (isdigit ((int) *(X+1)) || *(X+1) == &apos; &apos; || !*(X+1) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+2)) || *(X+2) == &apos; &apos; || !*(X+2) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+3)) || *(X+3) == &apos; &apos; || !*(X+3) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+4)) || *(X+4) == &apos; &apos; || !*(X+4) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+5)) || *(X+5) == &apos; &apos; || !*(X+5) ) &amp;&amp;  \\\n      MS_ISDATAINDICATOR(*(X+6)) &amp;&amp;                             \\\n      (*(X+7) == &apos; &apos; || *(X+7) == &apos;\\0&apos;) &amp;&amp;                      \\\n      (int)(*(X+24)) &gt;= 0 &amp;&amp; (int)(*(X+24)) &lt;= 23 &amp;&amp;            \\\n      (int)(*(X+25)) &gt;= 0 &amp;&amp; (int)(*(X+25)) &lt;= 59 &amp;&amp;            \\\n      (int)(*(X+26)) &gt;= 0 &amp;&amp; (int)(*(X+26)) &lt;= 60 )\n`\n修正的方式可以将mseed_buffer的前6个字节置为 0(ascii 0, 不是 &apos;0&apos;)，之前注意保存副本。\n\n此外，可能会遇到大小端的问题\n</code></pre><p>大小端转换</p>\n<pre><code>`\n#define BigtoLittle16(A) ((((u16)(A) &amp; 0xff00) &gt;&gt; 8) | (((u16)(A) &amp; 0x00ff) &lt;&lt; 8))\n#define BigtoLittle32(A) ((((u32)(A) &amp; 0xff000000) &gt;&gt; 24) | (((u32)(A) &amp; 0x00ff0000) &gt;&gt; 8) | (((u32)(A) &amp; 0x0000ff00) &lt;&lt; 8)  | (((u32)(A) &amp; 0x000000ff) &lt;&lt; 24))\n`\n</code></pre><p>另外，可能需要在设计数据结构时，注意内存对齐，解决的方法是：修改数据结构，或者 添加编译器指令 <code>#pragma   pack(n)</code> .</p>\n","site":{"data":{}},"excerpt":"","more":"<p>下载libmseed代码库</p>\n<pre><code>`https://seiscode.iris.washington.edu/projects/libmseed/files`\n</code></pre><p>将 miniseed 数据流转化为 MSRecord 结构</p>\n<pre><code>`\n// 引入头文件\n#include &quot;libmseed.h&quot;\n// 初始化一个 MSRecord\nMSRecord *msr = msr_init(NULL);\n/* 标注1 */\n// 尝试Unpack，如果 retcode == MS_NOERROR，则成功，相应信息保存在 msr 中\nint retcode = msr_unpack((char *)mseed_buffer, mseed_buffer_length, &amp;msr, true, 1);\n// 从 msr 获取信息\nchar* network = msr-&gt;network;\nchar* station = msr-&gt;station;\nchar* channel = msr-&gt;channel;\nchar* location = msr-&gt;location;\nchar* starttime = msr-&gt;starttime;\nchar* samprate = msr-&gt;samprate;\n\nunsigned int numsamples =  msr-&gt;numsamples;\nchar sampletype = msr-&gt;sampletype;\n\nvoid * datasamples = msr-&gt;datasamples;\n\n// 释放MSRecord\nmsr_free(&amp;msr);\n`\n</code></pre><p>标注</p>\n<pre><code>如果mseed使用的是国家标准\n在 `标注1` 处可能需要修正 mseed 数据流，原因是在libmseed.h中有一个宏定义检查\n`\n    #define MS_ISVALIDHEADER(X) (                               \\\n      (isdigit ((int) *(X))   || *(X)   == &apos; &apos; || !*(X) )   &amp;&amp;  \\\n      (isdigit ((int) *(X+1)) || *(X+1) == &apos; &apos; || !*(X+1) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+2)) || *(X+2) == &apos; &apos; || !*(X+2) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+3)) || *(X+3) == &apos; &apos; || !*(X+3) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+4)) || *(X+4) == &apos; &apos; || !*(X+4) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+5)) || *(X+5) == &apos; &apos; || !*(X+5) ) &amp;&amp;  \\\n      MS_ISDATAINDICATOR(*(X+6)) &amp;&amp;                             \\\n      (*(X+7) == &apos; &apos; || *(X+7) == &apos;\\0&apos;) &amp;&amp;                      \\\n      (int)(*(X+24)) &gt;= 0 &amp;&amp; (int)(*(X+24)) &lt;= 23 &amp;&amp;            \\\n      (int)(*(X+25)) &gt;= 0 &amp;&amp; (int)(*(X+25)) &lt;= 59 &amp;&amp;            \\\n      (int)(*(X+26)) &gt;= 0 &amp;&amp; (int)(*(X+26)) &lt;= 60 )\n`\n修正的方式可以将mseed_buffer的前6个字节置为 0(ascii 0, 不是 &apos;0&apos;)，之前注意保存副本。\n\n此外，可能会遇到大小端的问题\n</code></pre><p>大小端转换</p>\n<pre><code>`\n#define BigtoLittle16(A) ((((u16)(A) &amp; 0xff00) &gt;&gt; 8) | (((u16)(A) &amp; 0x00ff) &lt;&lt; 8))\n#define BigtoLittle32(A) ((((u32)(A) &amp; 0xff000000) &gt;&gt; 24) | (((u32)(A) &amp; 0x00ff0000) &gt;&gt; 8) | (((u32)(A) &amp; 0x0000ff00) &lt;&lt; 8)  | (((u32)(A) &amp; 0x000000ff) &lt;&lt; 24))\n`\n</code></pre><p>另外，可能需要在设计数据结构时，注意内存对齐，解决的方法是：修改数据结构，或者 添加编译器指令 <code>#pragma   pack(n)</code> .</p>\n"},{"layout":"post","title":"CentOS 升级 GCC 整理记录","date":"2016-07-28T01:45:50.000Z","_content":"\nCentOS 升级 GCC 整理记录\n\n\tCentOS 版本: 6.0 (x64)\n\tGCC 原版本： 4.4.7\n\tGCC 升级版本：4.8.5\n\tGCC 4.8.5 链接： https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\n\n执行过程\n\n\twget https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\n\ttar zxf gcc-4.8.5.tar.gz\n\tcd gcc-4.8.5\n\n\tyum install gcc g++\n\tyum install glibc-static\n\tyum install cloog-ppl gmp-devel\n\n\twget ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.11.1.tar.bz2\n\ttar jxf isl-0.11.1.tar.bz2\n\tcd isl-0.11.1\n\t./configure\n\tmake\n\tmake install\n\t\n\tcd ..\n\t./contrib/download_prerequisites\n\tmkdir build\n\tcd build\n\t../configure --prefix=/usr --enable-languages=c,c++ --disable-multilib\n\tmake -j4\n\tmake install\n\nGCC 4.8.5 支持 C++11 的部分特性","source":"_posts/2016-07-28-centos_upgrade_gcc.md","raw":"---\nlayout: post\ntitle: CentOS 升级 GCC 整理记录\ndate: 2016-07-28 09:45:50\ncategories: Unclassified\n---\n\nCentOS 升级 GCC 整理记录\n\n\tCentOS 版本: 6.0 (x64)\n\tGCC 原版本： 4.4.7\n\tGCC 升级版本：4.8.5\n\tGCC 4.8.5 链接： https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\n\n执行过程\n\n\twget https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\n\ttar zxf gcc-4.8.5.tar.gz\n\tcd gcc-4.8.5\n\n\tyum install gcc g++\n\tyum install glibc-static\n\tyum install cloog-ppl gmp-devel\n\n\twget ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.11.1.tar.bz2\n\ttar jxf isl-0.11.1.tar.bz2\n\tcd isl-0.11.1\n\t./configure\n\tmake\n\tmake install\n\t\n\tcd ..\n\t./contrib/download_prerequisites\n\tmkdir build\n\tcd build\n\t../configure --prefix=/usr --enable-languages=c,c++ --disable-multilib\n\tmake -j4\n\tmake install\n\nGCC 4.8.5 支持 C++11 的部分特性","slug":"2016-07-28-centos_upgrade_gcc","published":1,"updated":"2018-05-13T07:40:36.353Z","comments":1,"photos":[],"link":"","_id":"cjh4njkcy000y1suft495fvkn","content":"<p>CentOS 升级 GCC 整理记录</p>\n<pre><code>CentOS 版本: 6.0 (x64)\nGCC 原版本： 4.4.7\nGCC 升级版本：4.8.5\nGCC 4.8.5 链接： https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\n</code></pre><p>执行过程</p>\n<pre><code>wget https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\ntar zxf gcc-4.8.5.tar.gz\ncd gcc-4.8.5\n\nyum install gcc g++\nyum install glibc-static\nyum install cloog-ppl gmp-devel\n\nwget ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.11.1.tar.bz2\ntar jxf isl-0.11.1.tar.bz2\ncd isl-0.11.1\n./configure\nmake\nmake install\n\ncd ..\n./contrib/download_prerequisites\nmkdir build\ncd build\n../configure --prefix=/usr --enable-languages=c,c++ --disable-multilib\nmake -j4\nmake install\n</code></pre><p>GCC 4.8.5 支持 C++11 的部分特性</p>\n","site":{"data":{}},"excerpt":"","more":"<p>CentOS 升级 GCC 整理记录</p>\n<pre><code>CentOS 版本: 6.0 (x64)\nGCC 原版本： 4.4.7\nGCC 升级版本：4.8.5\nGCC 4.8.5 链接： https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\n</code></pre><p>执行过程</p>\n<pre><code>wget https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\ntar zxf gcc-4.8.5.tar.gz\ncd gcc-4.8.5\n\nyum install gcc g++\nyum install glibc-static\nyum install cloog-ppl gmp-devel\n\nwget ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.11.1.tar.bz2\ntar jxf isl-0.11.1.tar.bz2\ncd isl-0.11.1\n./configure\nmake\nmake install\n\ncd ..\n./contrib/download_prerequisites\nmkdir build\ncd build\n../configure --prefix=/usr --enable-languages=c,c++ --disable-multilib\nmake -j4\nmake install\n</code></pre><p>GCC 4.8.5 支持 C++11 的部分特性</p>\n"},{"title":"一个简单的命令","date":"2016-08-31T09:56:02.000Z","_content":"\n注释或恢复 /dev/sda2\t        /media/video1\t        ext4\tdefaults\t0 0\n\n```bash\n#!/bin/bash\n\nfstab=\"fstab\"\n\nfunction removefs()\n{\ntargetfile=\"$fstab\"\nsed -i 's/^\\(\\/dev\\/sd.*\\/media\\/video[1234].*ext4.*defaults.*\\)/\\#\\1/g' $targetfile\n}\n\nfunction restorefs()\n{\ntargetfile=\"$fstab\"\nsed -i 's/^#\\(\\/dev\\/sd.*\\/media\\/video[1234].*ext4.*defaults.*\\)/\\1/g' $targetfile\n}\n\nfunction usage()\n{\n\techo \"./rmfstab [restore|help]\"\n}\n\n## main entry\n\ncase $1 in\nrestore|reduce|r|no|not|1)\n\trestorefs;;\nhelp|--help|h|-h|0)\n\tusage;;\n*)\n\tremovefs;;\nesac\n```","source":"_posts/2016-08-31-fstab-shell-script.md","raw":"---\ntitle: 一个简单的命令\ndate: 2016-08-31 17:56:02\ntags:\n---\n\n注释或恢复 /dev/sda2\t        /media/video1\t        ext4\tdefaults\t0 0\n\n```bash\n#!/bin/bash\n\nfstab=\"fstab\"\n\nfunction removefs()\n{\ntargetfile=\"$fstab\"\nsed -i 's/^\\(\\/dev\\/sd.*\\/media\\/video[1234].*ext4.*defaults.*\\)/\\#\\1/g' $targetfile\n}\n\nfunction restorefs()\n{\ntargetfile=\"$fstab\"\nsed -i 's/^#\\(\\/dev\\/sd.*\\/media\\/video[1234].*ext4.*defaults.*\\)/\\1/g' $targetfile\n}\n\nfunction usage()\n{\n\techo \"./rmfstab [restore|help]\"\n}\n\n## main entry\n\ncase $1 in\nrestore|reduce|r|no|not|1)\n\trestorefs;;\nhelp|--help|h|-h|0)\n\tusage;;\n*)\n\tremovefs;;\nesac\n```","slug":"2016-08-31-fstab-shell-script","published":1,"updated":"2018-05-13T07:40:36.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh4njkcy00121sufvl9vsgnj","content":"<p>注释或恢复 /dev/sda2            /media/video1            ext4    defaults    0 0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">fstab=<span class=\"string\">\"fstab\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> removefs()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">targetfile=<span class=\"string\">\"<span class=\"variable\">$fstab</span>\"</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s/^\\(\\/dev\\/sd.*\\/media\\/video[1234].*ext4.*defaults.*\\)/\\#\\1/g'</span> <span class=\"variable\">$targetfile</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> restorefs()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">targetfile=<span class=\"string\">\"<span class=\"variable\">$fstab</span>\"</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s/^#\\(\\/dev\\/sd.*\\/media\\/video[1234].*ext4.*defaults.*\\)/\\1/g'</span> <span class=\"variable\">$targetfile</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> usage()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"./rmfstab [restore|help]\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## main entry</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">restore|reduce|r|no|not|1)</span><br><span class=\"line\">\trestorefs;;</span><br><span class=\"line\"><span class=\"built_in\">help</span>|--<span class=\"built_in\">help</span>|h|-h|0)</span><br><span class=\"line\">\tusage;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">\tremovefs;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>注释或恢复 /dev/sda2            /media/video1            ext4    defaults    0 0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">fstab=<span class=\"string\">\"fstab\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> removefs()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">targetfile=<span class=\"string\">\"<span class=\"variable\">$fstab</span>\"</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s/^\\(\\/dev\\/sd.*\\/media\\/video[1234].*ext4.*defaults.*\\)/\\#\\1/g'</span> <span class=\"variable\">$targetfile</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> restorefs()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">targetfile=<span class=\"string\">\"<span class=\"variable\">$fstab</span>\"</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s/^#\\(\\/dev\\/sd.*\\/media\\/video[1234].*ext4.*defaults.*\\)/\\1/g'</span> <span class=\"variable\">$targetfile</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> usage()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"./rmfstab [restore|help]\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## main entry</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">restore|reduce|r|no|not|1)</span><br><span class=\"line\">\trestorefs;;</span><br><span class=\"line\"><span class=\"built_in\">help</span>|--<span class=\"built_in\">help</span>|h|-h|0)</span><br><span class=\"line\">\tusage;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">\tremovefs;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"C++内存对齐","date":"2015-11-20T02:06:05.000Z","_content":"\n# 代码\n\n\t`\n\t#pragma pack(push)\n\t#pragma pack(n)\n\t#pragma pack(show)\n\tstruct A\n\t{\n\t\tchar     c;     //1byte\n\t\tdouble   d;     //8byte\n\t\tshort    s;     //2byte\n\t\tint      i;     //4byte\n\t};\n\t#pragma pack(pop)\n\t#pragma pack(show)\n\tint main(int argc, char* argv[])\n\t{\n\t\tA a;\n\t\tprintf(\"A length: %d\\n\",sizeof(A));\n\t\tprintf(\"a.c:%10d\\na.d:%10d\\na.s:%10d\\na.i:%10d\\n\",&a.c, &a.d, &a.s, &a.i);\n\t\treturn 0;\n\t}\n\t`\n# n = 1\n内存对齐的结果为1，相当于不进行内存对齐，一些协议的设计可能会迫使我们修改n为1，\n结果如下：\n\n\tA length: 15\n\ta.c:  11795164\n\ta.d:  11795165\n\ta.s:  11795173\n\ta.i:  11795175\n\n其中，这里的4913360不一定是2、4或者8的倍数。\n\n# n = 2\n结果如下：\n\n\tA length: 16\n\ta.c:  12516948\n\ta.d:  12516950\n\ta.s:  12516958\n\ta.i:  12516960\n\n# n = 3\n编译器警告：warning C4086: 杂注参数应为“1”、“2”、“4”、“8”或者“16”\n结果是：\n\n\tA length: 24\n\ta.c:   9959560\n\ta.d:   9959568\n\ta.s:   9959576\n\ta.i:   9959580\n\n所以，最好取n为2的幂（此时，编译器以默认值#pragma pack(8)对齐）\n\n# n = 4\n结果如下：\n\n\tA length: 20\n\ta.c:  12516320\n\ta.d:  12516324\n\ta.s:  12516332\n\ta.i:  12516336\n\n# n = 8\n结果如下：\n\n\tA length: 24\n\ta.c:  17300184\n\ta.d:  17300192\n\ta.s:  17300200\n\ta.i:  17300204\n\n# 当注释内存对齐指令时\n//#pragma   pack(n)\n\n结果\n\n\tA length: 24\n\ta.c:   8453680\n\ta.d:   8453688\n\ta.s:   8453696\n\ta.i:   8453700\n\n所以 如果不指定内存对齐，或者内存对齐不是2的幂次时，\n编译器给出默认值 \n`#pragma   pack(8)`\n另外，当n取值不合适时，可能需要2次寻址\n\n注：\n\nWindows 8.1 Pro x64 bit\n\n用于 80x86 的 Microsoft (R) 32 位 C/C++ 优化编译器 16.00.30319.01 版\n","source":"_posts/2015-11-20-C++内存对齐.md","raw":"---\nlayout: post\ntitle: C++内存对齐\ndate: 2015-11-20 10:06:05\ncategories: 未分类\n---\n\n# 代码\n\n\t`\n\t#pragma pack(push)\n\t#pragma pack(n)\n\t#pragma pack(show)\n\tstruct A\n\t{\n\t\tchar     c;     //1byte\n\t\tdouble   d;     //8byte\n\t\tshort    s;     //2byte\n\t\tint      i;     //4byte\n\t};\n\t#pragma pack(pop)\n\t#pragma pack(show)\n\tint main(int argc, char* argv[])\n\t{\n\t\tA a;\n\t\tprintf(\"A length: %d\\n\",sizeof(A));\n\t\tprintf(\"a.c:%10d\\na.d:%10d\\na.s:%10d\\na.i:%10d\\n\",&a.c, &a.d, &a.s, &a.i);\n\t\treturn 0;\n\t}\n\t`\n# n = 1\n内存对齐的结果为1，相当于不进行内存对齐，一些协议的设计可能会迫使我们修改n为1，\n结果如下：\n\n\tA length: 15\n\ta.c:  11795164\n\ta.d:  11795165\n\ta.s:  11795173\n\ta.i:  11795175\n\n其中，这里的4913360不一定是2、4或者8的倍数。\n\n# n = 2\n结果如下：\n\n\tA length: 16\n\ta.c:  12516948\n\ta.d:  12516950\n\ta.s:  12516958\n\ta.i:  12516960\n\n# n = 3\n编译器警告：warning C4086: 杂注参数应为“1”、“2”、“4”、“8”或者“16”\n结果是：\n\n\tA length: 24\n\ta.c:   9959560\n\ta.d:   9959568\n\ta.s:   9959576\n\ta.i:   9959580\n\n所以，最好取n为2的幂（此时，编译器以默认值#pragma pack(8)对齐）\n\n# n = 4\n结果如下：\n\n\tA length: 20\n\ta.c:  12516320\n\ta.d:  12516324\n\ta.s:  12516332\n\ta.i:  12516336\n\n# n = 8\n结果如下：\n\n\tA length: 24\n\ta.c:  17300184\n\ta.d:  17300192\n\ta.s:  17300200\n\ta.i:  17300204\n\n# 当注释内存对齐指令时\n//#pragma   pack(n)\n\n结果\n\n\tA length: 24\n\ta.c:   8453680\n\ta.d:   8453688\n\ta.s:   8453696\n\ta.i:   8453700\n\n所以 如果不指定内存对齐，或者内存对齐不是2的幂次时，\n编译器给出默认值 \n`#pragma   pack(8)`\n另外，当n取值不合适时，可能需要2次寻址\n\n注：\n\nWindows 8.1 Pro x64 bit\n\n用于 80x86 的 Microsoft (R) 32 位 C/C++ 优化编译器 16.00.30319.01 版\n","slug":"2015-11-20-C++内存对齐","published":1,"updated":"2018-05-13T07:40:36.352Z","comments":1,"photos":[],"link":"","_id":"cjh4njkcy00141sufwbjmlv1a","content":"<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><pre><code>`\n#pragma pack(push)\n#pragma pack(n)\n#pragma pack(show)\nstruct A\n{\n    char     c;     //1byte\n    double   d;     //8byte\n    short    s;     //2byte\n    int      i;     //4byte\n};\n#pragma pack(pop)\n#pragma pack(show)\nint main(int argc, char* argv[])\n{\n    A a;\n    printf(&quot;A length: %d\\n&quot;,sizeof(A));\n    printf(&quot;a.c:%10d\\na.d:%10d\\na.s:%10d\\na.i:%10d\\n&quot;,&amp;a.c, &amp;a.d, &amp;a.s, &amp;a.i);\n    return 0;\n}\n`\n</code></pre><h1 id=\"n-1\"><a href=\"#n-1\" class=\"headerlink\" title=\"n = 1\"></a>n = 1</h1><p>内存对齐的结果为1，相当于不进行内存对齐，一些协议的设计可能会迫使我们修改n为1，<br>结果如下：</p>\n<pre><code>A length: 15\na.c:  11795164\na.d:  11795165\na.s:  11795173\na.i:  11795175\n</code></pre><p>其中，这里的4913360不一定是2、4或者8的倍数。</p>\n<h1 id=\"n-2\"><a href=\"#n-2\" class=\"headerlink\" title=\"n = 2\"></a>n = 2</h1><p>结果如下：</p>\n<pre><code>A length: 16\na.c:  12516948\na.d:  12516950\na.s:  12516958\na.i:  12516960\n</code></pre><h1 id=\"n-3\"><a href=\"#n-3\" class=\"headerlink\" title=\"n = 3\"></a>n = 3</h1><p>编译器警告：warning C4086: 杂注参数应为“1”、“2”、“4”、“8”或者“16”<br>结果是：</p>\n<pre><code>A length: 24\na.c:   9959560\na.d:   9959568\na.s:   9959576\na.i:   9959580\n</code></pre><p>所以，最好取n为2的幂（此时，编译器以默认值#pragma pack(8)对齐）</p>\n<h1 id=\"n-4\"><a href=\"#n-4\" class=\"headerlink\" title=\"n = 4\"></a>n = 4</h1><p>结果如下：</p>\n<pre><code>A length: 20\na.c:  12516320\na.d:  12516324\na.s:  12516332\na.i:  12516336\n</code></pre><h1 id=\"n-8\"><a href=\"#n-8\" class=\"headerlink\" title=\"n = 8\"></a>n = 8</h1><p>结果如下：</p>\n<pre><code>A length: 24\na.c:  17300184\na.d:  17300192\na.s:  17300200\na.i:  17300204\n</code></pre><h1 id=\"当注释内存对齐指令时\"><a href=\"#当注释内存对齐指令时\" class=\"headerlink\" title=\"当注释内存对齐指令时\"></a>当注释内存对齐指令时</h1><p>//#pragma   pack(n)</p>\n<p>结果</p>\n<pre><code>A length: 24\na.c:   8453680\na.d:   8453688\na.s:   8453696\na.i:   8453700\n</code></pre><p>所以 如果不指定内存对齐，或者内存对齐不是2的幂次时，<br>编译器给出默认值<br><code>#pragma   pack(8)</code><br>另外，当n取值不合适时，可能需要2次寻址</p>\n<p>注：</p>\n<p>Windows 8.1 Pro x64 bit</p>\n<p>用于 80x86 的 Microsoft (R) 32 位 C/C++ 优化编译器 16.00.30319.01 版</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><pre><code>`\n#pragma pack(push)\n#pragma pack(n)\n#pragma pack(show)\nstruct A\n{\n    char     c;     //1byte\n    double   d;     //8byte\n    short    s;     //2byte\n    int      i;     //4byte\n};\n#pragma pack(pop)\n#pragma pack(show)\nint main(int argc, char* argv[])\n{\n    A a;\n    printf(&quot;A length: %d\\n&quot;,sizeof(A));\n    printf(&quot;a.c:%10d\\na.d:%10d\\na.s:%10d\\na.i:%10d\\n&quot;,&amp;a.c, &amp;a.d, &amp;a.s, &amp;a.i);\n    return 0;\n}\n`\n</code></pre><h1 id=\"n-1\"><a href=\"#n-1\" class=\"headerlink\" title=\"n = 1\"></a>n = 1</h1><p>内存对齐的结果为1，相当于不进行内存对齐，一些协议的设计可能会迫使我们修改n为1，<br>结果如下：</p>\n<pre><code>A length: 15\na.c:  11795164\na.d:  11795165\na.s:  11795173\na.i:  11795175\n</code></pre><p>其中，这里的4913360不一定是2、4或者8的倍数。</p>\n<h1 id=\"n-2\"><a href=\"#n-2\" class=\"headerlink\" title=\"n = 2\"></a>n = 2</h1><p>结果如下：</p>\n<pre><code>A length: 16\na.c:  12516948\na.d:  12516950\na.s:  12516958\na.i:  12516960\n</code></pre><h1 id=\"n-3\"><a href=\"#n-3\" class=\"headerlink\" title=\"n = 3\"></a>n = 3</h1><p>编译器警告：warning C4086: 杂注参数应为“1”、“2”、“4”、“8”或者“16”<br>结果是：</p>\n<pre><code>A length: 24\na.c:   9959560\na.d:   9959568\na.s:   9959576\na.i:   9959580\n</code></pre><p>所以，最好取n为2的幂（此时，编译器以默认值#pragma pack(8)对齐）</p>\n<h1 id=\"n-4\"><a href=\"#n-4\" class=\"headerlink\" title=\"n = 4\"></a>n = 4</h1><p>结果如下：</p>\n<pre><code>A length: 20\na.c:  12516320\na.d:  12516324\na.s:  12516332\na.i:  12516336\n</code></pre><h1 id=\"n-8\"><a href=\"#n-8\" class=\"headerlink\" title=\"n = 8\"></a>n = 8</h1><p>结果如下：</p>\n<pre><code>A length: 24\na.c:  17300184\na.d:  17300192\na.s:  17300200\na.i:  17300204\n</code></pre><h1 id=\"当注释内存对齐指令时\"><a href=\"#当注释内存对齐指令时\" class=\"headerlink\" title=\"当注释内存对齐指令时\"></a>当注释内存对齐指令时</h1><p>//#pragma   pack(n)</p>\n<p>结果</p>\n<pre><code>A length: 24\na.c:   8453680\na.d:   8453688\na.s:   8453696\na.i:   8453700\n</code></pre><p>所以 如果不指定内存对齐，或者内存对齐不是2的幂次时，<br>编译器给出默认值<br><code>#pragma   pack(8)</code><br>另外，当n取值不合适时，可能需要2次寻址</p>\n<p>注：</p>\n<p>Windows 8.1 Pro x64 bit</p>\n<p>用于 80x86 的 Microsoft (R) 32 位 C/C++ 优化编译器 16.00.30319.01 版</p>\n"},{"layout":"post","title":"CentOS 升级 Python 整理记录","date":"2016-07-28T01:46:14.000Z","_content":"\nCentOS 升级 Python 整理记录\n\n\tCentOS 版本: 6.0 (x64)\n\tPython 原版本： 2.6.5\n\tPython 升级版本：2.7.12\n\tPython 2.7.12 链接： https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\n\n执行过程\n\n\t# 预先准备\n\tcd /usr/bin\n\tpython --version\n\n\t# 拷贝 python2.6.5 副本\n\tcp python python2.6.5  # 安全起见(1)\n\n\t# 修改下述三个文件开头, 指定 python 解释器为 /usr/bin/python2.6.5\n\t# 原因是它们不支持 python27\n\tvim /usr/bin/yum\n\tvim /usr/bin/ibus-setup\n\tvim /usr/libexec/ibus-ui-gtk\n\n\t# 下载安装\n\twget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\n\ttar xf Python-2.7.12.tar.xz\n\tcd Python-2.7.12\n\t./configure\n\tmake all\n\tmake install\n\tmake clean\n\tmake distclean\n\t/usr/local/bin/python2.7 --version\n\trm /usr/bin/python # 呼应上文命令(1)\n\tln -s /usr/local/bin/python2.7 /usr/bin/python\n\n\t# 安装后\n\t## 修复 或 安装 pip\n\tyum install python-pip\n\tpip install --upgrade setuptools\n\twget --no-check-certificate  https://raw.github.com/pypa/pip/master/contrib/get-pip.py # 命令(3)\n\twget --no-check-certificate  https://bootstrap.pypa.io/get-pip.py                      # 命令(4)\n\n\t# 尝试运行 命令 (3, 4) 下载的脚本, 至此 pip 修复完成 \n\tpython get-pip.py\n\tpip --version\n\tpip install bs4\n\tpip install requests\n\n\t# 小工具\n\tyum install dos2unix lrzsz\n","source":"_posts/2016-07-28-centos_upgrade_python.md","raw":"---\nlayout: post\ntitle: CentOS 升级 Python 整理记录\ndate: 2016-07-28 09:46:14\ncategories: Unclassified\n---\n\nCentOS 升级 Python 整理记录\n\n\tCentOS 版本: 6.0 (x64)\n\tPython 原版本： 2.6.5\n\tPython 升级版本：2.7.12\n\tPython 2.7.12 链接： https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\n\n执行过程\n\n\t# 预先准备\n\tcd /usr/bin\n\tpython --version\n\n\t# 拷贝 python2.6.5 副本\n\tcp python python2.6.5  # 安全起见(1)\n\n\t# 修改下述三个文件开头, 指定 python 解释器为 /usr/bin/python2.6.5\n\t# 原因是它们不支持 python27\n\tvim /usr/bin/yum\n\tvim /usr/bin/ibus-setup\n\tvim /usr/libexec/ibus-ui-gtk\n\n\t# 下载安装\n\twget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\n\ttar xf Python-2.7.12.tar.xz\n\tcd Python-2.7.12\n\t./configure\n\tmake all\n\tmake install\n\tmake clean\n\tmake distclean\n\t/usr/local/bin/python2.7 --version\n\trm /usr/bin/python # 呼应上文命令(1)\n\tln -s /usr/local/bin/python2.7 /usr/bin/python\n\n\t# 安装后\n\t## 修复 或 安装 pip\n\tyum install python-pip\n\tpip install --upgrade setuptools\n\twget --no-check-certificate  https://raw.github.com/pypa/pip/master/contrib/get-pip.py # 命令(3)\n\twget --no-check-certificate  https://bootstrap.pypa.io/get-pip.py                      # 命令(4)\n\n\t# 尝试运行 命令 (3, 4) 下载的脚本, 至此 pip 修复完成 \n\tpython get-pip.py\n\tpip --version\n\tpip install bs4\n\tpip install requests\n\n\t# 小工具\n\tyum install dos2unix lrzsz\n","slug":"2016-07-28-centos_upgrade_python","published":1,"updated":"2018-05-13T07:40:36.354Z","comments":1,"photos":[],"link":"","_id":"cjh4njkcy00191sufl5gr27mw","content":"<p>CentOS 升级 Python 整理记录</p>\n<pre><code>CentOS 版本: 6.0 (x64)\nPython 原版本： 2.6.5\nPython 升级版本：2.7.12\nPython 2.7.12 链接： https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\n</code></pre><p>执行过程</p>\n<pre><code># 预先准备\ncd /usr/bin\npython --version\n\n# 拷贝 python2.6.5 副本\ncp python python2.6.5  # 安全起见(1)\n\n# 修改下述三个文件开头, 指定 python 解释器为 /usr/bin/python2.6.5\n# 原因是它们不支持 python27\nvim /usr/bin/yum\nvim /usr/bin/ibus-setup\nvim /usr/libexec/ibus-ui-gtk\n\n# 下载安装\nwget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\ntar xf Python-2.7.12.tar.xz\ncd Python-2.7.12\n./configure\nmake all\nmake install\nmake clean\nmake distclean\n/usr/local/bin/python2.7 --version\nrm /usr/bin/python # 呼应上文命令(1)\nln -s /usr/local/bin/python2.7 /usr/bin/python\n\n# 安装后\n## 修复 或 安装 pip\nyum install python-pip\npip install --upgrade setuptools\nwget --no-check-certificate  https://raw.github.com/pypa/pip/master/contrib/get-pip.py # 命令(3)\nwget --no-check-certificate  https://bootstrap.pypa.io/get-pip.py                      # 命令(4)\n\n# 尝试运行 命令 (3, 4) 下载的脚本, 至此 pip 修复完成 \npython get-pip.py\npip --version\npip install bs4\npip install requests\n\n# 小工具\nyum install dos2unix lrzsz\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>CentOS 升级 Python 整理记录</p>\n<pre><code>CentOS 版本: 6.0 (x64)\nPython 原版本： 2.6.5\nPython 升级版本：2.7.12\nPython 2.7.12 链接： https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\n</code></pre><p>执行过程</p>\n<pre><code># 预先准备\ncd /usr/bin\npython --version\n\n# 拷贝 python2.6.5 副本\ncp python python2.6.5  # 安全起见(1)\n\n# 修改下述三个文件开头, 指定 python 解释器为 /usr/bin/python2.6.5\n# 原因是它们不支持 python27\nvim /usr/bin/yum\nvim /usr/bin/ibus-setup\nvim /usr/libexec/ibus-ui-gtk\n\n# 下载安装\nwget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\ntar xf Python-2.7.12.tar.xz\ncd Python-2.7.12\n./configure\nmake all\nmake install\nmake clean\nmake distclean\n/usr/local/bin/python2.7 --version\nrm /usr/bin/python # 呼应上文命令(1)\nln -s /usr/local/bin/python2.7 /usr/bin/python\n\n# 安装后\n## 修复 或 安装 pip\nyum install python-pip\npip install --upgrade setuptools\nwget --no-check-certificate  https://raw.github.com/pypa/pip/master/contrib/get-pip.py # 命令(3)\nwget --no-check-certificate  https://bootstrap.pypa.io/get-pip.py                      # 命令(4)\n\n# 尝试运行 命令 (3, 4) 下载的脚本, 至此 pip 修复完成 \npython get-pip.py\npip --version\npip install bs4\npip install requests\n\n# 小工具\nyum install dos2unix lrzsz\n</code></pre>"},{"layout":"post","title":"单引号'字符串'","date":"2016-08-29T02:23:40.000Z","_content":"\n阅读项目发现的一段代码\n\t\n\tstruct PACK_HEAD // 新结构，与类型长度无关\n\t{\n\t\tULONG synch   :16;\t\t//同步字节\n\t\tULONG version : 8;\t\t//协议版本\n\t\tULONG type    : 8;\t\t//包类型\n\t\tULONG sn      :32;\t\t//包序列号\n\t\tULONG fun     :32;\t\t//主功能号\n\t\tULONG sub     :32;\t\t//子功能号\n\t\tULONG datalen :32;\t\t//数据域总长\n\t\tULONG retcode :32;\t\t//返回码\n\t\tULONG total   :16;\t\t//包的分片总数\n\t\tULONG index   :16;\t\t//包的分片序号,从0开始\n\t\tULONG patch   :24;\t\t//补位字节,使结构长度适应4字节对齐方式\n\t\tULONG checksum: 8;\t\t//异或校验和\n\t} m_head;\n\t...\n\tif(this->m_head.sub == 'REC')  \t\t\t\n\t{\n\t\tWriteDebugLog(\"录像查询: [%s]\", pTask->m_body.data);\t\n\t\t\ttodo_other(...);\t\t\t\n\t}\n\n\tthis->m_head.sub == 'REC' 这句是什么意思\n\t'REC' 是什么类型\n\n查询资料得知这是一种数据表示，测试代码如下\n\n\t#include <cstdio>\n\t#include <cstdlib>\n\t#include <ctime>\n\n\t#define WriteErrorLog(format, ...) \\\n\t\tdo {\\\n\t\ttime_t nowtime = time(NULL); struct tm* local = localtime(&nowtime); char timestramp[80] = {0}; strftime(timestramp, 80, \"%Y-%m-%d %H:%M:%S\", local);\\\n\t\tfprintf(stderr, \"%s [ERROR] %s(%d): \"format\"\\n\", timestramp, __FUNCTION__ , __LINE__, __VA_ARGS__); \\\n\t\t} while(0)\n\n\n\tint main()\n\t{\t\n\t\tint ab = 'AB';\n\t\tint a = 'A';\n\t\tint b = 'B';\n\t\tint a_b = ('A' << 8) + 'B';\n\n\t\tWriteErrorLog(\"A:%d, B:%d\", a, b);\n\t\tWriteErrorLog(\"ab: %d\", ab);\n\t\tWriteErrorLog(\"a_b: %d\", a_b);\n\n\t\tsystem(\"pause\");\n\t\treturn 0;\n\t}\n\t\n![cmd](20160829101359.png, \"cmd\")\n\t\n'AB' 与 12 类比:\n\n\t'AB' 表示  'A' * 2^8 + 'B'\n\t12   表示 1 * 10^1 + 2\n\t\n注意\n\n\tdata_type var = 'ABCD';\n\t这里 'ABCD' 需要在 data_type (char short int long) 的取值范围内, 不可越界.","source":"_posts/2016-08-29-单引号’字符串‘.md","raw":"---\nlayout: post\ntitle: 单引号'字符串'\ndate: 2016-08-29 10:23:40\ncategories: Unclassified\n---\n\n阅读项目发现的一段代码\n\t\n\tstruct PACK_HEAD // 新结构，与类型长度无关\n\t{\n\t\tULONG synch   :16;\t\t//同步字节\n\t\tULONG version : 8;\t\t//协议版本\n\t\tULONG type    : 8;\t\t//包类型\n\t\tULONG sn      :32;\t\t//包序列号\n\t\tULONG fun     :32;\t\t//主功能号\n\t\tULONG sub     :32;\t\t//子功能号\n\t\tULONG datalen :32;\t\t//数据域总长\n\t\tULONG retcode :32;\t\t//返回码\n\t\tULONG total   :16;\t\t//包的分片总数\n\t\tULONG index   :16;\t\t//包的分片序号,从0开始\n\t\tULONG patch   :24;\t\t//补位字节,使结构长度适应4字节对齐方式\n\t\tULONG checksum: 8;\t\t//异或校验和\n\t} m_head;\n\t...\n\tif(this->m_head.sub == 'REC')  \t\t\t\n\t{\n\t\tWriteDebugLog(\"录像查询: [%s]\", pTask->m_body.data);\t\n\t\t\ttodo_other(...);\t\t\t\n\t}\n\n\tthis->m_head.sub == 'REC' 这句是什么意思\n\t'REC' 是什么类型\n\n查询资料得知这是一种数据表示，测试代码如下\n\n\t#include <cstdio>\n\t#include <cstdlib>\n\t#include <ctime>\n\n\t#define WriteErrorLog(format, ...) \\\n\t\tdo {\\\n\t\ttime_t nowtime = time(NULL); struct tm* local = localtime(&nowtime); char timestramp[80] = {0}; strftime(timestramp, 80, \"%Y-%m-%d %H:%M:%S\", local);\\\n\t\tfprintf(stderr, \"%s [ERROR] %s(%d): \"format\"\\n\", timestramp, __FUNCTION__ , __LINE__, __VA_ARGS__); \\\n\t\t} while(0)\n\n\n\tint main()\n\t{\t\n\t\tint ab = 'AB';\n\t\tint a = 'A';\n\t\tint b = 'B';\n\t\tint a_b = ('A' << 8) + 'B';\n\n\t\tWriteErrorLog(\"A:%d, B:%d\", a, b);\n\t\tWriteErrorLog(\"ab: %d\", ab);\n\t\tWriteErrorLog(\"a_b: %d\", a_b);\n\n\t\tsystem(\"pause\");\n\t\treturn 0;\n\t}\n\t\n![cmd](20160829101359.png, \"cmd\")\n\t\n'AB' 与 12 类比:\n\n\t'AB' 表示  'A' * 2^8 + 'B'\n\t12   表示 1 * 10^1 + 2\n\t\n注意\n\n\tdata_type var = 'ABCD';\n\t这里 'ABCD' 需要在 data_type (char short int long) 的取值范围内, 不可越界.","slug":"2016-08-29-单引号’字符串‘","published":1,"updated":"2018-05-13T07:40:36.354Z","comments":1,"photos":[],"link":"","_id":"cjh4njkcy001b1sufpy72maor","content":"<p>阅读项目发现的一段代码</p>\n<pre><code>struct PACK_HEAD // 新结构，与类型长度无关\n{\n    ULONG synch   :16;        //同步字节\n    ULONG version : 8;        //协议版本\n    ULONG type    : 8;        //包类型\n    ULONG sn      :32;        //包序列号\n    ULONG fun     :32;        //主功能号\n    ULONG sub     :32;        //子功能号\n    ULONG datalen :32;        //数据域总长\n    ULONG retcode :32;        //返回码\n    ULONG total   :16;        //包的分片总数\n    ULONG index   :16;        //包的分片序号,从0开始\n    ULONG patch   :24;        //补位字节,使结构长度适应4字节对齐方式\n    ULONG checksum: 8;        //异或校验和\n} m_head;\n...\nif(this-&gt;m_head.sub == &apos;REC&apos;)              \n{\n    WriteDebugLog(&quot;录像查询: [%s]&quot;, pTask-&gt;m_body.data);    \n        todo_other(...);            \n}\n\nthis-&gt;m_head.sub == &apos;REC&apos; 这句是什么意思\n&apos;REC&apos; 是什么类型\n</code></pre><p>查询资料得知这是一种数据表示，测试代码如下</p>\n<pre><code>#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;ctime&gt;\n\n#define WriteErrorLog(format, ...) \\\n    do {\\\n    time_t nowtime = time(NULL); struct tm* local = localtime(&amp;nowtime); char timestramp[80] = {0}; strftime(timestramp, 80, &quot;%Y-%m-%d %H:%M:%S&quot;, local);\\\n    fprintf(stderr, &quot;%s [ERROR] %s(%d): &quot;format&quot;\\n&quot;, timestramp, __FUNCTION__ , __LINE__, __VA_ARGS__); \\\n    } while(0)\n\n\nint main()\n{    \n    int ab = &apos;AB&apos;;\n    int a = &apos;A&apos;;\n    int b = &apos;B&apos;;\n    int a_b = (&apos;A&apos; &lt;&lt; 8) + &apos;B&apos;;\n\n    WriteErrorLog(&quot;A:%d, B:%d&quot;, a, b);\n    WriteErrorLog(&quot;ab: %d&quot;, ab);\n    WriteErrorLog(&quot;a_b: %d&quot;, a_b);\n\n    system(&quot;pause&quot;);\n    return 0;\n}\n</code></pre><p><img src=\"20160829101359.png,\" alt=\"cmd\" title=\"cmd\"></p>\n<p>‘AB’ 与 12 类比:</p>\n<pre><code>&apos;AB&apos; 表示  &apos;A&apos; * 2^8 + &apos;B&apos;\n12   表示 1 * 10^1 + 2\n</code></pre><p>注意</p>\n<pre><code>data_type var = &apos;ABCD&apos;;\n这里 &apos;ABCD&apos; 需要在 data_type (char short int long) 的取值范围内, 不可越界.\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>阅读项目发现的一段代码</p>\n<pre><code>struct PACK_HEAD // 新结构，与类型长度无关\n{\n    ULONG synch   :16;        //同步字节\n    ULONG version : 8;        //协议版本\n    ULONG type    : 8;        //包类型\n    ULONG sn      :32;        //包序列号\n    ULONG fun     :32;        //主功能号\n    ULONG sub     :32;        //子功能号\n    ULONG datalen :32;        //数据域总长\n    ULONG retcode :32;        //返回码\n    ULONG total   :16;        //包的分片总数\n    ULONG index   :16;        //包的分片序号,从0开始\n    ULONG patch   :24;        //补位字节,使结构长度适应4字节对齐方式\n    ULONG checksum: 8;        //异或校验和\n} m_head;\n...\nif(this-&gt;m_head.sub == &apos;REC&apos;)              \n{\n    WriteDebugLog(&quot;录像查询: [%s]&quot;, pTask-&gt;m_body.data);    \n        todo_other(...);            \n}\n\nthis-&gt;m_head.sub == &apos;REC&apos; 这句是什么意思\n&apos;REC&apos; 是什么类型\n</code></pre><p>查询资料得知这是一种数据表示，测试代码如下</p>\n<pre><code>#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;ctime&gt;\n\n#define WriteErrorLog(format, ...) \\\n    do {\\\n    time_t nowtime = time(NULL); struct tm* local = localtime(&amp;nowtime); char timestramp[80] = {0}; strftime(timestramp, 80, &quot;%Y-%m-%d %H:%M:%S&quot;, local);\\\n    fprintf(stderr, &quot;%s [ERROR] %s(%d): &quot;format&quot;\\n&quot;, timestramp, __FUNCTION__ , __LINE__, __VA_ARGS__); \\\n    } while(0)\n\n\nint main()\n{    \n    int ab = &apos;AB&apos;;\n    int a = &apos;A&apos;;\n    int b = &apos;B&apos;;\n    int a_b = (&apos;A&apos; &lt;&lt; 8) + &apos;B&apos;;\n\n    WriteErrorLog(&quot;A:%d, B:%d&quot;, a, b);\n    WriteErrorLog(&quot;ab: %d&quot;, ab);\n    WriteErrorLog(&quot;a_b: %d&quot;, a_b);\n\n    system(&quot;pause&quot;);\n    return 0;\n}\n</code></pre><p><img src=\"20160829101359.png,\" alt=\"cmd\" title=\"cmd\"></p>\n<p>‘AB’ 与 12 类比:</p>\n<pre><code>&apos;AB&apos; 表示  &apos;A&apos; * 2^8 + &apos;B&apos;\n12   表示 1 * 10^1 + 2\n</code></pre><p>注意</p>\n<pre><code>data_type var = &apos;ABCD&apos;;\n这里 &apos;ABCD&apos; 需要在 data_type (char short int long) 的取值范围内, 不可越界.\n</code></pre>"},{"layout":"post","title":"C++中set和get的简单方式","date":"2016-01-18T02:46:05.000Z","_content":"\n在C#中, 有比较通用的set和get, 在C++中可以使用引用和访问限制符来简单处理,   具体如下\n\n\t`\n\t#define SUCCESS 1 // #define SUCCESS 1\n\t#define FAIL 0 // #define FAIL 0\n\t#include <iostream>\n\tint add(int a, int b) { return a + b; }\n\tclass A\n\t{\n\tprivate:\n\t\tint a_;\n\t\tint b_;\n\tpublic:\n\t\tconst int& a;\n\t\tconst int& b;\n\tpublic:\n\t\tint x_;\n\t\tint y_;\n\t\tconst int& x;\n\t\tconst int& y;\n\t\tA()\n\t\t: a_(0), b_(0), x_(0), y_(0)\n\t\t, a(a_), b(b_), x(x_), y(y_)\n\t\t{}\n\t\t\n\t\tvoid print() { \n\t\t\tstd::cout << \"  a=\" << a << \", a_=\" << a_ \n\t\t\t\t  << \", b=\" << b << \", b_=\" << b_\n\t\t\t\t  << \", x=\" << x << \", x_=\" << x_\n\t\t\t\t  << \", y=\" << y << \", y_=\" << y_\n\t                          << \".\\n\";\n\t\t}\n\t};\n\n\tint  main()\n\t{\n\t\tint result = add(SUCCESS, FAIL);\n\t\tA a;\n\t\ta.x_ = 4;\t// (1) \n\t\t//a.x = 5;\t// (2) \n\t\t//a.a_ = 3; // (3)\n\t\t//a.a = 5;  // (4)\n\t\ta.y_ = a.x; // (5)\n\t\t// a.y = a.x; // (6)\n\t\t// a.a = a.y; // (7)\t\n\t\ta.print();\n\t\treturn 0;\n\t}\n\t`\n其中,\n\n(1) `public int x_`, 跟全局变量的访问一样  \n(2) `a.x` 为 `public int&` 类型, 指向`public int x_`, 这里相当于 `set`  \n(3) error, `private int a_` 尝试修改私有变量的值  \n(4) error, `public const int& y` 尝试修改`const`变量  \n(5) `a.x` 相当于`get`, 并修改 `y_`  \n(6) `error`, `public const int& y` 尝试修改`const`变量  \n(7) `error`, `a.x` 相当于`get`, `a.a` 尝试修改`const`变量  \n\n对此，如果一个变量 `var` 是只读的，但是在对象构造时需要赋值, 可以参照如下方式\n\n\tclass A \n\t{\n\tprivate:\n\t\tint var_;\n\tpublic:\n\t\tconst int& var;\n\tpublic:\n\t\tA(int a):var_(a){}\n\t\tFoo() { /*process var_*/ }\n\t};\n\n于是, 在初始化是可以 `A a(5)`, 在`a`的内部, 仍然可以对 `var_` 做任何处理, 使用时 `a.var`, 而不必考虑`var`被外界修改的问题.\n\n(完)\n\n","source":"_posts/2016-1-18-C++中set和get的简单方式.md","raw":"---\nlayout: post\ntitle: C++中set和get的简单方式\ndate: 2016-1-18 10:46:05\ncategories: Unclassified\n---\n\n在C#中, 有比较通用的set和get, 在C++中可以使用引用和访问限制符来简单处理,   具体如下\n\n\t`\n\t#define SUCCESS 1 // #define SUCCESS 1\n\t#define FAIL 0 // #define FAIL 0\n\t#include <iostream>\n\tint add(int a, int b) { return a + b; }\n\tclass A\n\t{\n\tprivate:\n\t\tint a_;\n\t\tint b_;\n\tpublic:\n\t\tconst int& a;\n\t\tconst int& b;\n\tpublic:\n\t\tint x_;\n\t\tint y_;\n\t\tconst int& x;\n\t\tconst int& y;\n\t\tA()\n\t\t: a_(0), b_(0), x_(0), y_(0)\n\t\t, a(a_), b(b_), x(x_), y(y_)\n\t\t{}\n\t\t\n\t\tvoid print() { \n\t\t\tstd::cout << \"  a=\" << a << \", a_=\" << a_ \n\t\t\t\t  << \", b=\" << b << \", b_=\" << b_\n\t\t\t\t  << \", x=\" << x << \", x_=\" << x_\n\t\t\t\t  << \", y=\" << y << \", y_=\" << y_\n\t                          << \".\\n\";\n\t\t}\n\t};\n\n\tint  main()\n\t{\n\t\tint result = add(SUCCESS, FAIL);\n\t\tA a;\n\t\ta.x_ = 4;\t// (1) \n\t\t//a.x = 5;\t// (2) \n\t\t//a.a_ = 3; // (3)\n\t\t//a.a = 5;  // (4)\n\t\ta.y_ = a.x; // (5)\n\t\t// a.y = a.x; // (6)\n\t\t// a.a = a.y; // (7)\t\n\t\ta.print();\n\t\treturn 0;\n\t}\n\t`\n其中,\n\n(1) `public int x_`, 跟全局变量的访问一样  \n(2) `a.x` 为 `public int&` 类型, 指向`public int x_`, 这里相当于 `set`  \n(3) error, `private int a_` 尝试修改私有变量的值  \n(4) error, `public const int& y` 尝试修改`const`变量  \n(5) `a.x` 相当于`get`, 并修改 `y_`  \n(6) `error`, `public const int& y` 尝试修改`const`变量  \n(7) `error`, `a.x` 相当于`get`, `a.a` 尝试修改`const`变量  \n\n对此，如果一个变量 `var` 是只读的，但是在对象构造时需要赋值, 可以参照如下方式\n\n\tclass A \n\t{\n\tprivate:\n\t\tint var_;\n\tpublic:\n\t\tconst int& var;\n\tpublic:\n\t\tA(int a):var_(a){}\n\t\tFoo() { /*process var_*/ }\n\t};\n\n于是, 在初始化是可以 `A a(5)`, 在`a`的内部, 仍然可以对 `var_` 做任何处理, 使用时 `a.var`, 而不必考虑`var`被外界修改的问题.\n\n(完)\n\n","slug":"2016-1-18-C++中set和get的简单方式","published":1,"updated":"2018-05-13T07:40:36.356Z","comments":1,"photos":[],"link":"","_id":"cjh4njkcy001f1suf0v92e2ls","content":"<p>在C#中, 有比较通用的set和get, 在C++中可以使用引用和访问限制符来简单处理,   具体如下</p>\n<pre><code>`\n#define SUCCESS 1 // #define SUCCESS 1\n#define FAIL 0 // #define FAIL 0\n#include &lt;iostream&gt;\nint add(int a, int b) { return a + b; }\nclass A\n{\nprivate:\n    int a_;\n    int b_;\npublic:\n    const int&amp; a;\n    const int&amp; b;\npublic:\n    int x_;\n    int y_;\n    const int&amp; x;\n    const int&amp; y;\n    A()\n    : a_(0), b_(0), x_(0), y_(0)\n    , a(a_), b(b_), x(x_), y(y_)\n    {}\n\n    void print() { \n        std::cout &lt;&lt; &quot;  a=&quot; &lt;&lt; a &lt;&lt; &quot;, a_=&quot; &lt;&lt; a_ \n              &lt;&lt; &quot;, b=&quot; &lt;&lt; b &lt;&lt; &quot;, b_=&quot; &lt;&lt; b_\n              &lt;&lt; &quot;, x=&quot; &lt;&lt; x &lt;&lt; &quot;, x_=&quot; &lt;&lt; x_\n              &lt;&lt; &quot;, y=&quot; &lt;&lt; y &lt;&lt; &quot;, y_=&quot; &lt;&lt; y_\n                          &lt;&lt; &quot;.\\n&quot;;\n    }\n};\n\nint  main()\n{\n    int result = add(SUCCESS, FAIL);\n    A a;\n    a.x_ = 4;    // (1) \n    //a.x = 5;    // (2) \n    //a.a_ = 3; // (3)\n    //a.a = 5;  // (4)\n    a.y_ = a.x; // (5)\n    // a.y = a.x; // (6)\n    // a.a = a.y; // (7)    \n    a.print();\n    return 0;\n}\n`\n</code></pre><p>其中,</p>\n<p>(1) <code>public int x_</code>, 跟全局变量的访问一样<br>(2) <code>a.x</code> 为 <code>public int&amp;</code> 类型, 指向<code>public int x_</code>, 这里相当于 <code>set</code><br>(3) error, <code>private int a_</code> 尝试修改私有变量的值<br>(4) error, <code>public const int&amp; y</code> 尝试修改<code>const</code>变量<br>(5) <code>a.x</code> 相当于<code>get</code>, 并修改 <code>y_</code><br>(6) <code>error</code>, <code>public const int&amp; y</code> 尝试修改<code>const</code>变量<br>(7) <code>error</code>, <code>a.x</code> 相当于<code>get</code>, <code>a.a</code> 尝试修改<code>const</code>变量  </p>\n<p>对此，如果一个变量 <code>var</code> 是只读的，但是在对象构造时需要赋值, 可以参照如下方式</p>\n<pre><code>class A \n{\nprivate:\n    int var_;\npublic:\n    const int&amp; var;\npublic:\n    A(int a):var_(a){}\n    Foo() { /*process var_*/ }\n};\n</code></pre><p>于是, 在初始化是可以 <code>A a(5)</code>, 在<code>a</code>的内部, 仍然可以对 <code>var_</code> 做任何处理, 使用时 <code>a.var</code>, 而不必考虑<code>var</code>被外界修改的问题.</p>\n<p>(完)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在C#中, 有比较通用的set和get, 在C++中可以使用引用和访问限制符来简单处理,   具体如下</p>\n<pre><code>`\n#define SUCCESS 1 // #define SUCCESS 1\n#define FAIL 0 // #define FAIL 0\n#include &lt;iostream&gt;\nint add(int a, int b) { return a + b; }\nclass A\n{\nprivate:\n    int a_;\n    int b_;\npublic:\n    const int&amp; a;\n    const int&amp; b;\npublic:\n    int x_;\n    int y_;\n    const int&amp; x;\n    const int&amp; y;\n    A()\n    : a_(0), b_(0), x_(0), y_(0)\n    , a(a_), b(b_), x(x_), y(y_)\n    {}\n\n    void print() { \n        std::cout &lt;&lt; &quot;  a=&quot; &lt;&lt; a &lt;&lt; &quot;, a_=&quot; &lt;&lt; a_ \n              &lt;&lt; &quot;, b=&quot; &lt;&lt; b &lt;&lt; &quot;, b_=&quot; &lt;&lt; b_\n              &lt;&lt; &quot;, x=&quot; &lt;&lt; x &lt;&lt; &quot;, x_=&quot; &lt;&lt; x_\n              &lt;&lt; &quot;, y=&quot; &lt;&lt; y &lt;&lt; &quot;, y_=&quot; &lt;&lt; y_\n                          &lt;&lt; &quot;.\\n&quot;;\n    }\n};\n\nint  main()\n{\n    int result = add(SUCCESS, FAIL);\n    A a;\n    a.x_ = 4;    // (1) \n    //a.x = 5;    // (2) \n    //a.a_ = 3; // (3)\n    //a.a = 5;  // (4)\n    a.y_ = a.x; // (5)\n    // a.y = a.x; // (6)\n    // a.a = a.y; // (7)    \n    a.print();\n    return 0;\n}\n`\n</code></pre><p>其中,</p>\n<p>(1) <code>public int x_</code>, 跟全局变量的访问一样<br>(2) <code>a.x</code> 为 <code>public int&amp;</code> 类型, 指向<code>public int x_</code>, 这里相当于 <code>set</code><br>(3) error, <code>private int a_</code> 尝试修改私有变量的值<br>(4) error, <code>public const int&amp; y</code> 尝试修改<code>const</code>变量<br>(5) <code>a.x</code> 相当于<code>get</code>, 并修改 <code>y_</code><br>(6) <code>error</code>, <code>public const int&amp; y</code> 尝试修改<code>const</code>变量<br>(7) <code>error</code>, <code>a.x</code> 相当于<code>get</code>, <code>a.a</code> 尝试修改<code>const</code>变量  </p>\n<p>对此，如果一个变量 <code>var</code> 是只读的，但是在对象构造时需要赋值, 可以参照如下方式</p>\n<pre><code>class A \n{\nprivate:\n    int var_;\npublic:\n    const int&amp; var;\npublic:\n    A(int a):var_(a){}\n    Foo() { /*process var_*/ }\n};\n</code></pre><p>于是, 在初始化是可以 <code>A a(5)</code>, 在<code>a</code>的内部, 仍然可以对 <code>var_</code> 做任何处理, 使用时 <code>a.var</code>, 而不必考虑<code>var</code>被外界修改的问题.</p>\n<p>(完)</p>\n"},{"layout":"post","title":"一种字符串序列描述","date":"2016-04-13T09:57:35.000Z","_content":"\n将两个序列\n\n    A = {1, 4, 6, 8, 9}\n    B = {10, 11, 12, ...20}\n\n转为如下形式\n\n    string a = \"1,4,6,8-9\";\n    string b = \"10-20\"; \n\n\n\n`\nQString SeriesEdit::FormatSeries(const QSet<int>& series)\n{\t\n\tQList<int> series_list = series.toList();\n\tqSort(series_list.begin(), series_list.end());\n\n\tint last = 0xffffffff;\n\tbool match = false;\n\n\tQString series_str;\n\tfor (QList<int>::iterator it = series_list.begin(); it != series_list.end(); ++it)\n\t{\n\t\tint var = *it;\n\t\tif (it == series_list.begin())\n\t\t{\n\t\t\tseries_str += QString::number(var);\n\t\t}\n\t\telse if (last + 1 == var)\n\t\t{\n\t\t\tseries_str += \"-\";\n\t\t\tmatch = true;\n\t\t}\n\t\telse if (match)\n\t\t{\t\t\t\n\t\t\tseries_str += QString::number(last) + \",\" + QString::number(var);\n\t\t\tmatch = false;\n\t\t}\t\n\t\telse\n\t\t{\n\t\t\tseries_str += \",\" + QString::number(var);\n\t\t}\n\t\tlast = *it;\n\t}\n\tif (match)\n\t{\n\t\tseries_str += QString::number(last);\n\t}\n\n\treturn series_str.split(\"-\", QString::SkipEmptyParts).join(\"-\");\n\n}\n\n`\n\n\n","source":"_posts/2016-4-13-my-string-format.md","raw":"---\nlayout: post\ntitle: 一种字符串序列描述\ndate: 2016-04-13 17:57:35\ncategories: Unclassified\n---\n\n将两个序列\n\n    A = {1, 4, 6, 8, 9}\n    B = {10, 11, 12, ...20}\n\n转为如下形式\n\n    string a = \"1,4,6,8-9\";\n    string b = \"10-20\"; \n\n\n\n`\nQString SeriesEdit::FormatSeries(const QSet<int>& series)\n{\t\n\tQList<int> series_list = series.toList();\n\tqSort(series_list.begin(), series_list.end());\n\n\tint last = 0xffffffff;\n\tbool match = false;\n\n\tQString series_str;\n\tfor (QList<int>::iterator it = series_list.begin(); it != series_list.end(); ++it)\n\t{\n\t\tint var = *it;\n\t\tif (it == series_list.begin())\n\t\t{\n\t\t\tseries_str += QString::number(var);\n\t\t}\n\t\telse if (last + 1 == var)\n\t\t{\n\t\t\tseries_str += \"-\";\n\t\t\tmatch = true;\n\t\t}\n\t\telse if (match)\n\t\t{\t\t\t\n\t\t\tseries_str += QString::number(last) + \",\" + QString::number(var);\n\t\t\tmatch = false;\n\t\t}\t\n\t\telse\n\t\t{\n\t\t\tseries_str += \",\" + QString::number(var);\n\t\t}\n\t\tlast = *it;\n\t}\n\tif (match)\n\t{\n\t\tseries_str += QString::number(last);\n\t}\n\n\treturn series_str.split(\"-\", QString::SkipEmptyParts).join(\"-\");\n\n}\n\n`\n\n\n","slug":"2016-4-13-my-string-format","published":1,"updated":"2018-05-13T07:40:36.356Z","comments":1,"photos":[],"link":"","_id":"cjh4njkcy001h1sufd7ub0vdt","content":"<p>将两个序列</p>\n<pre><code>A = {1, 4, 6, 8, 9}\nB = {10, 11, 12, ...20}\n</code></pre><p>转为如下形式</p>\n<pre><code>string a = &quot;1,4,6,8-9&quot;;\nstring b = &quot;10-20&quot;; \n</code></pre><p>`<br>QString SeriesEdit::FormatSeries(const QSet<int>&amp; series)<br>{<br>    QList<int> series_list = series.toList();<br>    qSort(series_list.begin(), series_list.end());</int></int></p>\n<pre><code>int last = 0xffffffff;\nbool match = false;\n\nQString series_str;\nfor (QList&lt;int&gt;::iterator it = series_list.begin(); it != series_list.end(); ++it)\n{\n    int var = *it;\n    if (it == series_list.begin())\n    {\n        series_str += QString::number(var);\n    }\n    else if (last + 1 == var)\n    {\n        series_str += &quot;-&quot;;\n        match = true;\n    }\n    else if (match)\n    {            \n        series_str += QString::number(last) + &quot;,&quot; + QString::number(var);\n        match = false;\n    }    \n    else\n    {\n        series_str += &quot;,&quot; + QString::number(var);\n    }\n    last = *it;\n}\nif (match)\n{\n    series_str += QString::number(last);\n}\n\nreturn series_str.split(&quot;-&quot;, QString::SkipEmptyParts).join(&quot;-&quot;);\n</code></pre><p>}</p>\n<p>`</p>\n","site":{"data":{}},"excerpt":"","more":"<p>将两个序列</p>\n<pre><code>A = {1, 4, 6, 8, 9}\nB = {10, 11, 12, ...20}\n</code></pre><p>转为如下形式</p>\n<pre><code>string a = &quot;1,4,6,8-9&quot;;\nstring b = &quot;10-20&quot;; \n</code></pre><p>`<br>QString SeriesEdit::FormatSeries(const QSet<int>&amp; series)<br>{<br>    QList<int> series_list = series.toList();<br>    qSort(series_list.begin(), series_list.end());</int></int></p>\n<pre><code>int last = 0xffffffff;\nbool match = false;\n\nQString series_str;\nfor (QList&lt;int&gt;::iterator it = series_list.begin(); it != series_list.end(); ++it)\n{\n    int var = *it;\n    if (it == series_list.begin())\n    {\n        series_str += QString::number(var);\n    }\n    else if (last + 1 == var)\n    {\n        series_str += &quot;-&quot;;\n        match = true;\n    }\n    else if (match)\n    {            \n        series_str += QString::number(last) + &quot;,&quot; + QString::number(var);\n        match = false;\n    }    \n    else\n    {\n        series_str += &quot;,&quot; + QString::number(var);\n    }\n    last = *it;\n}\nif (match)\n{\n    series_str += QString::number(last);\n}\n\nreturn series_str.split(&quot;-&quot;, QString::SkipEmptyParts).join(&quot;-&quot;);\n</code></pre><p>}</p>\n<p>`</p>\n"},{"layout":"post","title":"浏览器插件","date":"2016-06-06T04:40:05.000Z","_content":"\n\nChrome 插件\n\t\n\t1. ADfree.Player.Online\n\t一款屏蔽国内主要视频网站部分视频广告的扩展。\n\n\t2. Allow Copy\n\t解除一些网站不允许的右键复制\n\n\t3. Bookmark Manager\n\t来自 google\n\n\t4. ChaZD\n\tChaZD 查字典，简洁易用的英汉字典扩展程序，支持划词哦:)\n\n\t5. crxMouse Chrome Gestures\n\tBoost browsing productivity with your fingertips - Mouse Gestures, Super Drag, Wheel Gestures, Rocker Gestures.\n\t(不经常使用, 更多使用 vim 插件)\n\n\t6. Disconnect\n\tMake the web faster, more private, and more secure.\n\t(google 已跪, 可以使用 duckduckgo)\n\n\t7. Ghostery\n\tEnjoy a faster, safer and cleaner browsing experience.\n\t(用于屏蔽网页的一些信息跟踪)\n\n\t8. Google Art Project\n\tArt Project masterpieces from Google Cultural Institute in your browser tabs\n\t(还行)\n\n\t9. HTTPS Everywhere\n\tEncrypt the Web! Automatically use HTTPS security on many sites.\n\t(提高安全姿势)\n\n\t10. ImprovedTube - YouTube Extension\n\tImproves YouTube's functions and site with Limited Permissions. Auto HD, Resize, Annotations, Playback Speed and more.\n\t(美化youtube, 不及 Magic Actions)\n\n\t11. iReader\n\tView news stories and other articles in a very easy to read, clutter-free, scrollable display.\n\t(阅读模式)\n\n\t12. Magic Actions for YouTube™\n\tEnhance your YouTube watching experience! Auto HD, Ad Block, Cinema Mode, Mouse Wheel Volume Control, Screenshot...\n\t(更加美化youtube)\n\n\t13. Octotree\n\tCode tree for GitHub and GitLab\n\t(神器)\n\n\t14. OneTab\n\tSave up to 95% memory and reduce tab clutter\n\t(节省资源)\n\n\t15. Privacy Badger\n\tPrivacy Badger protects you from trackers as you surf the web!\n\t(隐私安全)\n\n\t16. Proxy SwitchyOmega\n\tManage and switch between multiple proxies quickly & easily.\n\t(科学上网)\n\n\t17. Redirector\n\tAutomatically redirect pages based on user-defined rules. E.g. always redirect an article url to its printer-friendly version.\n\n\t18. Remove Google Redirection\n\tProhibit click-tracking, and prevent url redirection when clicks on the result links in Google search page\n\n\t19. scroll style\n\tLike android's scroll bars .像android的滚动条\n\n\t20. StopFingerprinting\n\tFingerprinting analysis extension.\n\t(隐私安全, 不知是否有效)\n\n\t21. Stylish\n\tRestyle the web with Stylish, a user styles manager. Stylish lets you easily install themes and skins for many popular sites.\n\t(神器, 自定义 css 样式)\n\n\t22. Tampermonkey\n\tThe most popular userscript manager for Blink-based browsers\n\t(神器, 自定义 js 样式)\n\n\t23. The Great Suspender\n\tAutomatically suspends unused tabs to free up system resources\n\t(节省资源, 配合 OneTab)\n\n\t24. User-Agent Switcher for Google Chrome\n\tUser-Agent Switcher for Google Chrome switches between different user-agents.\n\n\t25. Vimium\n\tThe Hacker's Browser. Vimium provides keyboard shortcuts for navigation and control in the spirit of Vim.\n\t(神器, 已上瘾)\n\n\t26. WebRTC Leak Prevent\n\tPrevent WebRTC leaks, without blocking WebRTC.\n\t(安全, 隐藏本地IP)\n\n\t27. 买买买购物助手\n\t(还没有使用)\n\n\t28. 保护眼睛\n\t阿姆斯特朗回旋喷气式阿姆斯特朗墨镜\n\n\t29. 隐藏帖自动回复 (AutoReply 纯净版)\n\t自动回复隐藏帖 (要求已登录, 改自同名 Chrome 插件, 版权归原作者所有)\n\n\nFirefox\n\n\tACVAA\n\tAdblock Plus\n\tDisconnect\n\tDisconnect Search\n\tElement Hiding Helper for Adblock Plus\n\tFEBE\n\tFoxyProxy Standard\n\tGhostery\n\tGreasemonkey\n\tHTTPS-Everywhere\n\tNoScript\n\tOmnibar\n\tPopVideo\n\tSmartVideo For YouTube\n\tVimperator\n\t\n以下在破坏本文规则\n\nPowerShell\n\n\tposh-git\n\tPowerTab\n\tPSCX\n\tPsGet\n\tPSReadline\n\t\nZsh\n\n\tgit \n\tincr  \n\tterminitor \n\ttmux\n\tz \n\tzsh-history-substring-search\n\n","source":"_posts/2016-6-6-browser-plugin.md","raw":"---\nlayout: post\ntitle: 浏览器插件\ndate: 2016-06-06 12:40:05\ncategories: Unclassified\n---\n\n\nChrome 插件\n\t\n\t1. ADfree.Player.Online\n\t一款屏蔽国内主要视频网站部分视频广告的扩展。\n\n\t2. Allow Copy\n\t解除一些网站不允许的右键复制\n\n\t3. Bookmark Manager\n\t来自 google\n\n\t4. ChaZD\n\tChaZD 查字典，简洁易用的英汉字典扩展程序，支持划词哦:)\n\n\t5. crxMouse Chrome Gestures\n\tBoost browsing productivity with your fingertips - Mouse Gestures, Super Drag, Wheel Gestures, Rocker Gestures.\n\t(不经常使用, 更多使用 vim 插件)\n\n\t6. Disconnect\n\tMake the web faster, more private, and more secure.\n\t(google 已跪, 可以使用 duckduckgo)\n\n\t7. Ghostery\n\tEnjoy a faster, safer and cleaner browsing experience.\n\t(用于屏蔽网页的一些信息跟踪)\n\n\t8. Google Art Project\n\tArt Project masterpieces from Google Cultural Institute in your browser tabs\n\t(还行)\n\n\t9. HTTPS Everywhere\n\tEncrypt the Web! Automatically use HTTPS security on many sites.\n\t(提高安全姿势)\n\n\t10. ImprovedTube - YouTube Extension\n\tImproves YouTube's functions and site with Limited Permissions. Auto HD, Resize, Annotations, Playback Speed and more.\n\t(美化youtube, 不及 Magic Actions)\n\n\t11. iReader\n\tView news stories and other articles in a very easy to read, clutter-free, scrollable display.\n\t(阅读模式)\n\n\t12. Magic Actions for YouTube™\n\tEnhance your YouTube watching experience! Auto HD, Ad Block, Cinema Mode, Mouse Wheel Volume Control, Screenshot...\n\t(更加美化youtube)\n\n\t13. Octotree\n\tCode tree for GitHub and GitLab\n\t(神器)\n\n\t14. OneTab\n\tSave up to 95% memory and reduce tab clutter\n\t(节省资源)\n\n\t15. Privacy Badger\n\tPrivacy Badger protects you from trackers as you surf the web!\n\t(隐私安全)\n\n\t16. Proxy SwitchyOmega\n\tManage and switch between multiple proxies quickly & easily.\n\t(科学上网)\n\n\t17. Redirector\n\tAutomatically redirect pages based on user-defined rules. E.g. always redirect an article url to its printer-friendly version.\n\n\t18. Remove Google Redirection\n\tProhibit click-tracking, and prevent url redirection when clicks on the result links in Google search page\n\n\t19. scroll style\n\tLike android's scroll bars .像android的滚动条\n\n\t20. StopFingerprinting\n\tFingerprinting analysis extension.\n\t(隐私安全, 不知是否有效)\n\n\t21. Stylish\n\tRestyle the web with Stylish, a user styles manager. Stylish lets you easily install themes and skins for many popular sites.\n\t(神器, 自定义 css 样式)\n\n\t22. Tampermonkey\n\tThe most popular userscript manager for Blink-based browsers\n\t(神器, 自定义 js 样式)\n\n\t23. The Great Suspender\n\tAutomatically suspends unused tabs to free up system resources\n\t(节省资源, 配合 OneTab)\n\n\t24. User-Agent Switcher for Google Chrome\n\tUser-Agent Switcher for Google Chrome switches between different user-agents.\n\n\t25. Vimium\n\tThe Hacker's Browser. Vimium provides keyboard shortcuts for navigation and control in the spirit of Vim.\n\t(神器, 已上瘾)\n\n\t26. WebRTC Leak Prevent\n\tPrevent WebRTC leaks, without blocking WebRTC.\n\t(安全, 隐藏本地IP)\n\n\t27. 买买买购物助手\n\t(还没有使用)\n\n\t28. 保护眼睛\n\t阿姆斯特朗回旋喷气式阿姆斯特朗墨镜\n\n\t29. 隐藏帖自动回复 (AutoReply 纯净版)\n\t自动回复隐藏帖 (要求已登录, 改自同名 Chrome 插件, 版权归原作者所有)\n\n\nFirefox\n\n\tACVAA\n\tAdblock Plus\n\tDisconnect\n\tDisconnect Search\n\tElement Hiding Helper for Adblock Plus\n\tFEBE\n\tFoxyProxy Standard\n\tGhostery\n\tGreasemonkey\n\tHTTPS-Everywhere\n\tNoScript\n\tOmnibar\n\tPopVideo\n\tSmartVideo For YouTube\n\tVimperator\n\t\n以下在破坏本文规则\n\nPowerShell\n\n\tposh-git\n\tPowerTab\n\tPSCX\n\tPsGet\n\tPSReadline\n\t\nZsh\n\n\tgit \n\tincr  \n\tterminitor \n\ttmux\n\tz \n\tzsh-history-substring-search\n\n","slug":"2016-6-6-browser-plugin","published":1,"updated":"2018-05-13T07:40:36.357Z","comments":1,"photos":[],"link":"","_id":"cjh4njkcy001k1sufbsrj2dmj","content":"<p>Chrome 插件</p>\n<pre><code>1. ADfree.Player.Online\n一款屏蔽国内主要视频网站部分视频广告的扩展。\n\n2. Allow Copy\n解除一些网站不允许的右键复制\n\n3. Bookmark Manager\n来自 google\n\n4. ChaZD\nChaZD 查字典，简洁易用的英汉字典扩展程序，支持划词哦:)\n\n5. crxMouse Chrome Gestures\nBoost browsing productivity with your fingertips - Mouse Gestures, Super Drag, Wheel Gestures, Rocker Gestures.\n(不经常使用, 更多使用 vim 插件)\n\n6. Disconnect\nMake the web faster, more private, and more secure.\n(google 已跪, 可以使用 duckduckgo)\n\n7. Ghostery\nEnjoy a faster, safer and cleaner browsing experience.\n(用于屏蔽网页的一些信息跟踪)\n\n8. Google Art Project\nArt Project masterpieces from Google Cultural Institute in your browser tabs\n(还行)\n\n9. HTTPS Everywhere\nEncrypt the Web! Automatically use HTTPS security on many sites.\n(提高安全姿势)\n\n10. ImprovedTube - YouTube Extension\nImproves YouTube&apos;s functions and site with Limited Permissions. Auto HD, Resize, Annotations, Playback Speed and more.\n(美化youtube, 不及 Magic Actions)\n\n11. iReader\nView news stories and other articles in a very easy to read, clutter-free, scrollable display.\n(阅读模式)\n\n12. Magic Actions for YouTube™\nEnhance your YouTube watching experience! Auto HD, Ad Block, Cinema Mode, Mouse Wheel Volume Control, Screenshot...\n(更加美化youtube)\n\n13. Octotree\nCode tree for GitHub and GitLab\n(神器)\n\n14. OneTab\nSave up to 95% memory and reduce tab clutter\n(节省资源)\n\n15. Privacy Badger\nPrivacy Badger protects you from trackers as you surf the web!\n(隐私安全)\n\n16. Proxy SwitchyOmega\nManage and switch between multiple proxies quickly &amp; easily.\n(科学上网)\n\n17. Redirector\nAutomatically redirect pages based on user-defined rules. E.g. always redirect an article url to its printer-friendly version.\n\n18. Remove Google Redirection\nProhibit click-tracking, and prevent url redirection when clicks on the result links in Google search page\n\n19. scroll style\nLike android&apos;s scroll bars .像android的滚动条\n\n20. StopFingerprinting\nFingerprinting analysis extension.\n(隐私安全, 不知是否有效)\n\n21. Stylish\nRestyle the web with Stylish, a user styles manager. Stylish lets you easily install themes and skins for many popular sites.\n(神器, 自定义 css 样式)\n\n22. Tampermonkey\nThe most popular userscript manager for Blink-based browsers\n(神器, 自定义 js 样式)\n\n23. The Great Suspender\nAutomatically suspends unused tabs to free up system resources\n(节省资源, 配合 OneTab)\n\n24. User-Agent Switcher for Google Chrome\nUser-Agent Switcher for Google Chrome switches between different user-agents.\n\n25. Vimium\nThe Hacker&apos;s Browser. Vimium provides keyboard shortcuts for navigation and control in the spirit of Vim.\n(神器, 已上瘾)\n\n26. WebRTC Leak Prevent\nPrevent WebRTC leaks, without blocking WebRTC.\n(安全, 隐藏本地IP)\n\n27. 买买买购物助手\n(还没有使用)\n\n28. 保护眼睛\n阿姆斯特朗回旋喷气式阿姆斯特朗墨镜\n\n29. 隐藏帖自动回复 (AutoReply 纯净版)\n自动回复隐藏帖 (要求已登录, 改自同名 Chrome 插件, 版权归原作者所有)\n</code></pre><p>Firefox</p>\n<pre><code>ACVAA\nAdblock Plus\nDisconnect\nDisconnect Search\nElement Hiding Helper for Adblock Plus\nFEBE\nFoxyProxy Standard\nGhostery\nGreasemonkey\nHTTPS-Everywhere\nNoScript\nOmnibar\nPopVideo\nSmartVideo For YouTube\nVimperator\n</code></pre><p>以下在破坏本文规则</p>\n<p>PowerShell</p>\n<pre><code>posh-git\nPowerTab\nPSCX\nPsGet\nPSReadline\n</code></pre><p>Zsh</p>\n<pre><code>git \nincr  \nterminitor \ntmux\nz \nzsh-history-substring-search\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>Chrome 插件</p>\n<pre><code>1. ADfree.Player.Online\n一款屏蔽国内主要视频网站部分视频广告的扩展。\n\n2. Allow Copy\n解除一些网站不允许的右键复制\n\n3. Bookmark Manager\n来自 google\n\n4. ChaZD\nChaZD 查字典，简洁易用的英汉字典扩展程序，支持划词哦:)\n\n5. crxMouse Chrome Gestures\nBoost browsing productivity with your fingertips - Mouse Gestures, Super Drag, Wheel Gestures, Rocker Gestures.\n(不经常使用, 更多使用 vim 插件)\n\n6. Disconnect\nMake the web faster, more private, and more secure.\n(google 已跪, 可以使用 duckduckgo)\n\n7. Ghostery\nEnjoy a faster, safer and cleaner browsing experience.\n(用于屏蔽网页的一些信息跟踪)\n\n8. Google Art Project\nArt Project masterpieces from Google Cultural Institute in your browser tabs\n(还行)\n\n9. HTTPS Everywhere\nEncrypt the Web! Automatically use HTTPS security on many sites.\n(提高安全姿势)\n\n10. ImprovedTube - YouTube Extension\nImproves YouTube&apos;s functions and site with Limited Permissions. Auto HD, Resize, Annotations, Playback Speed and more.\n(美化youtube, 不及 Magic Actions)\n\n11. iReader\nView news stories and other articles in a very easy to read, clutter-free, scrollable display.\n(阅读模式)\n\n12. Magic Actions for YouTube™\nEnhance your YouTube watching experience! Auto HD, Ad Block, Cinema Mode, Mouse Wheel Volume Control, Screenshot...\n(更加美化youtube)\n\n13. Octotree\nCode tree for GitHub and GitLab\n(神器)\n\n14. OneTab\nSave up to 95% memory and reduce tab clutter\n(节省资源)\n\n15. Privacy Badger\nPrivacy Badger protects you from trackers as you surf the web!\n(隐私安全)\n\n16. Proxy SwitchyOmega\nManage and switch between multiple proxies quickly &amp; easily.\n(科学上网)\n\n17. Redirector\nAutomatically redirect pages based on user-defined rules. E.g. always redirect an article url to its printer-friendly version.\n\n18. Remove Google Redirection\nProhibit click-tracking, and prevent url redirection when clicks on the result links in Google search page\n\n19. scroll style\nLike android&apos;s scroll bars .像android的滚动条\n\n20. StopFingerprinting\nFingerprinting analysis extension.\n(隐私安全, 不知是否有效)\n\n21. Stylish\nRestyle the web with Stylish, a user styles manager. Stylish lets you easily install themes and skins for many popular sites.\n(神器, 自定义 css 样式)\n\n22. Tampermonkey\nThe most popular userscript manager for Blink-based browsers\n(神器, 自定义 js 样式)\n\n23. The Great Suspender\nAutomatically suspends unused tabs to free up system resources\n(节省资源, 配合 OneTab)\n\n24. User-Agent Switcher for Google Chrome\nUser-Agent Switcher for Google Chrome switches between different user-agents.\n\n25. Vimium\nThe Hacker&apos;s Browser. Vimium provides keyboard shortcuts for navigation and control in the spirit of Vim.\n(神器, 已上瘾)\n\n26. WebRTC Leak Prevent\nPrevent WebRTC leaks, without blocking WebRTC.\n(安全, 隐藏本地IP)\n\n27. 买买买购物助手\n(还没有使用)\n\n28. 保护眼睛\n阿姆斯特朗回旋喷气式阿姆斯特朗墨镜\n\n29. 隐藏帖自动回复 (AutoReply 纯净版)\n自动回复隐藏帖 (要求已登录, 改自同名 Chrome 插件, 版权归原作者所有)\n</code></pre><p>Firefox</p>\n<pre><code>ACVAA\nAdblock Plus\nDisconnect\nDisconnect Search\nElement Hiding Helper for Adblock Plus\nFEBE\nFoxyProxy Standard\nGhostery\nGreasemonkey\nHTTPS-Everywhere\nNoScript\nOmnibar\nPopVideo\nSmartVideo For YouTube\nVimperator\n</code></pre><p>以下在破坏本文规则</p>\n<p>PowerShell</p>\n<pre><code>posh-git\nPowerTab\nPSCX\nPsGet\nPSReadline\n</code></pre><p>Zsh</p>\n<pre><code>git \nincr  \nterminitor \ntmux\nz \nzsh-history-substring-search\n</code></pre>"},{"title":"ffmpeg scale samples","date":"2018-05-13T09:49:16.000Z","_content":"\nffmpeg 音量增益\n\n```c\n// https://www.ffmpeg.org/doxygen/2.7/af__volume_8c_source.html\n\n// static inline int16_t av_clip_int16(int a)\n// {\n//     if ((a+0x8000U) & ~0xFFFF) return (a>>31) ^ 0x7FFF;\n//     else                      return a;\n// }\n\nstatic inline void scaleSamplesS16Volume(uint8_t *dst, int nb_samples, double adjustVolumeValue) {\n    int16_t *smp_dst       = (int16_t *)dst;\n\n    int volume = (int)(adjustVolumeValue * 256 + 0.5);\n    // volume < if (vol->volume_i < 0x1000000)\n    printf(\"\\r====%d %lf   \", volume, adjustVolumeValue);\n    if (volume < 0x1000000) {\n        // vol->scale_samples = scale_samples_u8_small;\n        for (int i = 0; i < nb_samples; ++i) {\n            smp_dst[i] = av_clip_int16((smp_dst[i] * volume + 128) >> 8);\n        }\n    } else {\n        // vol->scale_samples = scale_samples_u8;\n        for (int i = 0; i < nb_samples; ++i) {\n            smp_dst[i] = av_clip_int16(((int64_t)smp_dst[i] * volume + 128) >> 8);\n        }\n    }\n}\n\n```","source":"_posts/2018-05-13-ffmpeg-scale-samples.md","raw":"---\ntitle: ffmpeg scale samples\ndate: 2018-05-13 17:49:16\ntags: ffmpeg\n---\n\nffmpeg 音量增益\n\n```c\n// https://www.ffmpeg.org/doxygen/2.7/af__volume_8c_source.html\n\n// static inline int16_t av_clip_int16(int a)\n// {\n//     if ((a+0x8000U) & ~0xFFFF) return (a>>31) ^ 0x7FFF;\n//     else                      return a;\n// }\n\nstatic inline void scaleSamplesS16Volume(uint8_t *dst, int nb_samples, double adjustVolumeValue) {\n    int16_t *smp_dst       = (int16_t *)dst;\n\n    int volume = (int)(adjustVolumeValue * 256 + 0.5);\n    // volume < if (vol->volume_i < 0x1000000)\n    printf(\"\\r====%d %lf   \", volume, adjustVolumeValue);\n    if (volume < 0x1000000) {\n        // vol->scale_samples = scale_samples_u8_small;\n        for (int i = 0; i < nb_samples; ++i) {\n            smp_dst[i] = av_clip_int16((smp_dst[i] * volume + 128) >> 8);\n        }\n    } else {\n        // vol->scale_samples = scale_samples_u8;\n        for (int i = 0; i < nb_samples; ++i) {\n            smp_dst[i] = av_clip_int16(((int64_t)smp_dst[i] * volume + 128) >> 8);\n        }\n    }\n}\n\n```","slug":"2018-05-13-ffmpeg-scale-samples","published":1,"updated":"2018-05-13T10:05:53.329Z","_id":"cjh4njkdk001w1sufjq3437o6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>ffmpeg 音量增益</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://www.ffmpeg.org/doxygen/2.7/af__volume_8c_source.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// static inline int16_t av_clip_int16(int a)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     if ((a+0x8000U) &amp; ~0xFFFF) return (a&gt;&gt;31) ^ 0x7FFF;</span></span><br><span class=\"line\"><span class=\"comment\">//     else                      return a;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">scaleSamplesS16Volume</span><span class=\"params\">(<span class=\"keyword\">uint8_t</span> *dst, <span class=\"keyword\">int</span> nb_samples, <span class=\"keyword\">double</span> adjustVolumeValue)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int16_t</span> *smp_dst       = (<span class=\"keyword\">int16_t</span> *)dst;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> volume = (<span class=\"keyword\">int</span>)(adjustVolumeValue * <span class=\"number\">256</span> + <span class=\"number\">0.5</span>);</span><br><span class=\"line\">    <span class=\"comment\">// volume &lt; if (vol-&gt;volume_i &lt; 0x1000000)</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\r====%d %lf   \"</span>, volume, adjustVolumeValue);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (volume &lt; <span class=\"number\">0x1000000</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// vol-&gt;scale_samples = scale_samples_u8_small;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nb_samples; ++i) &#123;</span><br><span class=\"line\">            smp_dst[i] = av_clip_int16((smp_dst[i] * volume + <span class=\"number\">128</span>) &gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// vol-&gt;scale_samples = scale_samples_u8;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nb_samples; ++i) &#123;</span><br><span class=\"line\">            smp_dst[i] = av_clip_int16(((<span class=\"keyword\">int64_t</span>)smp_dst[i] * volume + <span class=\"number\">128</span>) &gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>ffmpeg 音量增益</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://www.ffmpeg.org/doxygen/2.7/af__volume_8c_source.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// static inline int16_t av_clip_int16(int a)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     if ((a+0x8000U) &amp; ~0xFFFF) return (a&gt;&gt;31) ^ 0x7FFF;</span></span><br><span class=\"line\"><span class=\"comment\">//     else                      return a;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">scaleSamplesS16Volume</span><span class=\"params\">(<span class=\"keyword\">uint8_t</span> *dst, <span class=\"keyword\">int</span> nb_samples, <span class=\"keyword\">double</span> adjustVolumeValue)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int16_t</span> *smp_dst       = (<span class=\"keyword\">int16_t</span> *)dst;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> volume = (<span class=\"keyword\">int</span>)(adjustVolumeValue * <span class=\"number\">256</span> + <span class=\"number\">0.5</span>);</span><br><span class=\"line\">    <span class=\"comment\">// volume &lt; if (vol-&gt;volume_i &lt; 0x1000000)</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\r====%d %lf   \"</span>, volume, adjustVolumeValue);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (volume &lt; <span class=\"number\">0x1000000</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// vol-&gt;scale_samples = scale_samples_u8_small;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nb_samples; ++i) &#123;</span><br><span class=\"line\">            smp_dst[i] = av_clip_int16((smp_dst[i] * volume + <span class=\"number\">128</span>) &gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// vol-&gt;scale_samples = scale_samples_u8;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nb_samples; ++i) &#123;</span><br><span class=\"line\">            smp_dst[i] = av_clip_int16(((<span class=\"keyword\">int64_t</span>)smp_dst[i] * volume + <span class=\"number\">128</span>) &gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjh4njkbo00001sufohi5gd5d","category_id":"cjh4njkc300021sufcy18f4x9","_id":"cjh4njkc3000d1suf7aadh39f"},{"post_id":"cjh4njkc300061sufv1yuwiwe","category_id":"cjh4njkc300021sufcy18f4x9","_id":"cjh4njkcj000g1suf1c654nyy"},{"post_id":"cjh4njkc3000a1sufh4g4q5jb","category_id":"cjh4njkc300021sufcy18f4x9","_id":"cjh4njkcj000j1sufnxbocj7m"},{"post_id":"cjh4njkc300041sufz4d19ict","category_id":"cjh4njkc300021sufcy18f4x9","_id":"cjh4njkcj000m1sufrau4cwk7"},{"post_id":"cjh4njkc3000b1sufomij2h4s","category_id":"cjh4njkc300021sufcy18f4x9","_id":"cjh4njkcj000p1sufwepsm61z"},{"post_id":"cjh4njkcj000f1sufc8im17ej","category_id":"cjh4njkc300021sufcy18f4x9","_id":"cjh4njkcj000t1sufu9fkqlpo"},{"post_id":"cjh4njkc300051sufuh51kgjv","category_id":"cjh4njkc3000c1sufrht7vlt2","_id":"cjh4njkcy000w1suf2rjjdcic"},{"post_id":"cjh4njkcj000i1sufv8xq0n6j","category_id":"cjh4njkc300021sufcy18f4x9","_id":"cjh4njkcy00101sufk97ruvbo"},{"post_id":"cjh4njkcj000o1suf7e2b522g","category_id":"cjh4njkc300021sufcy18f4x9","_id":"cjh4njkcy00131suflb264qen"},{"post_id":"cjh4njkcj000v1sufhab1av5u","category_id":"cjh4njkc300021sufcy18f4x9","_id":"cjh4njkcy00161sufk22lqfaq"},{"post_id":"cjh4njkcj000l1sufg8ut8ik3","category_id":"cjh4njkcj000q1sufuctu7d6k","_id":"cjh4njkcy001a1sufaahf84ar"},{"post_id":"cjh4njkcj000s1suf27l0wvyf","category_id":"cjh4njkcj000q1sufuctu7d6k","_id":"cjh4njkcy001c1sufxtrbun2p"},{"post_id":"cjh4njkcy00141sufwbjmlv1a","category_id":"cjh4njkc300021sufcy18f4x9","_id":"cjh4njkcy001g1sufq5f5iabp"},{"post_id":"cjh4njkcy00191sufl5gr27mw","category_id":"cjh4njkcy00151suf9lo2vtei","_id":"cjh4njkcy001i1sufbtrut1b6"},{"post_id":"cjh4njkcy000y1suft495fvkn","category_id":"cjh4njkcy00151suf9lo2vtei","_id":"cjh4njkcy001l1sufvejy0b4i"},{"post_id":"cjh4njkcy001b1sufpy72maor","category_id":"cjh4njkcy00151suf9lo2vtei","_id":"cjh4njkcy001n1suf9j3v6bp2"},{"post_id":"cjh4njkcy001f1suf0v92e2ls","category_id":"cjh4njkcy00151suf9lo2vtei","_id":"cjh4njkde001p1suf335oye01"},{"post_id":"cjh4njkcy001h1sufd7ub0vdt","category_id":"cjh4njkcy00151suf9lo2vtei","_id":"cjh4njkdf001r1suf9qgm2leu"},{"post_id":"cjh4njkcy001k1sufbsrj2dmj","category_id":"cjh4njkcy00151suf9lo2vtei","_id":"cjh4njkdh001t1sufveenr9ej"}],"PostTag":[{"post_id":"cjh4njkbo00001sufohi5gd5d","tag_id":"cjh4njkc300031sufugwa3etw","_id":"cjh4njkc300091sufkaw8nm03"},{"post_id":"cjh4njkc300041sufz4d19ict","tag_id":"cjh4njkc300081sufqyo3vkcl","_id":"cjh4njkcj000h1sufq2f2pgbj"},{"post_id":"cjh4njkc300051sufuh51kgjv","tag_id":"cjh4njkc3000e1sufayab836o","_id":"cjh4njkcj000n1sufm0asu307"},{"post_id":"cjh4njkc300061sufv1yuwiwe","tag_id":"cjh4njkcj000k1sufhl5jhejy","_id":"cjh4njkcj000u1suf6wk6m6w3"},{"post_id":"cjh4njkc3000a1sufh4g4q5jb","tag_id":"cjh4njkc3000e1sufayab836o","_id":"cjh4njkcy00111suf1e0in12p"},{"post_id":"cjh4njkc3000b1sufomij2h4s","tag_id":"cjh4njkcy000x1sufp5sm53nv","_id":"cjh4njkcy00181sufbg4ezomi"},{"post_id":"cjh4njkcj000f1sufc8im17ej","tag_id":"cjh4njkcy000x1sufp5sm53nv","_id":"cjh4njkcy001e1suf27pwdonq"},{"post_id":"cjh4njkcj000i1sufv8xq0n6j","tag_id":"cjh4njkcy001d1sufy95n1vqr","_id":"cjh4njkcy001m1suf94gll110"},{"post_id":"cjh4njkcj000l1sufg8ut8ik3","tag_id":"cjh4njkcy001j1sufnuao1u9j","_id":"cjh4njkdf001q1sufu37u4gat"},{"post_id":"cjh4njkcj000o1suf7e2b522g","tag_id":"cjh4njkcy000x1sufp5sm53nv","_id":"cjh4njkdh001u1sufi4ywoxyv"},{"post_id":"cjh4njkcj000s1suf27l0wvyf","tag_id":"cjh4njkdg001s1suf4vmed6hw","_id":"cjh4njkdi001v1suf3q7zp2dx"},{"post_id":"cjh4njkdk001w1sufjq3437o6","tag_id":"cjh4nlecu0000zsufafd0nn3y","_id":"cjh4nlecv0001zsufl9x6gzta"}],"Tag":[{"name":"SecureCRT","_id":"cjh4njkc300031sufugwa3etw"},{"name":"DES","_id":"cjh4njkc300081sufqyo3vkcl"},{"name":"shell","_id":"cjh4njkc3000e1sufayab836o"},{"name":"lambda","_id":"cjh4njkcj000k1sufhl5jhejy"},{"name":"Python","_id":"cjh4njkcy000x1sufp5sm53nv"},{"name":"FTP","_id":"cjh4njkcy001d1sufy95n1vqr"},{"name":"C++","_id":"cjh4njkcy001j1sufnuao1u9j"},{"name":"C","_id":"cjh4njkdg001s1suf4vmed6hw"},{"name":"ffmpeg","_id":"cjh4nlecu0000zsufafd0nn3y"}]}}