{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/2014-11-16-批量获取歌曲链接.md","hash":"f6345f27988efa12b6f7ca45ac64077e690257a4","modified":1624014997642},{"_id":"source/_posts/2014-11-13-计算两个文件的相对路径.md","hash":"ad6207c15e74558c44125623581c8e6b3bf242d5","modified":1624014997642},{"_id":"source/_posts/2015-1-14-python-发送邮件.md","hash":"96fbd473ff03695faa71a70842f04b0404e134d2","modified":1624014997643},{"_id":"source/_posts/2014-11-17-文本处理-小笔记.md","hash":"5b2f17791ada776fb52511f2397f40c14399a93a","modified":1623832551781},{"_id":"source/_posts/2015-1-20-python-tree.md","hash":"aac60911491811c202120432951d076d27b18512","modified":1624014997643},{"_id":"source/_posts/2015-1-14-python-ssh传输文件.md","hash":"6e33cbad324d48b3a37adb1189b95b4b79fe8bc6","modified":1624014997643},{"_id":"source/_posts/2015-1-26-计算A文件相对B文件的路径.md","hash":"39ca7d6baf05e5e78bb5af9d096c00d5bcd6ff8e","modified":1624014997644},{"_id":"source/_posts/2014-2-21-Ubuntu下搭建FTP服务器.md","hash":"45e18509cc46533e7794c6dc38870bc819a2e7b5","modified":1623832373702},{"_id":"source/_posts/2015-11-15-miniseed-note.md","hash":"d25e85546d8c9e373ffac27fc9a7f3e227e2a187","modified":1624014997645},{"_id":"source/_posts/2016-07-28-centos_upgrade_gcc.md","hash":"32d1d60500c3c8efe78ab3d701f79c82101f1edd","modified":1624014997645},{"_id":"source/_posts/2016-08-29-单引号-字符串.md","hash":"d99d45c91bec8aaa1959386191529a33fe79f343","modified":1624014997647},{"_id":"source/_posts/2015-11-20-C++内存对齐.md","hash":"a82082228e7ae65a95912a22abfb09cf3eba35fe","modified":1623832373703},{"_id":"source/_posts/2016-07-28-centos_upgrade_python.md","hash":"0f524dbe6825bbe6b07b17e6a24b88caa8a8b2b6","modified":1624014997646},{"_id":"source/_posts/2016-1-18-C++中set和get的简单方式.md","hash":"45f3b88187ce2323399360b1c828ec9411c941d2","modified":1624014997648},{"_id":"source/_posts/2016-4-13-my-string-format.md","hash":"e689cbb9947dd01d6820750bac76845724d67aa6","modified":1624014997649},{"_id":"source/_posts/2016-6-6-browser-plugin.md","hash":"b671e922db7c86b94fe86e2e33daebaefd26bd09","modified":1624014997649},{"_id":"source/_posts/2018-05-13-ffmpeg-scale-samples.md","hash":"64efc0d65401866b1df3864b9d04bad9dcd39653","modified":1623832373704},{"_id":"source/_posts/a-mac-bug-about-udp-port-triggered-by-srs.md","hash":"f9ba27bd63396915687811d3e7f4b1fbc717a76b","modified":1624874768428},{"_id":"source/_posts/simulcast-layer-state-control.md","hash":"9b6e930ec7704b723e0ee1ee0c865e9253d7194f","modified":1624449088101},{"_id":"source/_posts/field-trails.md","hash":"bb5175f5c32e114b18920519c0026fd255692ba9","modified":1624015043786},{"_id":"source/_posts/simulcast-support-in-srs.md","hash":"cbfc3d327b7e93fc303378bd2244b4bae33e850d","modified":1624015093294},{"_id":"source/_posts/simulcast.md","hash":"0c435fdd239e278d13d795a05234cdfcbb32463c","modified":1624015043787},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1623832373704},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1623832373705},{"_id":"themes/landscape/README.md","hash":"4a99d3757b9f128359623b99e059fbeabab700cd","modified":1623832373705},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1623832373705},{"_id":"themes/landscape/_config.yml","hash":"bda57195437e9430bdd1c7e286bb594a1aaba69b","modified":1624014997651},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1623832373706},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1623832373706},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1623832373706},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1623832373706},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1623832373713},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1623832373706},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1623832373706},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1623832373707},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1623832373707},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1623832373707},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1623832373707},{"_id":"themes/landscape/package-lock.json","hash":"9dcf819404b11100568d23418d9ae4aaac0be3ea","modified":1623832373713},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1623832373707},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1623832373707},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1623832373712},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1623832373712},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1623832373712},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1623832373712},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1623832373713},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1623832373712},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1623832373712},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1623832373708},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1623832373713},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1623832373708},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1623832373708},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1623832373709},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1623832373709},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1623832373708},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1623832373708},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1623832373709},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1623832373709},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1623832373711},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1623832373709},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1623832373711},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1623832373711},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1623832373711},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1623832373711},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1623832373712},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1623832373714},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1623832373716},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1623832373720},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1623832373720},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1623832373720},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1623832373720},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1623832373720},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1623832373721},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1623832373721},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1623832373722},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1623832373722},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1623832373722},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1623832373710},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1623832373722},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1623832373710},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1623832373710},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1623832373710},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1623832373711},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1623832373714},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1623832373714},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1623832373715},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1623832373714},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1623832373714},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1623832373715},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1623832373715},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1623832373715},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1623832373715},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1623832373715},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1623832373710},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1623832373716},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1623832373716},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1623832373717},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1623832373717},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1623832373721},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1623832373719},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1623832373721},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1623832373721},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1623832373722},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1623832373722},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1623832373721},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1623832373718},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1623832373718},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1623832373719},{"_id":"public/2021/06/23/simulcast-layer-state-control/index.html","hash":"2e54cb3a58ba92ae9ee8815650f14c8c7c844ab2","modified":1624941970456},{"_id":"public/2021/06/28/a-mac-bug-about-udp-port-triggered-by-srs/index.html","hash":"8b1ab44169f41428ab086b142670a81b77606d53","modified":1624941970456},{"_id":"public/2021/06/18/simulcast-support-in-srs/index.html","hash":"9d0c1d26554f5dd32ebccda449ddcc0b40744500","modified":1624941970456},{"_id":"public/2021/06/01/field-trails/index.html","hash":"45015d02eefc5d1d9579d2dead5132cee42e4848","modified":1624941970456},{"_id":"public/2018/05/13/2018-05-13-ffmpeg-scale-samples/index.html","hash":"0aa8f1ac774debc6d255ecc4aeab4838d766e738","modified":1624941970456},{"_id":"public/2016/08/29/2016-08-29-单引号-字符串/index.html","hash":"9be0fa879afca46da79e6b8d561f01996078e9ba","modified":1624941970456},{"_id":"public/2016/07/28/2016-07-28-centos_upgrade_python/index.html","hash":"04aa11cbcef81393f1ec980ec4964cc206547c97","modified":1624941970456},{"_id":"public/2016/07/28/2016-07-28-centos_upgrade_gcc/index.html","hash":"9184a36506e7df63b8c9505f4b5aac5e6218cc70","modified":1624941970456},{"_id":"public/2016/06/06/2016-6-6-browser-plugin/index.html","hash":"12a8cfcf62fe5e700d0e25bae71f4fffcf85511a","modified":1624941970456},{"_id":"public/2016/04/13/2016-4-13-my-string-format/index.html","hash":"87d4a9d2fe3efe7719cb4f408e4cc5352fd7255c","modified":1624941970456},{"_id":"public/2016/01/18/2016-1-18-C++中set和get的简单方式/index.html","hash":"34dfa0e674aaaf0e1f5b1f44334e841eb4722f99","modified":1624941970456},{"_id":"public/2015/11/20/2015-11-20-C++内存对齐/index.html","hash":"4c363095925e1afe75ce5c6eff0c41a8983a1c20","modified":1624941970456},{"_id":"public/2015/11/15/2015-11-15-miniseed-note/index.html","hash":"b2443fdf5fb39aa7a795579d5a7f39777f572349","modified":1624941970456},{"_id":"public/2015/01/22/2015-1-26-计算A文件相对B文件的路径/index.html","hash":"c596a43260cd544d436297bbb498576e9a7498f2","modified":1624941970456},{"_id":"public/2015/01/20/2015-1-20-python-tree/index.html","hash":"24312eee2cfe735ad06c84514ea1acca11a3a4ba","modified":1624941970456},{"_id":"public/2015/01/14/2015-1-14-python-发送邮件/index.html","hash":"1de71e7ed98c6cd94d0a3a7b5e3d18a6f3feaa18","modified":1624941970456},{"_id":"public/2015/01/14/2015-1-14-python-ssh传输文件/index.html","hash":"665eab553b1e9bde00d0659f150c2c3505db1502","modified":1624941970456},{"_id":"public/2014/11/16/2014-11-16-批量获取歌曲链接/index.html","hash":"6cdc4f47ceb2a3e40cc64eeb8973b810af527d9d","modified":1624941970456},{"_id":"public/2014/11/17/2014-11-17-文本处理-小笔记/index.html","hash":"3d1c7e947c32959be098705fbc8d8df953e67f87","modified":1624941970456},{"_id":"public/2014/11/13/2014-11-13-计算两个文件的相对路径/index.html","hash":"397af61f00659dd5442ef37a257cf81cb993f465","modified":1624941970456},{"_id":"public/2014/02/21/2014-2-21-Ubuntu下搭建FTP服务器/index.html","hash":"d7116694a7dfa5c39fa110e08a4c1c15740b8b1e","modified":1624941970456},{"_id":"public/archives/page/2/index.html","hash":"187d8fe3fbf7ddc5ac643b076ec357b04aa6bd8e","modified":1624941970456},{"_id":"public/archives/index.html","hash":"8d95e4009755a4b1fc5827f66b8fac4c7d3d9cb5","modified":1624941970456},{"_id":"public/archives/page/3/index.html","hash":"51192d77a477b37a3c9585f85aa43bd45533b61e","modified":1624941970456},{"_id":"public/archives/2014/index.html","hash":"7f8715f051cc227649e8664647ada6054ca6310b","modified":1624941970456},{"_id":"public/archives/2014/02/index.html","hash":"9b7d376c90c39cec9273d5272926bb94c5c091a6","modified":1624941970456},{"_id":"public/archives/2014/11/index.html","hash":"7ebfcea81b74746b05798ba2004faadf1942a283","modified":1624941970456},{"_id":"public/archives/2015/index.html","hash":"41e9fefdc73ae6f20b18f05597cbeb769e78dbc9","modified":1624941970456},{"_id":"public/archives/2015/01/index.html","hash":"a4c2e70709e541e2806f4d29be459483a9a67934","modified":1624941970456},{"_id":"public/archives/2015/11/index.html","hash":"2ea47cba6412e1c4f7b09c7ac8b00214e04f947c","modified":1624941970456},{"_id":"public/archives/2016/index.html","hash":"7254d41b9f38946f9cbdafd989b8845d1355fa8d","modified":1624941970456},{"_id":"public/archives/2016/01/index.html","hash":"17ff58723e3f0df99b2520e80fc3c615051382c0","modified":1624941970456},{"_id":"public/archives/2016/06/index.html","hash":"7cf2cbe337209b769ff6df24f3ef34374cb6d7eb","modified":1624941970456},{"_id":"public/archives/2016/04/index.html","hash":"01e07d708d58767212e9228aa4906c720d9beb89","modified":1624941970456},{"_id":"public/archives/2016/07/index.html","hash":"facd500de6a6009e28ecc8e99338fbd03081e4e8","modified":1624941970456},{"_id":"public/archives/2018/index.html","hash":"3317c454eb2d0456460ce46aff9f0bac6483444f","modified":1624941970456},{"_id":"public/archives/2016/08/index.html","hash":"1939a10c35446d67c32b310673fdd4902ead811b","modified":1624941970456},{"_id":"public/archives/2018/05/index.html","hash":"26be1e6c26445360afb1d508c23f6c5c056c1e10","modified":1624941970456},{"_id":"public/archives/2021/index.html","hash":"64485a1ac3e0b85e1cb2700b91e2988feeca11f3","modified":1624941970456},{"_id":"public/archives/2021/06/index.html","hash":"2f04cf8b3c9c0e22da911c67fa0f220358fa8fd4","modified":1624941970456},{"_id":"public/categories/未分类/index.html","hash":"12b8ddbf1ce63f2b16933db620f9ffe61d032a1d","modified":1624941970456},{"_id":"public/categories/未分类/page/2/index.html","hash":"a9304df872d805ccf12a635ac2852cfddc7bc10f","modified":1624941970456},{"_id":"public/page/3/index.html","hash":"c6de033a7da4f2dd05714f472419e4cee39de7d0","modified":1624941970456},{"_id":"public/tags/lambda/index.html","hash":"a62bbb488ef7ad69f12d5887fcfcaa398cdd4c0f","modified":1624941970456},{"_id":"public/tags/shell/index.html","hash":"508aa9509f8f46a8aaaad654c780f2f6e446dc29","modified":1624941970456},{"_id":"public/tags/Python/index.html","hash":"6eff725d91f4edca1aca0521d1b7b156743c4f5e","modified":1624941970456},{"_id":"public/tags/C/index.html","hash":"8cde27196747497763b8c8fb1a6d93325fedab34","modified":1624941970456},{"_id":"public/tags/FTP/index.html","hash":"a0526f146f1aac1ec1ddfe40418c1ecae5e2d9d6","modified":1624941970456},{"_id":"public/tags/ffmpeg/index.html","hash":"6ba517ca45a97e91a222b0fbfd1c03fd75c780d1","modified":1624941970456},{"_id":"public/tags/webrtc/index.html","hash":"c364b06afcccc0f429d58b6e447c2004e2a0dccf","modified":1624941970456},{"_id":"public/2021/06/16/simulcast/index.html","hash":"7e566290c6f6b50539d206f6ab2603d763d39bb4","modified":1624941970456},{"_id":"public/index.html","hash":"7edd924dc6fcbfee4047626a61a1b70ac95481f7","modified":1624941970456},{"_id":"public/page/2/index.html","hash":"c6e7ddb9b13475fbd2476defc236a499da6d654b","modified":1624941970456},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1624941970456},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1624941970456},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1624941970456},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1624941970456},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1624941970456},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1624941970456},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1624941970456},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1624941970456},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1624941970456},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1624941970456},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1624941970456},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1624941970456},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1624941970456},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1624941970456},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1624941970456},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1624941970456},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1624941970456},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1624941970456},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1624941970456},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1624941970456},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1624941970456},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1624941970456},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1624941970456}],"Category":[{"name":"未分类","_id":"ckqhkhsz30002uavq1cc98020"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":"计算两个文件的相对路径","date":"2014-11-12T23:20:59.000Z","_content":"\n平台：Ubuntu 14.10\n\n编译器：gcc 4.9.1\n\n语言：c++14\n\n相关特性：lambda，auto\n\nGithub：https://github.com/ligelaige/some_cpp_code/blob/master/cpp_lambda/relative_path.cpp\n\n    /************************************************************************* \n    > File Name: relative_path.cpp \n    > Author: johzzy \n    > Email: hellojinqiang@gmail.com \n    > Created Time: Thu 13 Nov 2014 01:59:18 AM CST \n    > Compile: g++ relative_path.cpp -std=c++14 \n    ************************************************************************/  \n    #include <iostream>  \n    #include <string>  \n    #include <vector>  \n    #include <sstream>  \n    using namespace std;  \n    auto split(const string &s, const char delim = ' ')  \n    {  \n    stringstream ss(s);  \n    string item;  \n    vector<string> elems;  \n    while(getline(ss, item, delim) != NULL)  \n    {  \n    elems.push_back(item);  \n    }  \n    return elems;  \n    }  \n    int main(void)  \n    {  \n    string a, b;  \n    cout << \"Please Enter the Absolute Path of the File!\" << endl;  \n    cout << \"a = \";  \n    cin >> a;  \n    cout << \"b = \";  \n    cin >> b;  \n    auto diffpath = [](const string &a, const string &b) {  \n    int k = 0;  \n    for (int i=0; i< a.length() && i<b.length() && a[i] == b[i]; ++i)  \n    if (a[i] == '/') k=i;  \n    return k+1;  \n    };  \n    int index = diffpath(a, b);  \n    a = a.substr(index);  \n    b = b.substr(index);  \n    auto vecta = split(a, '/');  \n    auto vectb = split(b, '/');  \n    string a_path_b = \"\"; //a relative to b path  \n    string b_path_a = \"\"; //b relative to a path  \n    for (int i=1; i<vecta.size(); ++i)  \n    a_path_b += \"../\";  \n    a_path_b += a;  \n    for(int i=1; i<vectb.size(); ++i)  \n    b_path_a += \"../\";  \n    b_path_a += b;  \n    cout << \"a relative to b path: \" << a_path_b << endl;  \n    cout << \"b relative to a path: \" << b_path_a << endl;  \n    return 0;  \n    }  \n    \n(完)\n\nPS:\n\n一个实用的参数：$_\n\n比如\n\t\n\t$ vi 2014-11-13-计算两个文件的相对路径.md\n\t# 编辑完成之后，突然想使用gedit看看\n\t$ gedit $_\n\t# 这里的 $_ 就是上一个命令的最后一个参数\n\t\n\n\n","source":"_posts/2014-11-13-计算两个文件的相对路径.md","raw":"---\nlayout: post\ntitle: 计算两个文件的相对路径\ndate: 2014-11-13 7:20:59\ntags: lambda\ncategories: 未分类\n---\n\n平台：Ubuntu 14.10\n\n编译器：gcc 4.9.1\n\n语言：c++14\n\n相关特性：lambda，auto\n\nGithub：https://github.com/ligelaige/some_cpp_code/blob/master/cpp_lambda/relative_path.cpp\n\n    /************************************************************************* \n    > File Name: relative_path.cpp \n    > Author: johzzy \n    > Email: hellojinqiang@gmail.com \n    > Created Time: Thu 13 Nov 2014 01:59:18 AM CST \n    > Compile: g++ relative_path.cpp -std=c++14 \n    ************************************************************************/  \n    #include <iostream>  \n    #include <string>  \n    #include <vector>  \n    #include <sstream>  \n    using namespace std;  \n    auto split(const string &s, const char delim = ' ')  \n    {  \n    stringstream ss(s);  \n    string item;  \n    vector<string> elems;  \n    while(getline(ss, item, delim) != NULL)  \n    {  \n    elems.push_back(item);  \n    }  \n    return elems;  \n    }  \n    int main(void)  \n    {  \n    string a, b;  \n    cout << \"Please Enter the Absolute Path of the File!\" << endl;  \n    cout << \"a = \";  \n    cin >> a;  \n    cout << \"b = \";  \n    cin >> b;  \n    auto diffpath = [](const string &a, const string &b) {  \n    int k = 0;  \n    for (int i=0; i< a.length() && i<b.length() && a[i] == b[i]; ++i)  \n    if (a[i] == '/') k=i;  \n    return k+1;  \n    };  \n    int index = diffpath(a, b);  \n    a = a.substr(index);  \n    b = b.substr(index);  \n    auto vecta = split(a, '/');  \n    auto vectb = split(b, '/');  \n    string a_path_b = \"\"; //a relative to b path  \n    string b_path_a = \"\"; //b relative to a path  \n    for (int i=1; i<vecta.size(); ++i)  \n    a_path_b += \"../\";  \n    a_path_b += a;  \n    for(int i=1; i<vectb.size(); ++i)  \n    b_path_a += \"../\";  \n    b_path_a += b;  \n    cout << \"a relative to b path: \" << a_path_b << endl;  \n    cout << \"b relative to a path: \" << b_path_a << endl;  \n    return 0;  \n    }  \n    \n(完)\n\nPS:\n\n一个实用的参数：$_\n\n比如\n\t\n\t$ vi 2014-11-13-计算两个文件的相对路径.md\n\t# 编辑完成之后，突然想使用gedit看看\n\t$ gedit $_\n\t# 这里的 $_ 就是上一个命令的最后一个参数\n\t\n\n\n","slug":"2014-11-13-计算两个文件的相对路径","published":1,"updated":"2021-06-18T11:16:37.642Z","comments":1,"photos":[],"link":"","_id":"ckqhkhsyx0000uavq6sgr158r","content":"<p>平台：Ubuntu 14.10</p>\n<p>编译器：gcc 4.9.1</p>\n<p>语言：c++14</p>\n<p>相关特性：lambda，auto</p>\n<p>Github：<a href=\"https://github.com/ligelaige/some_cpp_code/blob/master/cpp_lambda/relative_path.cpp\">https://github.com/ligelaige/some_cpp_code/blob/master/cpp_lambda/relative_path.cpp</a></p>\n<pre><code>/************************************************************************* \n&gt; File Name: relative_path.cpp \n&gt; Author: johzzy \n&gt; Email: hellojinqiang@gmail.com \n&gt; Created Time: Thu 13 Nov 2014 01:59:18 AM CST \n&gt; Compile: g++ relative_path.cpp -std=c++14 \n************************************************************************/  \n#include &lt;iostream&gt;  \n#include &lt;string&gt;  \n#include &lt;vector&gt;  \n#include &lt;sstream&gt;  \nusing namespace std;  \nauto split(const string &amp;s, const char delim = &apos; &apos;)  \n&#123;  \nstringstream ss(s);  \nstring item;  \nvector&lt;string&gt; elems;  \nwhile(getline(ss, item, delim) != NULL)  \n&#123;  \nelems.push_back(item);  \n&#125;  \nreturn elems;  \n&#125;  \nint main(void)  \n&#123;  \nstring a, b;  \ncout &lt;&lt; &quot;Please Enter the Absolute Path of the File!&quot; &lt;&lt; endl;  \ncout &lt;&lt; &quot;a = &quot;;  \ncin &gt;&gt; a;  \ncout &lt;&lt; &quot;b = &quot;;  \ncin &gt;&gt; b;  \nauto diffpath = [](const string &amp;a, const string &amp;b) &#123;  \nint k = 0;  \nfor (int i=0; i&lt; a.length() &amp;&amp; i&lt;b.length() &amp;&amp; a[i] == b[i]; ++i)  \nif (a[i] == &apos;/&apos;) k=i;  \nreturn k+1;  \n&#125;;  \nint index = diffpath(a, b);  \na = a.substr(index);  \nb = b.substr(index);  \nauto vecta = split(a, &apos;/&apos;);  \nauto vectb = split(b, &apos;/&apos;);  \nstring a_path_b = &quot;&quot;; //a relative to b path  \nstring b_path_a = &quot;&quot;; //b relative to a path  \nfor (int i=1; i&lt;vecta.size(); ++i)  \na_path_b += &quot;../&quot;;  \na_path_b += a;  \nfor(int i=1; i&lt;vectb.size(); ++i)  \nb_path_a += &quot;../&quot;;  \nb_path_a += b;  \ncout &lt;&lt; &quot;a relative to b path: &quot; &lt;&lt; a_path_b &lt;&lt; endl;  \ncout &lt;&lt; &quot;b relative to a path: &quot; &lt;&lt; b_path_a &lt;&lt; endl;  \nreturn 0;  \n&#125;  \n</code></pre><p>(完)</p>\n<p>PS:</p>\n<p>一个实用的参数：$_</p>\n<p>比如</p>\n<pre><code>$ vi 2014-11-13-计算两个文件的相对路径.md\n# 编辑完成之后，突然想使用gedit看看\n$ gedit $_\n# 这里的 $_ 就是上一个命令的最后一个参数\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>平台：Ubuntu 14.10</p>\n<p>编译器：gcc 4.9.1</p>\n<p>语言：c++14</p>\n<p>相关特性：lambda，auto</p>\n<p>Github：<a href=\"https://github.com/ligelaige/some_cpp_code/blob/master/cpp_lambda/relative_path.cpp\">https://github.com/ligelaige/some_cpp_code/blob/master/cpp_lambda/relative_path.cpp</a></p>\n<pre><code>/************************************************************************* \n&gt; File Name: relative_path.cpp \n&gt; Author: johzzy \n&gt; Email: hellojinqiang@gmail.com \n&gt; Created Time: Thu 13 Nov 2014 01:59:18 AM CST \n&gt; Compile: g++ relative_path.cpp -std=c++14 \n************************************************************************/  \n#include &lt;iostream&gt;  \n#include &lt;string&gt;  \n#include &lt;vector&gt;  \n#include &lt;sstream&gt;  \nusing namespace std;  \nauto split(const string &amp;s, const char delim = &apos; &apos;)  \n&#123;  \nstringstream ss(s);  \nstring item;  \nvector&lt;string&gt; elems;  \nwhile(getline(ss, item, delim) != NULL)  \n&#123;  \nelems.push_back(item);  \n&#125;  \nreturn elems;  \n&#125;  \nint main(void)  \n&#123;  \nstring a, b;  \ncout &lt;&lt; &quot;Please Enter the Absolute Path of the File!&quot; &lt;&lt; endl;  \ncout &lt;&lt; &quot;a = &quot;;  \ncin &gt;&gt; a;  \ncout &lt;&lt; &quot;b = &quot;;  \ncin &gt;&gt; b;  \nauto diffpath = [](const string &amp;a, const string &amp;b) &#123;  \nint k = 0;  \nfor (int i=0; i&lt; a.length() &amp;&amp; i&lt;b.length() &amp;&amp; a[i] == b[i]; ++i)  \nif (a[i] == &apos;/&apos;) k=i;  \nreturn k+1;  \n&#125;;  \nint index = diffpath(a, b);  \na = a.substr(index);  \nb = b.substr(index);  \nauto vecta = split(a, &apos;/&apos;);  \nauto vectb = split(b, &apos;/&apos;);  \nstring a_path_b = &quot;&quot;; //a relative to b path  \nstring b_path_a = &quot;&quot;; //b relative to a path  \nfor (int i=1; i&lt;vecta.size(); ++i)  \na_path_b += &quot;../&quot;;  \na_path_b += a;  \nfor(int i=1; i&lt;vectb.size(); ++i)  \nb_path_a += &quot;../&quot;;  \nb_path_a += b;  \ncout &lt;&lt; &quot;a relative to b path: &quot; &lt;&lt; a_path_b &lt;&lt; endl;  \ncout &lt;&lt; &quot;b relative to a path: &quot; &lt;&lt; b_path_a &lt;&lt; endl;  \nreturn 0;  \n&#125;  \n</code></pre><p>(完)</p>\n<p>PS:</p>\n<p>一个实用的参数：$_</p>\n<p>比如</p>\n<pre><code>$ vi 2014-11-13-计算两个文件的相对路径.md\n# 编辑完成之后，突然想使用gedit看看\n$ gedit $_\n# 这里的 $_ 就是上一个命令的最后一个参数\n</code></pre>"},{"layout":"post","title":"文本处理-小笔记","date":"2014-11-17T03:20:59.000Z","_content":"\n工作中遇到的，蛮简单，将下列ip\n\n\t10.158.139.11,10.158.139.13,10.158.139.16,10.158.139.19,10.158.139.20,10.158.139.22,10.158.139.24,10.158.139.27,10.158.139.28,10.158.139.29,10.158.139.36,10.158.139.37,10.158.139.39,10.158.139.42,10.158.139.43,10.158.139.44,10.158.139.45,10.158.139.46,10.158.139.47,10.158.139.48,10.158.139.50,10.158.139.51,10.158.139.58,10.158.139.59,10.158.150.13\n\n处理成这样\n\n\t10.158.139.11\n\t10.158.139.13\n\t10.158.139.16\n\t10.158.139.19\n\t10.158.139.20\n\t10.158.139.22\n\t10.158.139.24\n\t10.158.139.27\n\t10.158.139.28\n\t10.158.139.29\n\t10.158.139.36\n\t10.158.139.37\n\t10.158.139.39\n\t10.158.139.42\n\t10.158.139.43\n\t10.158.139.44\n\t10.158.139.45\n\t10.158.139.46\n\t10.158.139.47\n\t10.158.139.48\n\t10.158.139.50\n\t10.158.139.51\n\t10.158.139.58\n\t10.158.139.59\n\t10.158.150.13\t\n\t\n操作很简单\n\t\n\tsed 's/,/\\n/g' ip.txt > ip_result\n\t\n相关代码:\n\n[ip.sh](http://johzzy.github.io/resources/ip_handle/ip.sh)\n\n[ip.txt](http://johzzy.github.io/resources/ip_handle/ip.txt)\n\n[ip_result](http://johzzy.github.io/resources/ip_handle/ip_result)\n\n\n","source":"_posts/2014-11-17-文本处理-小笔记.md","raw":"---\nlayout: post\ntitle: 文本处理-小笔记\ndate: 2014-11-17 11:20:59\ntags: shell\ncategories: 未分类\n---\n\n工作中遇到的，蛮简单，将下列ip\n\n\t10.158.139.11,10.158.139.13,10.158.139.16,10.158.139.19,10.158.139.20,10.158.139.22,10.158.139.24,10.158.139.27,10.158.139.28,10.158.139.29,10.158.139.36,10.158.139.37,10.158.139.39,10.158.139.42,10.158.139.43,10.158.139.44,10.158.139.45,10.158.139.46,10.158.139.47,10.158.139.48,10.158.139.50,10.158.139.51,10.158.139.58,10.158.139.59,10.158.150.13\n\n处理成这样\n\n\t10.158.139.11\n\t10.158.139.13\n\t10.158.139.16\n\t10.158.139.19\n\t10.158.139.20\n\t10.158.139.22\n\t10.158.139.24\n\t10.158.139.27\n\t10.158.139.28\n\t10.158.139.29\n\t10.158.139.36\n\t10.158.139.37\n\t10.158.139.39\n\t10.158.139.42\n\t10.158.139.43\n\t10.158.139.44\n\t10.158.139.45\n\t10.158.139.46\n\t10.158.139.47\n\t10.158.139.48\n\t10.158.139.50\n\t10.158.139.51\n\t10.158.139.58\n\t10.158.139.59\n\t10.158.150.13\t\n\t\n操作很简单\n\t\n\tsed 's/,/\\n/g' ip.txt > ip_result\n\t\n相关代码:\n\n[ip.sh](http://johzzy.github.io/resources/ip_handle/ip.sh)\n\n[ip.txt](http://johzzy.github.io/resources/ip_handle/ip.txt)\n\n[ip_result](http://johzzy.github.io/resources/ip_handle/ip_result)\n\n\n","slug":"2014-11-17-文本处理-小笔记","published":1,"updated":"2021-06-16T08:35:51.781Z","comments":1,"photos":[],"link":"","_id":"ckqhkhsz10001uavqeqop3f83","content":"<p>工作中遇到的，蛮简单，将下列ip</p>\n<pre><code>10.158.139.11,10.158.139.13,10.158.139.16,10.158.139.19,10.158.139.20,10.158.139.22,10.158.139.24,10.158.139.27,10.158.139.28,10.158.139.29,10.158.139.36,10.158.139.37,10.158.139.39,10.158.139.42,10.158.139.43,10.158.139.44,10.158.139.45,10.158.139.46,10.158.139.47,10.158.139.48,10.158.139.50,10.158.139.51,10.158.139.58,10.158.139.59,10.158.150.13\n</code></pre><p>处理成这样</p>\n<pre><code>10.158.139.11\n10.158.139.13\n10.158.139.16\n10.158.139.19\n10.158.139.20\n10.158.139.22\n10.158.139.24\n10.158.139.27\n10.158.139.28\n10.158.139.29\n10.158.139.36\n10.158.139.37\n10.158.139.39\n10.158.139.42\n10.158.139.43\n10.158.139.44\n10.158.139.45\n10.158.139.46\n10.158.139.47\n10.158.139.48\n10.158.139.50\n10.158.139.51\n10.158.139.58\n10.158.139.59\n10.158.150.13    \n</code></pre><p>操作很简单</p>\n<pre><code>sed &apos;s/,/\\n/g&apos; ip.txt &gt; ip_result\n</code></pre><p>相关代码:</p>\n<p><a href=\"http://johzzy.github.io/resources/ip_handle/ip.sh\">ip.sh</a></p>\n<p><a href=\"http://johzzy.github.io/resources/ip_handle/ip.txt\">ip.txt</a></p>\n<p><a href=\"http://johzzy.github.io/resources/ip_handle/ip_result\">ip_result</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>工作中遇到的，蛮简单，将下列ip</p>\n<pre><code>10.158.139.11,10.158.139.13,10.158.139.16,10.158.139.19,10.158.139.20,10.158.139.22,10.158.139.24,10.158.139.27,10.158.139.28,10.158.139.29,10.158.139.36,10.158.139.37,10.158.139.39,10.158.139.42,10.158.139.43,10.158.139.44,10.158.139.45,10.158.139.46,10.158.139.47,10.158.139.48,10.158.139.50,10.158.139.51,10.158.139.58,10.158.139.59,10.158.150.13\n</code></pre><p>处理成这样</p>\n<pre><code>10.158.139.11\n10.158.139.13\n10.158.139.16\n10.158.139.19\n10.158.139.20\n10.158.139.22\n10.158.139.24\n10.158.139.27\n10.158.139.28\n10.158.139.29\n10.158.139.36\n10.158.139.37\n10.158.139.39\n10.158.139.42\n10.158.139.43\n10.158.139.44\n10.158.139.45\n10.158.139.46\n10.158.139.47\n10.158.139.48\n10.158.139.50\n10.158.139.51\n10.158.139.58\n10.158.139.59\n10.158.150.13    \n</code></pre><p>操作很简单</p>\n<pre><code>sed &apos;s/,/\\n/g&apos; ip.txt &gt; ip_result\n</code></pre><p>相关代码:</p>\n<p><a href=\"http://johzzy.github.io/resources/ip_handle/ip.sh\">ip.sh</a></p>\n<p><a href=\"http://johzzy.github.io/resources/ip_handle/ip.txt\">ip.txt</a></p>\n<p><a href=\"http://johzzy.github.io/resources/ip_handle/ip_result\">ip_result</a></p>\n"},{"layout":"post","title":"批量获取歌曲链接","date":"2014-11-16T07:40:59.000Z","_content":"\n可能是被各种网盘惯坏了，不想一个一个去下载，索性把这些歌曲的网盘链接保存下来，就写了一个批量获取歌曲链接的脚本，在此记录一下。\n\n基本思路很简单：wget下载网页，grep、awk分析网页，保存结果。\n\n代码贴一下：\n\n\t#!/bin/bash\n\t#    File Name: getapeurl.sh\n\t#       Author: johzzy\n\t#        Email: hellojinqiang@gmail.com\n\t# Created Time: Sun 16 Nov 2014 03:01:34 PM CST\n\n\n\t#while read line\n\t#do\n\t#\techo $line\n\t#done < readme.txt\n\n\tpart=\"songs_part\"\n\tbak=\"songs_bak_part\"\n\tfile=\"songs.txt\"\n\tmusicurl=\"musicurl.txt\"\n\n\tdeclare -i num=0\n\n\tfor url in `cat $musicurl` ; \n\tdo\n\t\tlet num++\n\t\tafile=\"$part$num\"\n\t\tbfile=\"$bak$num\"\n\t\techo $url\n\t\twget $url -O $afile -o $file 2>&1 /dev/null\n\t\n\t\tgrep href $afile > $bfile\n\t\tgrep \"http://115.com\" $bfile > $afile\n\t\tawk -F \">\" '{ printf $2 \"\\n\" }' $afile > $bfile\n\t\tawk -F \"<\" '{ printf $1 \"\\n\" }' $bfile > $afile\n\tdone\n\n\techo -n > $file\n\n\tfor i in `seq $num` ;\n\tdo \n\t\tcat \"$part$i\" >> $file\n\t\trm \"$part$i\" \"$bak$i\"\n\tdone\n\t[ $? = 0 ] && echo \"ok, all songs url in the file $file.\"\n        \n其中文件musicurl.txt保存了相关网页\n        \n        http://www.cdbao.net/thread-20150-1-1.html\n        http://www.cdbao.net/thread-20157-1-1.html\n        http://www.cdbao.net/thread-20170-1-1.html\n\n公开一下代码链接吧\n\n[getapeurl.sh](http://johzzy.github.io/resources/getapeurl/getapeurl.sh)\n\n[musicurl.txt](http://johzzy.github.io/resources/getapeurl/musicurl.txt)\n\n生成的链接文件\n\n[songs.txt](http://johzzy.github.io/resources/getapeurl/songs.txt)\n\n欢迎下载，如果可以请分享一下你下载的歌曲给我，谢谢！\n\n(完)\n\n","source":"_posts/2014-11-16-批量获取歌曲链接.md","raw":"---\nlayout: post\ntitle: 批量获取歌曲链接\ndate: 2014-11-16 15:40:59\ntags: shell\ncategories: 未分类\n---\n\n可能是被各种网盘惯坏了，不想一个一个去下载，索性把这些歌曲的网盘链接保存下来，就写了一个批量获取歌曲链接的脚本，在此记录一下。\n\n基本思路很简单：wget下载网页，grep、awk分析网页，保存结果。\n\n代码贴一下：\n\n\t#!/bin/bash\n\t#    File Name: getapeurl.sh\n\t#       Author: johzzy\n\t#        Email: hellojinqiang@gmail.com\n\t# Created Time: Sun 16 Nov 2014 03:01:34 PM CST\n\n\n\t#while read line\n\t#do\n\t#\techo $line\n\t#done < readme.txt\n\n\tpart=\"songs_part\"\n\tbak=\"songs_bak_part\"\n\tfile=\"songs.txt\"\n\tmusicurl=\"musicurl.txt\"\n\n\tdeclare -i num=0\n\n\tfor url in `cat $musicurl` ; \n\tdo\n\t\tlet num++\n\t\tafile=\"$part$num\"\n\t\tbfile=\"$bak$num\"\n\t\techo $url\n\t\twget $url -O $afile -o $file 2>&1 /dev/null\n\t\n\t\tgrep href $afile > $bfile\n\t\tgrep \"http://115.com\" $bfile > $afile\n\t\tawk -F \">\" '{ printf $2 \"\\n\" }' $afile > $bfile\n\t\tawk -F \"<\" '{ printf $1 \"\\n\" }' $bfile > $afile\n\tdone\n\n\techo -n > $file\n\n\tfor i in `seq $num` ;\n\tdo \n\t\tcat \"$part$i\" >> $file\n\t\trm \"$part$i\" \"$bak$i\"\n\tdone\n\t[ $? = 0 ] && echo \"ok, all songs url in the file $file.\"\n        \n其中文件musicurl.txt保存了相关网页\n        \n        http://www.cdbao.net/thread-20150-1-1.html\n        http://www.cdbao.net/thread-20157-1-1.html\n        http://www.cdbao.net/thread-20170-1-1.html\n\n公开一下代码链接吧\n\n[getapeurl.sh](http://johzzy.github.io/resources/getapeurl/getapeurl.sh)\n\n[musicurl.txt](http://johzzy.github.io/resources/getapeurl/musicurl.txt)\n\n生成的链接文件\n\n[songs.txt](http://johzzy.github.io/resources/getapeurl/songs.txt)\n\n欢迎下载，如果可以请分享一下你下载的歌曲给我，谢谢！\n\n(完)\n\n","slug":"2014-11-16-批量获取歌曲链接","published":1,"updated":"2021-06-18T11:16:37.642Z","comments":1,"photos":[],"link":"","_id":"ckqhkhsz50004uavq9zu16hff","content":"<p>可能是被各种网盘惯坏了，不想一个一个去下载，索性把这些歌曲的网盘链接保存下来，就写了一个批量获取歌曲链接的脚本，在此记录一下。</p>\n<p>基本思路很简单：wget下载网页，grep、awk分析网页，保存结果。</p>\n<p>代码贴一下：</p>\n<pre><code>#!/bin/bash\n#    File Name: getapeurl.sh\n#       Author: johzzy\n#        Email: hellojinqiang@gmail.com\n# Created Time: Sun 16 Nov 2014 03:01:34 PM CST\n\n\n#while read line\n#do\n#    echo $line\n#done &lt; readme.txt\n\npart=&quot;songs_part&quot;\nbak=&quot;songs_bak_part&quot;\nfile=&quot;songs.txt&quot;\nmusicurl=&quot;musicurl.txt&quot;\n\ndeclare -i num=0\n\nfor url in `cat $musicurl` ; \ndo\n    let num++\n    afile=&quot;$part$num&quot;\n    bfile=&quot;$bak$num&quot;\n    echo $url\n    wget $url -O $afile -o $file 2&gt;&amp;1 /dev/null\n\n    grep href $afile &gt; $bfile\n    grep &quot;http://115.com&quot; $bfile &gt; $afile\n    awk -F &quot;&gt;&quot; &apos;&#123; printf $2 &quot;\\n&quot; &#125;&apos; $afile &gt; $bfile\n    awk -F &quot;&lt;&quot; &apos;&#123; printf $1 &quot;\\n&quot; &#125;&apos; $bfile &gt; $afile\ndone\n\necho -n &gt; $file\n\nfor i in `seq $num` ;\ndo \n    cat &quot;$part$i&quot; &gt;&gt; $file\n    rm &quot;$part$i&quot; &quot;$bak$i&quot;\ndone\n[ $? = 0 ] &amp;&amp; echo &quot;ok, all songs url in the file $file.&quot;\n</code></pre><p>其中文件musicurl.txt保存了相关网页</p>\n<pre><code>http://www.cdbao.net/thread-20150-1-1.html\nhttp://www.cdbao.net/thread-20157-1-1.html\nhttp://www.cdbao.net/thread-20170-1-1.html\n</code></pre><p>公开一下代码链接吧</p>\n<p><a href=\"http://johzzy.github.io/resources/getapeurl/getapeurl.sh\">getapeurl.sh</a></p>\n<p><a href=\"http://johzzy.github.io/resources/getapeurl/musicurl.txt\">musicurl.txt</a></p>\n<p>生成的链接文件</p>\n<p><a href=\"http://johzzy.github.io/resources/getapeurl/songs.txt\">songs.txt</a></p>\n<p>欢迎下载，如果可以请分享一下你下载的歌曲给我，谢谢！</p>\n<p>(完)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>可能是被各种网盘惯坏了，不想一个一个去下载，索性把这些歌曲的网盘链接保存下来，就写了一个批量获取歌曲链接的脚本，在此记录一下。</p>\n<p>基本思路很简单：wget下载网页，grep、awk分析网页，保存结果。</p>\n<p>代码贴一下：</p>\n<pre><code>#!/bin/bash\n#    File Name: getapeurl.sh\n#       Author: johzzy\n#        Email: hellojinqiang@gmail.com\n# Created Time: Sun 16 Nov 2014 03:01:34 PM CST\n\n\n#while read line\n#do\n#    echo $line\n#done &lt; readme.txt\n\npart=&quot;songs_part&quot;\nbak=&quot;songs_bak_part&quot;\nfile=&quot;songs.txt&quot;\nmusicurl=&quot;musicurl.txt&quot;\n\ndeclare -i num=0\n\nfor url in `cat $musicurl` ; \ndo\n    let num++\n    afile=&quot;$part$num&quot;\n    bfile=&quot;$bak$num&quot;\n    echo $url\n    wget $url -O $afile -o $file 2&gt;&amp;1 /dev/null\n\n    grep href $afile &gt; $bfile\n    grep &quot;http://115.com&quot; $bfile &gt; $afile\n    awk -F &quot;&gt;&quot; &apos;&#123; printf $2 &quot;\\n&quot; &#125;&apos; $afile &gt; $bfile\n    awk -F &quot;&lt;&quot; &apos;&#123; printf $1 &quot;\\n&quot; &#125;&apos; $bfile &gt; $afile\ndone\n\necho -n &gt; $file\n\nfor i in `seq $num` ;\ndo \n    cat &quot;$part$i&quot; &gt;&gt; $file\n    rm &quot;$part$i&quot; &quot;$bak$i&quot;\ndone\n[ $? = 0 ] &amp;&amp; echo &quot;ok, all songs url in the file $file.&quot;\n</code></pre><p>其中文件musicurl.txt保存了相关网页</p>\n<pre><code>http://www.cdbao.net/thread-20150-1-1.html\nhttp://www.cdbao.net/thread-20157-1-1.html\nhttp://www.cdbao.net/thread-20170-1-1.html\n</code></pre><p>公开一下代码链接吧</p>\n<p><a href=\"http://johzzy.github.io/resources/getapeurl/getapeurl.sh\">getapeurl.sh</a></p>\n<p><a href=\"http://johzzy.github.io/resources/getapeurl/musicurl.txt\">musicurl.txt</a></p>\n<p>生成的链接文件</p>\n<p><a href=\"http://johzzy.github.io/resources/getapeurl/songs.txt\">songs.txt</a></p>\n<p>欢迎下载，如果可以请分享一下你下载的歌曲给我，谢谢！</p>\n<p>(完)</p>\n"},{"layout":"post","title":"Python 发送邮件","date":"2015-01-14T06:23:41.000Z","_content":"\n\t#!/bin/python\n\t#    -*-coding: utf-8-*-     \n\t#    File Name: send_mail.py\n\t#       Author: johzzy\n\t#        Email: hellojinqiang@gmail.com\n\t# Created Time: Wed 07 Jan 2015 02:36:04 PM CST\n\n\timport smtplib  \n\tfrom email.mime.text import MIMEText  \n\n\tmailto_list \t= ['Inboxs@inboxmail'] \t\t#收件箱\n\tuser \t\t\t= \"OutboxName\"  \t\t\t#邮件署名 可省略为\"\"\n\tmail_user \t\t= \"Outbox\"    \t\t\t\t#发件箱的用户名\n\tmail_postfix \t= \"outboxmail\"  \t\t\t#发件箱的后缀\n\tmail_pass \t\t= \"OutboxLoginPassword\"   \t#发件箱的登陆密码 \n\tmail_host \t\t= \"smtp.outboxmail\"  \t\t#发件箱的服务器\n\t  \n\tdef send_mail(to_list,sub,content):  \n\t    me = user+\"<\"+mail_user+\"@\"+mail_postfix+\">\"   \t\t\t\t#\tOutboxName<Outbox@outboxmail>\n\t    msg = MIMEText(content,_subtype='plain',_charset='utf8')  \n\t    msg['Subject'] = sub  \n\t    msg['From'] = me  \n\t    msg['To'] = \";\".join(to_list)  \n\t    try:  \n\t        server = smtplib.SMTP()  \n\t        server.connect(mail_host)  \n\t        server.login(mail_user,mail_pass)  \n\t        server.sendmail(me, to_list, msg.as_string())  \n\t        server.close()  \n\t        return True  \n\t    except Exception, e:  \n\t        print str(e)  \n\t        return False  \n\n\tif __name__ == '__main__':  \n\t    if send_mail(mailto_list,\"hello\",\"hello world！\"):  \n\t        print \"发送成功\"  \n\t    else:  \n\t        print \"发送失败\"\n","source":"_posts/2015-1-14-python-发送邮件.md","raw":"---\nlayout: post\ntitle: Python 发送邮件\ndate: 2015-1-14 14:23:41\ntags: Python\ncategories: 未分类\n---\n\n\t#!/bin/python\n\t#    -*-coding: utf-8-*-     \n\t#    File Name: send_mail.py\n\t#       Author: johzzy\n\t#        Email: hellojinqiang@gmail.com\n\t# Created Time: Wed 07 Jan 2015 02:36:04 PM CST\n\n\timport smtplib  \n\tfrom email.mime.text import MIMEText  \n\n\tmailto_list \t= ['Inboxs@inboxmail'] \t\t#收件箱\n\tuser \t\t\t= \"OutboxName\"  \t\t\t#邮件署名 可省略为\"\"\n\tmail_user \t\t= \"Outbox\"    \t\t\t\t#发件箱的用户名\n\tmail_postfix \t= \"outboxmail\"  \t\t\t#发件箱的后缀\n\tmail_pass \t\t= \"OutboxLoginPassword\"   \t#发件箱的登陆密码 \n\tmail_host \t\t= \"smtp.outboxmail\"  \t\t#发件箱的服务器\n\t  \n\tdef send_mail(to_list,sub,content):  \n\t    me = user+\"<\"+mail_user+\"@\"+mail_postfix+\">\"   \t\t\t\t#\tOutboxName<Outbox@outboxmail>\n\t    msg = MIMEText(content,_subtype='plain',_charset='utf8')  \n\t    msg['Subject'] = sub  \n\t    msg['From'] = me  \n\t    msg['To'] = \";\".join(to_list)  \n\t    try:  \n\t        server = smtplib.SMTP()  \n\t        server.connect(mail_host)  \n\t        server.login(mail_user,mail_pass)  \n\t        server.sendmail(me, to_list, msg.as_string())  \n\t        server.close()  \n\t        return True  \n\t    except Exception, e:  \n\t        print str(e)  \n\t        return False  \n\n\tif __name__ == '__main__':  \n\t    if send_mail(mailto_list,\"hello\",\"hello world！\"):  \n\t        print \"发送成功\"  \n\t    else:  \n\t        print \"发送失败\"\n","slug":"2015-1-14-python-发送邮件","published":1,"updated":"2021-06-18T11:16:37.643Z","comments":1,"photos":[],"link":"","_id":"ckqhkhsz60005uavqfyzy7eqc","content":"<pre><code>#!/bin/python\n#    -*-coding: utf-8-*-     \n#    File Name: send_mail.py\n#       Author: johzzy\n#        Email: hellojinqiang@gmail.com\n# Created Time: Wed 07 Jan 2015 02:36:04 PM CST\n\nimport smtplib  \nfrom email.mime.text import MIMEText  \n\nmailto_list     = [&apos;Inboxs@inboxmail&apos;]         #收件箱\nuser             = &quot;OutboxName&quot;              #邮件署名 可省略为&quot;&quot;\nmail_user         = &quot;Outbox&quot;                    #发件箱的用户名\nmail_postfix     = &quot;outboxmail&quot;              #发件箱的后缀\nmail_pass         = &quot;OutboxLoginPassword&quot;       #发件箱的登陆密码 \nmail_host         = &quot;smtp.outboxmail&quot;          #发件箱的服务器\n\ndef send_mail(to_list,sub,content):  \n    me = user+&quot;&lt;&quot;+mail_user+&quot;@&quot;+mail_postfix+&quot;&gt;&quot;                   #    OutboxName&lt;Outbox@outboxmail&gt;\n    msg = MIMEText(content,_subtype=&apos;plain&apos;,_charset=&apos;utf8&apos;)  \n    msg[&apos;Subject&apos;] = sub  \n    msg[&apos;From&apos;] = me  \n    msg[&apos;To&apos;] = &quot;;&quot;.join(to_list)  \n    try:  \n        server = smtplib.SMTP()  \n        server.connect(mail_host)  \n        server.login(mail_user,mail_pass)  \n        server.sendmail(me, to_list, msg.as_string())  \n        server.close()  \n        return True  \n    except Exception, e:  \n        print str(e)  \n        return False  \n\nif __name__ == &apos;__main__&apos;:  \n    if send_mail(mailto_list,&quot;hello&quot;,&quot;hello world！&quot;):  \n        print &quot;发送成功&quot;  \n    else:  \n        print &quot;发送失败&quot;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>#!/bin/python\n#    -*-coding: utf-8-*-     \n#    File Name: send_mail.py\n#       Author: johzzy\n#        Email: hellojinqiang@gmail.com\n# Created Time: Wed 07 Jan 2015 02:36:04 PM CST\n\nimport smtplib  \nfrom email.mime.text import MIMEText  \n\nmailto_list     = [&apos;Inboxs@inboxmail&apos;]         #收件箱\nuser             = &quot;OutboxName&quot;              #邮件署名 可省略为&quot;&quot;\nmail_user         = &quot;Outbox&quot;                    #发件箱的用户名\nmail_postfix     = &quot;outboxmail&quot;              #发件箱的后缀\nmail_pass         = &quot;OutboxLoginPassword&quot;       #发件箱的登陆密码 \nmail_host         = &quot;smtp.outboxmail&quot;          #发件箱的服务器\n\ndef send_mail(to_list,sub,content):  \n    me = user+&quot;&lt;&quot;+mail_user+&quot;@&quot;+mail_postfix+&quot;&gt;&quot;                   #    OutboxName&lt;Outbox@outboxmail&gt;\n    msg = MIMEText(content,_subtype=&apos;plain&apos;,_charset=&apos;utf8&apos;)  \n    msg[&apos;Subject&apos;] = sub  \n    msg[&apos;From&apos;] = me  \n    msg[&apos;To&apos;] = &quot;;&quot;.join(to_list)  \n    try:  \n        server = smtplib.SMTP()  \n        server.connect(mail_host)  \n        server.login(mail_user,mail_pass)  \n        server.sendmail(me, to_list, msg.as_string())  \n        server.close()  \n        return True  \n    except Exception, e:  \n        print str(e)  \n        return False  \n\nif __name__ == &apos;__main__&apos;:  \n    if send_mail(mailto_list,&quot;hello&quot;,&quot;hello world！&quot;):  \n        print &quot;发送成功&quot;  \n    else:  \n        print &quot;发送失败&quot;\n</code></pre>"},{"layout":"post","title":"Python Tree","date":"2015-01-19T23:23:41.000Z","_content":"\n\t#!/usr/bin/env python\n\t#    -*-coding: utf-8-*-     \n\t#    File Name: tree\n\t#       Author: johzzy\n\t#        Email: hellojinqiang@gmail.com\n\t# Created Time: Tue 20 Jan 2015 10:17:03 PM CST\n\n\timport sys\n\timport os\n\n\tDEBUG = False\n\tCLEAN = False\n\tALL = False\n\n\tdef lsall(dir, space = \"\"):\n\t\tdirname = dir\n\t\tglobal CLEAN\n\t\tif CLEAN and not os.listdir(dirname):\n\t\t\tos.rmdir(dirname)\n\t\t\treturn\n\n\t\tdirs = filter(lambda x: ALL or x[0] != '.', os.listdir(dirname))\n\t\tfor item in dirs:\n\t\t\tif os.path.isdir(os.path.join(dirname, item)):\n\t\t\t\tsubspace = space + \"|  \"\n\t\t\t\tprint \"%s%s\" % (subspace, item)\n\t\t\t\tlsall(os.path.join(dirname, item), subspace)\n\t\t\telse:\n\t\t\t\tsubspace = space + \"|--\"\n\t\t\t\tprint \"%s%s\" % (subspace, item)\n\n\n\tdef main(args):\n\t\tfor arg in filter(lambda x: os.path.exists(x), args):\n\t\t\tprint arg\n\t\t\tlsall(arg, \"\")\n\n\tdef help():\n\t\tprint '''\n\tUsage:\n\t1) tree \n\t\tdefault dir is your home directory\n\t2) tree demodir\n\t\tprint all files in demodir\n\t3) tree demo1 demo2 demo3 ...\n\t\tprint all files in these directories\n\t4) tree --help or tree -h\n\t\tprint tree Usage\n\t5) tree --clean or tree -c\n\t\tprint all file(s) in directory(s) and delete empty directory\n\n\tversion: 0.03\n\t author: Johnny Wong\n\t   date: 2015-01-20\n\t\t'''\n\n\tif __name__ == \"__main__\":\n\t\tif len(sys.argv) > 1:\n\t\t\targs = sys.argv[1:]\n\t\telse:\n\t\t\targs = [os.getcwd()]\n\n\t\tif '--help' in args or '-h' in args:\n\t\t\thelp()\n\t\t\texit(0)\n\n\t\tif '--clean' in args:\n\t\t\tCLEAN = True\n\t\t\targs.remove('--clean')\n\t\tif '-c' in args:\n\t\t\tCLEAN = True\n\t\t\targs.remove('-c')\n\n\t\tif '--all' in args:\n\t\t\tALL = True\n\t\t\targs.remove('--all')\n\t\tif '-a' in args:\n\t\t\tALL = True\n\t\t\targs.remove('-a')\n\n\t\tif DEBUG:\n\t\t\targs = ['/home/johzzy/courses']\n\n\t\tmain(args)\n\n","source":"_posts/2015-1-20-python-tree.md","raw":"---\nlayout: post\ntitle: Python Tree\ndate: 2015-1-20 07:23:41\ntags: Python\ncategories: 未分类\n---\n\n\t#!/usr/bin/env python\n\t#    -*-coding: utf-8-*-     \n\t#    File Name: tree\n\t#       Author: johzzy\n\t#        Email: hellojinqiang@gmail.com\n\t# Created Time: Tue 20 Jan 2015 10:17:03 PM CST\n\n\timport sys\n\timport os\n\n\tDEBUG = False\n\tCLEAN = False\n\tALL = False\n\n\tdef lsall(dir, space = \"\"):\n\t\tdirname = dir\n\t\tglobal CLEAN\n\t\tif CLEAN and not os.listdir(dirname):\n\t\t\tos.rmdir(dirname)\n\t\t\treturn\n\n\t\tdirs = filter(lambda x: ALL or x[0] != '.', os.listdir(dirname))\n\t\tfor item in dirs:\n\t\t\tif os.path.isdir(os.path.join(dirname, item)):\n\t\t\t\tsubspace = space + \"|  \"\n\t\t\t\tprint \"%s%s\" % (subspace, item)\n\t\t\t\tlsall(os.path.join(dirname, item), subspace)\n\t\t\telse:\n\t\t\t\tsubspace = space + \"|--\"\n\t\t\t\tprint \"%s%s\" % (subspace, item)\n\n\n\tdef main(args):\n\t\tfor arg in filter(lambda x: os.path.exists(x), args):\n\t\t\tprint arg\n\t\t\tlsall(arg, \"\")\n\n\tdef help():\n\t\tprint '''\n\tUsage:\n\t1) tree \n\t\tdefault dir is your home directory\n\t2) tree demodir\n\t\tprint all files in demodir\n\t3) tree demo1 demo2 demo3 ...\n\t\tprint all files in these directories\n\t4) tree --help or tree -h\n\t\tprint tree Usage\n\t5) tree --clean or tree -c\n\t\tprint all file(s) in directory(s) and delete empty directory\n\n\tversion: 0.03\n\t author: Johnny Wong\n\t   date: 2015-01-20\n\t\t'''\n\n\tif __name__ == \"__main__\":\n\t\tif len(sys.argv) > 1:\n\t\t\targs = sys.argv[1:]\n\t\telse:\n\t\t\targs = [os.getcwd()]\n\n\t\tif '--help' in args or '-h' in args:\n\t\t\thelp()\n\t\t\texit(0)\n\n\t\tif '--clean' in args:\n\t\t\tCLEAN = True\n\t\t\targs.remove('--clean')\n\t\tif '-c' in args:\n\t\t\tCLEAN = True\n\t\t\targs.remove('-c')\n\n\t\tif '--all' in args:\n\t\t\tALL = True\n\t\t\targs.remove('--all')\n\t\tif '-a' in args:\n\t\t\tALL = True\n\t\t\targs.remove('-a')\n\n\t\tif DEBUG:\n\t\t\targs = ['/home/johzzy/courses']\n\n\t\tmain(args)\n\n","slug":"2015-1-20-python-tree","published":1,"updated":"2021-06-18T11:16:37.643Z","comments":1,"photos":[],"link":"","_id":"ckqhkhsz70006uavq32b2cffz","content":"<pre><code>#!/usr/bin/env python\n#    -*-coding: utf-8-*-     \n#    File Name: tree\n#       Author: johzzy\n#        Email: hellojinqiang@gmail.com\n# Created Time: Tue 20 Jan 2015 10:17:03 PM CST\n\nimport sys\nimport os\n\nDEBUG = False\nCLEAN = False\nALL = False\n\ndef lsall(dir, space = &quot;&quot;):\n    dirname = dir\n    global CLEAN\n    if CLEAN and not os.listdir(dirname):\n        os.rmdir(dirname)\n        return\n\n    dirs = filter(lambda x: ALL or x[0] != &apos;.&apos;, os.listdir(dirname))\n    for item in dirs:\n        if os.path.isdir(os.path.join(dirname, item)):\n            subspace = space + &quot;|  &quot;\n            print &quot;%s%s&quot; % (subspace, item)\n            lsall(os.path.join(dirname, item), subspace)\n        else:\n            subspace = space + &quot;|--&quot;\n            print &quot;%s%s&quot; % (subspace, item)\n\n\ndef main(args):\n    for arg in filter(lambda x: os.path.exists(x), args):\n        print arg\n        lsall(arg, &quot;&quot;)\n\ndef help():\n    print &apos;&apos;&apos;\nUsage:\n1) tree \n    default dir is your home directory\n2) tree demodir\n    print all files in demodir\n3) tree demo1 demo2 demo3 ...\n    print all files in these directories\n4) tree --help or tree -h\n    print tree Usage\n5) tree --clean or tree -c\n    print all file(s) in directory(s) and delete empty directory\n\nversion: 0.03\n author: Johnny Wong\n   date: 2015-01-20\n    &apos;&apos;&apos;\n\nif __name__ == &quot;__main__&quot;:\n    if len(sys.argv) &gt; 1:\n        args = sys.argv[1:]\n    else:\n        args = [os.getcwd()]\n\n    if &apos;--help&apos; in args or &apos;-h&apos; in args:\n        help()\n        exit(0)\n\n    if &apos;--clean&apos; in args:\n        CLEAN = True\n        args.remove(&apos;--clean&apos;)\n    if &apos;-c&apos; in args:\n        CLEAN = True\n        args.remove(&apos;-c&apos;)\n\n    if &apos;--all&apos; in args:\n        ALL = True\n        args.remove(&apos;--all&apos;)\n    if &apos;-a&apos; in args:\n        ALL = True\n        args.remove(&apos;-a&apos;)\n\n    if DEBUG:\n        args = [&apos;/home/johzzy/courses&apos;]\n\n    main(args)\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>#!/usr/bin/env python\n#    -*-coding: utf-8-*-     \n#    File Name: tree\n#       Author: johzzy\n#        Email: hellojinqiang@gmail.com\n# Created Time: Tue 20 Jan 2015 10:17:03 PM CST\n\nimport sys\nimport os\n\nDEBUG = False\nCLEAN = False\nALL = False\n\ndef lsall(dir, space = &quot;&quot;):\n    dirname = dir\n    global CLEAN\n    if CLEAN and not os.listdir(dirname):\n        os.rmdir(dirname)\n        return\n\n    dirs = filter(lambda x: ALL or x[0] != &apos;.&apos;, os.listdir(dirname))\n    for item in dirs:\n        if os.path.isdir(os.path.join(dirname, item)):\n            subspace = space + &quot;|  &quot;\n            print &quot;%s%s&quot; % (subspace, item)\n            lsall(os.path.join(dirname, item), subspace)\n        else:\n            subspace = space + &quot;|--&quot;\n            print &quot;%s%s&quot; % (subspace, item)\n\n\ndef main(args):\n    for arg in filter(lambda x: os.path.exists(x), args):\n        print arg\n        lsall(arg, &quot;&quot;)\n\ndef help():\n    print &apos;&apos;&apos;\nUsage:\n1) tree \n    default dir is your home directory\n2) tree demodir\n    print all files in demodir\n3) tree demo1 demo2 demo3 ...\n    print all files in these directories\n4) tree --help or tree -h\n    print tree Usage\n5) tree --clean or tree -c\n    print all file(s) in directory(s) and delete empty directory\n\nversion: 0.03\n author: Johnny Wong\n   date: 2015-01-20\n    &apos;&apos;&apos;\n\nif __name__ == &quot;__main__&quot;:\n    if len(sys.argv) &gt; 1:\n        args = sys.argv[1:]\n    else:\n        args = [os.getcwd()]\n\n    if &apos;--help&apos; in args or &apos;-h&apos; in args:\n        help()\n        exit(0)\n\n    if &apos;--clean&apos; in args:\n        CLEAN = True\n        args.remove(&apos;--clean&apos;)\n    if &apos;-c&apos; in args:\n        CLEAN = True\n        args.remove(&apos;-c&apos;)\n\n    if &apos;--all&apos; in args:\n        ALL = True\n        args.remove(&apos;--all&apos;)\n    if &apos;-a&apos; in args:\n        ALL = True\n        args.remove(&apos;-a&apos;)\n\n    if DEBUG:\n        args = [&apos;/home/johzzy/courses&apos;]\n\n    main(args)\n</code></pre>"},{"layout":"post","title":"计算A文件相对B文件的路径","date":"2015-01-22T07:53:41.000Z","_content":"\n以前写的代码，今天发一下\n\n\n\t/*************************************************************************\n\t\t>    File Name: relative_path.cpp\n\t\t>       Author: johzzy\n\t\t>        Email: hellojinqiang@gmail.com\n\t\t> Created Time: Thu 13 Nov 2014 01:59:18 AM CST\n\t\t>      Compile: g++ relative_path.cpp -std=c++14\n\t ************************************************************************/\n\n\t#include <iostream>\n\t#include <string>\n\t#include <vector>\n\t#include <sstream>\n\n\tusing namespace std;\n\n\tauto split(const string &s, const char delim = ' ')\n\t{\n\t\tstringstream ss(s);\n\t\tstring item;\n\t\tvector<string> elems;\n\n\t\twhile(getline(ss, item, delim) != NULL)\n\t\t{\n\t\t\telems.push_back(item);\n\t\t}\n\t\treturn  elems;\n\t}\n\n\tint main(void)\n\t{\n\t\tstring a, b;\n\t\tcout << \"Please Enter the Absolute Path of the File!\" << endl; \n\t\tcout << \"a = \";\n\t\tcin >> a;\n\t\tcout << \"b = \";\n\t\tcin >> b;\n\n\t\tauto diffpath = [](const string &a, const string &b) {\n\t\t\tint k = 0;\n\t\t\tfor (int i=0; i< a.length() && i<b.length() && a[i] == b[i]; ++i)\n\t\t\t\tif (a[i] == '/') k=i;\n\t\t\treturn k+1;\n\t\t};\n\n\t\tint index = diffpath(a, b);\n\n\t\ta = a.substr(index);\n\t\tb = b.substr(index);\n\n\t\tauto vecta = split(a, '/');\n\t\tauto vectb = split(b, '/');\n\n\t\tstring a_path_b = \"\"; //a relative to b path\n\t\tstring b_path_a = \"\"; //b relative to a path\n\n\t\tfor (int i=1; i<vecta.size(); ++i)\n\t\t\ta_path_b += \"../\";\n\t\ta_path_b += a;\n\n\t\tfor(int i=1; i<vectb.size(); ++i)\n\t\t\tb_path_a += \"../\";\n\t\tb_path_a += b;\n\n\t\tcout << \"a relative to b path: \" << a_path_b << endl;\n\t\tcout << \"b relative to a path: \" << b_path_a << endl;\n\n\t\treturn 0;\n\t}\n","source":"_posts/2015-1-26-计算A文件相对B文件的路径.md","raw":"---\nlayout: post\ntitle: 计算A文件相对B文件的路径\ndate: 2015-1-22 15:53:41\ntags: C++\ncategories: 未分类\n---\n\n以前写的代码，今天发一下\n\n\n\t/*************************************************************************\n\t\t>    File Name: relative_path.cpp\n\t\t>       Author: johzzy\n\t\t>        Email: hellojinqiang@gmail.com\n\t\t> Created Time: Thu 13 Nov 2014 01:59:18 AM CST\n\t\t>      Compile: g++ relative_path.cpp -std=c++14\n\t ************************************************************************/\n\n\t#include <iostream>\n\t#include <string>\n\t#include <vector>\n\t#include <sstream>\n\n\tusing namespace std;\n\n\tauto split(const string &s, const char delim = ' ')\n\t{\n\t\tstringstream ss(s);\n\t\tstring item;\n\t\tvector<string> elems;\n\n\t\twhile(getline(ss, item, delim) != NULL)\n\t\t{\n\t\t\telems.push_back(item);\n\t\t}\n\t\treturn  elems;\n\t}\n\n\tint main(void)\n\t{\n\t\tstring a, b;\n\t\tcout << \"Please Enter the Absolute Path of the File!\" << endl; \n\t\tcout << \"a = \";\n\t\tcin >> a;\n\t\tcout << \"b = \";\n\t\tcin >> b;\n\n\t\tauto diffpath = [](const string &a, const string &b) {\n\t\t\tint k = 0;\n\t\t\tfor (int i=0; i< a.length() && i<b.length() && a[i] == b[i]; ++i)\n\t\t\t\tif (a[i] == '/') k=i;\n\t\t\treturn k+1;\n\t\t};\n\n\t\tint index = diffpath(a, b);\n\n\t\ta = a.substr(index);\n\t\tb = b.substr(index);\n\n\t\tauto vecta = split(a, '/');\n\t\tauto vectb = split(b, '/');\n\n\t\tstring a_path_b = \"\"; //a relative to b path\n\t\tstring b_path_a = \"\"; //b relative to a path\n\n\t\tfor (int i=1; i<vecta.size(); ++i)\n\t\t\ta_path_b += \"../\";\n\t\ta_path_b += a;\n\n\t\tfor(int i=1; i<vectb.size(); ++i)\n\t\t\tb_path_a += \"../\";\n\t\tb_path_a += b;\n\n\t\tcout << \"a relative to b path: \" << a_path_b << endl;\n\t\tcout << \"b relative to a path: \" << b_path_a << endl;\n\n\t\treturn 0;\n\t}\n","slug":"2015-1-26-计算A文件相对B文件的路径","published":1,"updated":"2021-06-18T11:16:37.644Z","comments":1,"photos":[],"link":"","_id":"ckqhkhsza000auavq27eggk5s","content":"<p>以前写的代码，今天发一下</p>\n<pre><code>/*************************************************************************\n    &gt;    File Name: relative_path.cpp\n    &gt;       Author: johzzy\n    &gt;        Email: hellojinqiang@gmail.com\n    &gt; Created Time: Thu 13 Nov 2014 01:59:18 AM CST\n    &gt;      Compile: g++ relative_path.cpp -std=c++14\n ************************************************************************/\n\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;sstream&gt;\n\nusing namespace std;\n\nauto split(const string &amp;s, const char delim = &apos; &apos;)\n&#123;\n    stringstream ss(s);\n    string item;\n    vector&lt;string&gt; elems;\n\n    while(getline(ss, item, delim) != NULL)\n    &#123;\n        elems.push_back(item);\n    &#125;\n    return  elems;\n&#125;\n\nint main(void)\n&#123;\n    string a, b;\n    cout &lt;&lt; &quot;Please Enter the Absolute Path of the File!&quot; &lt;&lt; endl; \n    cout &lt;&lt; &quot;a = &quot;;\n    cin &gt;&gt; a;\n    cout &lt;&lt; &quot;b = &quot;;\n    cin &gt;&gt; b;\n\n    auto diffpath = [](const string &amp;a, const string &amp;b) &#123;\n        int k = 0;\n        for (int i=0; i&lt; a.length() &amp;&amp; i&lt;b.length() &amp;&amp; a[i] == b[i]; ++i)\n            if (a[i] == &apos;/&apos;) k=i;\n        return k+1;\n    &#125;;\n\n    int index = diffpath(a, b);\n\n    a = a.substr(index);\n    b = b.substr(index);\n\n    auto vecta = split(a, &apos;/&apos;);\n    auto vectb = split(b, &apos;/&apos;);\n\n    string a_path_b = &quot;&quot;; //a relative to b path\n    string b_path_a = &quot;&quot;; //b relative to a path\n\n    for (int i=1; i&lt;vecta.size(); ++i)\n        a_path_b += &quot;../&quot;;\n    a_path_b += a;\n\n    for(int i=1; i&lt;vectb.size(); ++i)\n        b_path_a += &quot;../&quot;;\n    b_path_a += b;\n\n    cout &lt;&lt; &quot;a relative to b path: &quot; &lt;&lt; a_path_b &lt;&lt; endl;\n    cout &lt;&lt; &quot;b relative to a path: &quot; &lt;&lt; b_path_a &lt;&lt; endl;\n\n    return 0;\n&#125;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>以前写的代码，今天发一下</p>\n<pre><code>/*************************************************************************\n    &gt;    File Name: relative_path.cpp\n    &gt;       Author: johzzy\n    &gt;        Email: hellojinqiang@gmail.com\n    &gt; Created Time: Thu 13 Nov 2014 01:59:18 AM CST\n    &gt;      Compile: g++ relative_path.cpp -std=c++14\n ************************************************************************/\n\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;sstream&gt;\n\nusing namespace std;\n\nauto split(const string &amp;s, const char delim = &apos; &apos;)\n&#123;\n    stringstream ss(s);\n    string item;\n    vector&lt;string&gt; elems;\n\n    while(getline(ss, item, delim) != NULL)\n    &#123;\n        elems.push_back(item);\n    &#125;\n    return  elems;\n&#125;\n\nint main(void)\n&#123;\n    string a, b;\n    cout &lt;&lt; &quot;Please Enter the Absolute Path of the File!&quot; &lt;&lt; endl; \n    cout &lt;&lt; &quot;a = &quot;;\n    cin &gt;&gt; a;\n    cout &lt;&lt; &quot;b = &quot;;\n    cin &gt;&gt; b;\n\n    auto diffpath = [](const string &amp;a, const string &amp;b) &#123;\n        int k = 0;\n        for (int i=0; i&lt; a.length() &amp;&amp; i&lt;b.length() &amp;&amp; a[i] == b[i]; ++i)\n            if (a[i] == &apos;/&apos;) k=i;\n        return k+1;\n    &#125;;\n\n    int index = diffpath(a, b);\n\n    a = a.substr(index);\n    b = b.substr(index);\n\n    auto vecta = split(a, &apos;/&apos;);\n    auto vectb = split(b, &apos;/&apos;);\n\n    string a_path_b = &quot;&quot;; //a relative to b path\n    string b_path_a = &quot;&quot;; //b relative to a path\n\n    for (int i=1; i&lt;vecta.size(); ++i)\n        a_path_b += &quot;../&quot;;\n    a_path_b += a;\n\n    for(int i=1; i&lt;vectb.size(); ++i)\n        b_path_a += &quot;../&quot;;\n    b_path_a += b;\n\n    cout &lt;&lt; &quot;a relative to b path: &quot; &lt;&lt; a_path_b &lt;&lt; endl;\n    cout &lt;&lt; &quot;b relative to a path: &quot; &lt;&lt; b_path_a &lt;&lt; endl;\n\n    return 0;\n&#125;\n</code></pre>"},{"layout":"post","title":"Python SSH 传输文件","date":"2015-01-13T23:23:41.000Z","_content":"\n\t#!/usr/bin/env python\n\t#    -*-coding: utf-8-*-     \n\t#    File Name: ssh_test.py\n\t#       Author: johzzy\n\t#        Email: hellojinqiang@gmail.com\n\t# Created Time: Tue 13 Jan 2015 07:18:41 PM CST\n\n\timport pexpect  \n\n\timport subprocess\n\n\tclass rsync_tool:\n\t    def __init__(self):\n\t        self.user = 'johnny'\n\t        self.host = '172.16.123.128'\n\t        self.remote_file = '/tmp/joke'\n\t        self.local_file = '/tmp/me'\n\t        self.passwd_file = '/tmp/johnny.pwd'\n\n\t        self.fhandler = open(self.passwd_file, 'r')\n\t        self.passwd = self.fhandler.read()\n\t        self.fhandler.close()\n\n\t    def download(self, remote_file, local_file):\n\t        getfile = 'rsync %s@%s:%s %s' % (self.user, self.host, remote_file, local_file)\n\t        \n\t        child = pexpect.spawn(getfile)\n\t        child.expect(\"password: \")\n\t        child.sendline(self.passwd)\n\t        child.read()\n\n\t    def upload(self, local_file, remote_file):\n\t        sendfile = 'rsync %s %s@%s:%s' % (local_file, self.user, self.host, remote_file)\n\n\t        child = pexpect.spawn(sendfile)\n\t        child.expect(\"password: \")\n\t        child.sendline(self.passwd)\n\t        child.read()\n\n\t    def test(self):\n\t        subprocess.call(\"rsync  --password-file='/tmp/johnny.pwd' johnny@172.16.123.128:/tmp/joke /tmp/joke\")\n\n\t    def main(self):\n\t        self.upload(\"/tmp/hello.txt\", \"/tmp/world.txt\")\n\t        self.download(\"/tmp/world.txt\", \"/tmp/hello\")\n\n\tif __name__ == \"__main__\":\n\t    r = rsync_tool()\n\t    r.main()\n\n\n\n\n","source":"_posts/2015-1-14-python-ssh传输文件.md","raw":"---\nlayout: post\ntitle: Python SSH 传输文件\ndate: 2015-1-14 07:23:41\ntags: Python\ncategories: 未分类\n---\n\n\t#!/usr/bin/env python\n\t#    -*-coding: utf-8-*-     \n\t#    File Name: ssh_test.py\n\t#       Author: johzzy\n\t#        Email: hellojinqiang@gmail.com\n\t# Created Time: Tue 13 Jan 2015 07:18:41 PM CST\n\n\timport pexpect  \n\n\timport subprocess\n\n\tclass rsync_tool:\n\t    def __init__(self):\n\t        self.user = 'johnny'\n\t        self.host = '172.16.123.128'\n\t        self.remote_file = '/tmp/joke'\n\t        self.local_file = '/tmp/me'\n\t        self.passwd_file = '/tmp/johnny.pwd'\n\n\t        self.fhandler = open(self.passwd_file, 'r')\n\t        self.passwd = self.fhandler.read()\n\t        self.fhandler.close()\n\n\t    def download(self, remote_file, local_file):\n\t        getfile = 'rsync %s@%s:%s %s' % (self.user, self.host, remote_file, local_file)\n\t        \n\t        child = pexpect.spawn(getfile)\n\t        child.expect(\"password: \")\n\t        child.sendline(self.passwd)\n\t        child.read()\n\n\t    def upload(self, local_file, remote_file):\n\t        sendfile = 'rsync %s %s@%s:%s' % (local_file, self.user, self.host, remote_file)\n\n\t        child = pexpect.spawn(sendfile)\n\t        child.expect(\"password: \")\n\t        child.sendline(self.passwd)\n\t        child.read()\n\n\t    def test(self):\n\t        subprocess.call(\"rsync  --password-file='/tmp/johnny.pwd' johnny@172.16.123.128:/tmp/joke /tmp/joke\")\n\n\t    def main(self):\n\t        self.upload(\"/tmp/hello.txt\", \"/tmp/world.txt\")\n\t        self.download(\"/tmp/world.txt\", \"/tmp/hello\")\n\n\tif __name__ == \"__main__\":\n\t    r = rsync_tool()\n\t    r.main()\n\n\n\n\n","slug":"2015-1-14-python-ssh传输文件","published":1,"updated":"2021-06-18T11:16:37.643Z","comments":1,"photos":[],"link":"","_id":"ckqhkhszb000buavqb9zach7c","content":"<pre><code>#!/usr/bin/env python\n#    -*-coding: utf-8-*-     \n#    File Name: ssh_test.py\n#       Author: johzzy\n#        Email: hellojinqiang@gmail.com\n# Created Time: Tue 13 Jan 2015 07:18:41 PM CST\n\nimport pexpect  \n\nimport subprocess\n\nclass rsync_tool:\n    def __init__(self):\n        self.user = &apos;johnny&apos;\n        self.host = &apos;172.16.123.128&apos;\n        self.remote_file = &apos;/tmp/joke&apos;\n        self.local_file = &apos;/tmp/me&apos;\n        self.passwd_file = &apos;/tmp/johnny.pwd&apos;\n\n        self.fhandler = open(self.passwd_file, &apos;r&apos;)\n        self.passwd = self.fhandler.read()\n        self.fhandler.close()\n\n    def download(self, remote_file, local_file):\n        getfile = &apos;rsync %s@%s:%s %s&apos; % (self.user, self.host, remote_file, local_file)\n\n        child = pexpect.spawn(getfile)\n        child.expect(&quot;password: &quot;)\n        child.sendline(self.passwd)\n        child.read()\n\n    def upload(self, local_file, remote_file):\n        sendfile = &apos;rsync %s %s@%s:%s&apos; % (local_file, self.user, self.host, remote_file)\n\n        child = pexpect.spawn(sendfile)\n        child.expect(&quot;password: &quot;)\n        child.sendline(self.passwd)\n        child.read()\n\n    def test(self):\n        subprocess.call(&quot;rsync  --password-file=&apos;/tmp/johnny.pwd&apos; johnny@172.16.123.128:/tmp/joke /tmp/joke&quot;)\n\n    def main(self):\n        self.upload(&quot;/tmp/hello.txt&quot;, &quot;/tmp/world.txt&quot;)\n        self.download(&quot;/tmp/world.txt&quot;, &quot;/tmp/hello&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    r = rsync_tool()\n    r.main()\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>#!/usr/bin/env python\n#    -*-coding: utf-8-*-     \n#    File Name: ssh_test.py\n#       Author: johzzy\n#        Email: hellojinqiang@gmail.com\n# Created Time: Tue 13 Jan 2015 07:18:41 PM CST\n\nimport pexpect  \n\nimport subprocess\n\nclass rsync_tool:\n    def __init__(self):\n        self.user = &apos;johnny&apos;\n        self.host = &apos;172.16.123.128&apos;\n        self.remote_file = &apos;/tmp/joke&apos;\n        self.local_file = &apos;/tmp/me&apos;\n        self.passwd_file = &apos;/tmp/johnny.pwd&apos;\n\n        self.fhandler = open(self.passwd_file, &apos;r&apos;)\n        self.passwd = self.fhandler.read()\n        self.fhandler.close()\n\n    def download(self, remote_file, local_file):\n        getfile = &apos;rsync %s@%s:%s %s&apos; % (self.user, self.host, remote_file, local_file)\n\n        child = pexpect.spawn(getfile)\n        child.expect(&quot;password: &quot;)\n        child.sendline(self.passwd)\n        child.read()\n\n    def upload(self, local_file, remote_file):\n        sendfile = &apos;rsync %s %s@%s:%s&apos; % (local_file, self.user, self.host, remote_file)\n\n        child = pexpect.spawn(sendfile)\n        child.expect(&quot;password: &quot;)\n        child.sendline(self.passwd)\n        child.read()\n\n    def test(self):\n        subprocess.call(&quot;rsync  --password-file=&apos;/tmp/johnny.pwd&apos; johnny@172.16.123.128:/tmp/joke /tmp/joke&quot;)\n\n    def main(self):\n        self.upload(&quot;/tmp/hello.txt&quot;, &quot;/tmp/world.txt&quot;)\n        self.download(&quot;/tmp/world.txt&quot;, &quot;/tmp/hello&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    r = rsync_tool()\n    r.main()\n</code></pre>"},{"layout":"post","title":"Ubuntu下搭建FTP服务器","date":"2014-02-21T08:24:44.000Z","_content":"<div>由于连接开发板，传输文件的需要，我在ubuntu上安装了ftp服务器</div>\n<div>FTP软件选择vsftpd（very secure FTP daemon）\n<pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo apt-get install vsftpd</pre>\n<code></code></div>\n<div>命令执行过程中，安装程序会给本地创建一个名为“ftp”的用户组，命令执行完之后会自动启动FTP服务。</div>\n<div></div>\n<div>在浏览器里输入\"ftp://localhost\" 检查FTP端口有没有打开</div>\n<div></div>\n<div>创建一个专门用来访问的用户：ligelaige</div>\n<pre class=\"brush: bash; gutter: true\">mkdir -p /home/test\nuseradd test -g ftp -d /home/test -s /sbin/nologin</pre>\n设置密码:\n<pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# mkdir /home/ligelaige\nroot@ubuntu:/home/uwin# useradd ligelaige -g ftp -d /home/ligelaige/ -s /sbin/nologin\nroot@ubuntu:/home/uwin# passwd ligelaige\n输入新的 UNIX 密码： \n重新输入新的 UNIX 密码： \npasswd：已成功更新密码\nroot@ubuntu:/home/uwin#</pre>\n<div> 修改vsftpd的配置文件</div>\n<div>\n<pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# gedit /etc/vsftpd.conf</pre>\n</div>\n<div>\n\n需要修改到字段有\n<pre class=\"brush: bash; gutter: true\">#禁止匿名访问\nanonymous_enable=NO\n#接受本地用户\nlocal_enable=YES\n#可以上传\nwrite_enable=YES\n#启用在chroot_list_file的用户只能访问根目录\nchroot_list_enable=YES\nchroot_list_file=/etc/vsftpd.chroot_list</pre>\n建议修改的方法是\n\n</div>\n<div>alt + F 搜索 anonymous_enable=NO（举例）进行修改</div>\n<div></div>\n<div>\n\n在/etc/vsftpd.chroot_list添加受访问目录限制的用户：\n<pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# echo &quot;ligelaige&quot; &gt;&gt; /etc/vsftpd.chroot_list\nroot@ubuntu:/home/uwin# chmod a-w /home/ligelaige/</pre>\n重启vsftpd之后就可以使用ligelaige账号访问了\n<pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo service vsftpd restart</pre>\n</div>","source":"_posts/2014-2-21-Ubuntu下搭建FTP服务器.md","raw":"---\nlayout: post\ntitle: Ubuntu下搭建FTP服务器\ndate: 2014-02-21 16:24:44\ntags: FTP\ncategories: 未分类\n---\n<div>由于连接开发板，传输文件的需要，我在ubuntu上安装了ftp服务器</div>\n<div>FTP软件选择vsftpd（very secure FTP daemon）\n<pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo apt-get install vsftpd</pre>\n<code></code></div>\n<div>命令执行过程中，安装程序会给本地创建一个名为“ftp”的用户组，命令执行完之后会自动启动FTP服务。</div>\n<div></div>\n<div>在浏览器里输入\"ftp://localhost\" 检查FTP端口有没有打开</div>\n<div></div>\n<div>创建一个专门用来访问的用户：ligelaige</div>\n<pre class=\"brush: bash; gutter: true\">mkdir -p /home/test\nuseradd test -g ftp -d /home/test -s /sbin/nologin</pre>\n设置密码:\n<pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# mkdir /home/ligelaige\nroot@ubuntu:/home/uwin# useradd ligelaige -g ftp -d /home/ligelaige/ -s /sbin/nologin\nroot@ubuntu:/home/uwin# passwd ligelaige\n输入新的 UNIX 密码： \n重新输入新的 UNIX 密码： \npasswd：已成功更新密码\nroot@ubuntu:/home/uwin#</pre>\n<div> 修改vsftpd的配置文件</div>\n<div>\n<pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# gedit /etc/vsftpd.conf</pre>\n</div>\n<div>\n\n需要修改到字段有\n<pre class=\"brush: bash; gutter: true\">#禁止匿名访问\nanonymous_enable=NO\n#接受本地用户\nlocal_enable=YES\n#可以上传\nwrite_enable=YES\n#启用在chroot_list_file的用户只能访问根目录\nchroot_list_enable=YES\nchroot_list_file=/etc/vsftpd.chroot_list</pre>\n建议修改的方法是\n\n</div>\n<div>alt + F 搜索 anonymous_enable=NO（举例）进行修改</div>\n<div></div>\n<div>\n\n在/etc/vsftpd.chroot_list添加受访问目录限制的用户：\n<pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# echo &quot;ligelaige&quot; &gt;&gt; /etc/vsftpd.chroot_list\nroot@ubuntu:/home/uwin# chmod a-w /home/ligelaige/</pre>\n重启vsftpd之后就可以使用ligelaige账号访问了\n<pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo service vsftpd restart</pre>\n</div>","slug":"2014-2-21-Ubuntu下搭建FTP服务器","published":1,"updated":"2021-06-16T08:32:53.702Z","comments":1,"photos":[],"link":"","_id":"ckqhkhsze000fuavqfrmi3qkf","content":"<div>由于连接开发板，传输文件的需要，我在ubuntu上安装了ftp服务器</div><br><div>FTP软件选择vsftpd（very secure FTP daemon）<br><pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo apt-get install vsftpd</pre><br><code></code></div><br><div>命令执行过程中，安装程序会给本地创建一个名为“ftp”的用户组，命令执行完之后会自动启动FTP服务。</div><br><div></div><br><div>在浏览器里输入”<a href=\"ftp://localhost&quot;\">ftp://localhost&quot;</a> 检查FTP端口有没有打开</div><br><div></div><br><div>创建一个专门用来访问的用户：ligelaige</div><br><pre class=\"brush: bash; gutter: true\">mkdir -p /home/test<br>useradd test -g ftp -d /home/test -s /sbin/nologin</pre><br>设置密码:<br><pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# mkdir /home/ligelaige<br>root@ubuntu:/home/uwin# useradd ligelaige -g ftp -d /home/ligelaige/ -s /sbin/nologin<br>root@ubuntu:/home/uwin# passwd ligelaige<br>输入新的 UNIX 密码：<br>重新输入新的 UNIX 密码：<br>passwd：已成功更新密码<br>root@ubuntu:/home/uwin#</pre><br><div> 修改vsftpd的配置文件</div><br><div><br><pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# gedit /etc/vsftpd.conf</pre><br></div><br><div><br><br>需要修改到字段有<br><pre class=\"brush: bash; gutter: true\">#禁止匿名访问<br>anonymous_enable=NO<br>#接受本地用户<br>local_enable=YES<br>#可以上传<br>write_enable=YES<br>#启用在chroot_list_file的用户只能访问根目录<br>chroot_list_enable=YES<br>chroot_list_file=/etc/vsftpd.chroot_list</pre><br>建议修改的方法是<br><br></div><br><div>alt + F 搜索 anonymous_enable=NO（举例）进行修改</div><br><div></div><br><div><br><br>在/etc/vsftpd.chroot_list添加受访问目录限制的用户：<br><pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# echo &quot;ligelaige&quot; &gt;&gt; /etc/vsftpd.chroot_list<br>root@ubuntu:/home/uwin# chmod a-w /home/ligelaige/</pre><br>重启vsftpd之后就可以使用ligelaige账号访问了<br><pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo service vsftpd restart</pre><br></div>","site":{"data":{}},"excerpt":"","more":"<div>由于连接开发板，传输文件的需要，我在ubuntu上安装了ftp服务器</div><br><div>FTP软件选择vsftpd（very secure FTP daemon）<br><pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo apt-get install vsftpd</pre><br><code></code></div><br><div>命令执行过程中，安装程序会给本地创建一个名为“ftp”的用户组，命令执行完之后会自动启动FTP服务。</div><br><div></div><br><div>在浏览器里输入”<a href=\"ftp://localhost&quot;\">ftp://localhost&quot;</a> 检查FTP端口有没有打开</div><br><div></div><br><div>创建一个专门用来访问的用户：ligelaige</div><br><pre class=\"brush: bash; gutter: true\">mkdir -p /home/test<br>useradd test -g ftp -d /home/test -s /sbin/nologin</pre><br>设置密码:<br><pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# mkdir /home/ligelaige<br>root@ubuntu:/home/uwin# useradd ligelaige -g ftp -d /home/ligelaige/ -s /sbin/nologin<br>root@ubuntu:/home/uwin# passwd ligelaige<br>输入新的 UNIX 密码：<br>重新输入新的 UNIX 密码：<br>passwd：已成功更新密码<br>root@ubuntu:/home/uwin#</pre><br><div> 修改vsftpd的配置文件</div><br><div><br><pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# gedit /etc/vsftpd.conf</pre><br></div><br><div><br><br>需要修改到字段有<br><pre class=\"brush: bash; gutter: true\">#禁止匿名访问<br>anonymous_enable=NO<br>#接受本地用户<br>local_enable=YES<br>#可以上传<br>write_enable=YES<br>#启用在chroot_list_file的用户只能访问根目录<br>chroot_list_enable=YES<br>chroot_list_file=/etc/vsftpd.chroot_list</pre><br>建议修改的方法是<br><br></div><br><div>alt + F 搜索 anonymous_enable=NO（举例）进行修改</div><br><div></div><br><div><br><br>在/etc/vsftpd.chroot_list添加受访问目录限制的用户：<br><pre class=\"brush: bash; gutter: true\">root@ubuntu:/home/uwin# echo &quot;ligelaige&quot; &gt;&gt; /etc/vsftpd.chroot_list<br>root@ubuntu:/home/uwin# chmod a-w /home/ligelaige/</pre><br>重启vsftpd之后就可以使用ligelaige账号访问了<br><pre class=\"brush: bash; gutter: true\">uwin@ubuntu:~$ sudo service vsftpd restart</pre><br></div>"},{"layout":"post","title":"Mini-Seed笔记","date":"2015-11-15T07:06:05.000Z","_content":"\n下载libmseed代码库\n\n\thttps://seiscode.iris.washington.edu/projects/libmseed/files\n\n将 miniseed 数据流转化为 MSRecord 结构\n\t\n\t\n\t// 引入头文件\n\t#include \"libmseed.h\"\n\t// 初始化一个 MSRecord\n\tMSRecord *msr = msr_init(NULL);\n\t/* 标注1 */\n\t// 尝试Unpack，如果 retcode == MS_NOERROR，则成功，相应信息保存在 msr 中\n\tint retcode = msr_unpack((char *)mseed_buffer, mseed_buffer_length, &msr, true, 1);\n\t// 从 msr 获取信息\n\tchar* network = msr->network;\n\tchar* station = msr->station;\n\tchar* channel = msr->channel;\n\tchar* location = msr->location;\n\tchar* starttime = msr->starttime;\n\tchar* samprate = msr->samprate;\n\n\tunsigned int numsamples =  msr->numsamples;\n\tchar sampletype = msr->sampletype;\n\n\tvoid * datasamples = msr->datasamples;\n\n\t// 释放MSRecord\n\tmsr_free(&msr);\n\t\n\n标注\n\n\t如果mseed使用的是国家标准\n\t在 `标注1` 处可能需要修正 mseed 数据流，原因是在libmseed.h中有一个宏定义检查\n\t\n\t\t#define MS_ISVALIDHEADER(X) (                               \\\n\t\t  (isdigit ((int) *(X))   || *(X)   == ' ' || !*(X) )   &&  \\\n\t\t  (isdigit ((int) *(X+1)) || *(X+1) == ' ' || !*(X+1) ) &&  \\\n\t\t  (isdigit ((int) *(X+2)) || *(X+2) == ' ' || !*(X+2) ) &&  \\\n\t\t  (isdigit ((int) *(X+3)) || *(X+3) == ' ' || !*(X+3) ) &&  \\\n\t\t  (isdigit ((int) *(X+4)) || *(X+4) == ' ' || !*(X+4) ) &&  \\\n\t\t  (isdigit ((int) *(X+5)) || *(X+5) == ' ' || !*(X+5) ) &&  \\\n\t\t  MS_ISDATAINDICATOR(*(X+6)) &&                             \\\n\t\t  (*(X+7) == ' ' || *(X+7) == '\\0') &&                      \\\n\t\t  (int)(*(X+24)) >= 0 && (int)(*(X+24)) <= 23 &&            \\\n\t\t  (int)(*(X+25)) >= 0 && (int)(*(X+25)) <= 59 &&            \\\n\t\t  (int)(*(X+26)) >= 0 && (int)(*(X+26)) <= 60 )\n\t\n\t修正的方式可以将mseed_buffer的前6个字节置为 0(ascii 0, 不是 '0')，之前注意保存副本。\n\n\t此外，可能会遇到大小端的问题\n\n大小端转换\n\n\t\n\t#define BigtoLittle16(A) ((((u16)(A) & 0xff00) >> 8) | (((u16)(A) & 0x00ff) << 8))\n\t#define BigtoLittle32(A) ((((u32)(A) & 0xff000000) >> 24) | (((u32)(A) & 0x00ff0000) >> 8) | (((u32)(A) & 0x0000ff00) << 8)  | (((u32)(A) & 0x000000ff) << 24))\n\t\n\n另外，可能需要在设计数据结构时，注意内存对齐，解决的方法是 修改数据结构，或者 添加编译器指令 \n\n\t#pragma   pack(n)\n\n\n\n","source":"_posts/2015-11-15-miniseed-note.md","raw":"---\nlayout: post\ntitle: Mini-Seed笔记 \ndate: 2015-11-15 15:06:05\ncategories: 未分类\n---\n\n下载libmseed代码库\n\n\thttps://seiscode.iris.washington.edu/projects/libmseed/files\n\n将 miniseed 数据流转化为 MSRecord 结构\n\t\n\t\n\t// 引入头文件\n\t#include \"libmseed.h\"\n\t// 初始化一个 MSRecord\n\tMSRecord *msr = msr_init(NULL);\n\t/* 标注1 */\n\t// 尝试Unpack，如果 retcode == MS_NOERROR，则成功，相应信息保存在 msr 中\n\tint retcode = msr_unpack((char *)mseed_buffer, mseed_buffer_length, &msr, true, 1);\n\t// 从 msr 获取信息\n\tchar* network = msr->network;\n\tchar* station = msr->station;\n\tchar* channel = msr->channel;\n\tchar* location = msr->location;\n\tchar* starttime = msr->starttime;\n\tchar* samprate = msr->samprate;\n\n\tunsigned int numsamples =  msr->numsamples;\n\tchar sampletype = msr->sampletype;\n\n\tvoid * datasamples = msr->datasamples;\n\n\t// 释放MSRecord\n\tmsr_free(&msr);\n\t\n\n标注\n\n\t如果mseed使用的是国家标准\n\t在 `标注1` 处可能需要修正 mseed 数据流，原因是在libmseed.h中有一个宏定义检查\n\t\n\t\t#define MS_ISVALIDHEADER(X) (                               \\\n\t\t  (isdigit ((int) *(X))   || *(X)   == ' ' || !*(X) )   &&  \\\n\t\t  (isdigit ((int) *(X+1)) || *(X+1) == ' ' || !*(X+1) ) &&  \\\n\t\t  (isdigit ((int) *(X+2)) || *(X+2) == ' ' || !*(X+2) ) &&  \\\n\t\t  (isdigit ((int) *(X+3)) || *(X+3) == ' ' || !*(X+3) ) &&  \\\n\t\t  (isdigit ((int) *(X+4)) || *(X+4) == ' ' || !*(X+4) ) &&  \\\n\t\t  (isdigit ((int) *(X+5)) || *(X+5) == ' ' || !*(X+5) ) &&  \\\n\t\t  MS_ISDATAINDICATOR(*(X+6)) &&                             \\\n\t\t  (*(X+7) == ' ' || *(X+7) == '\\0') &&                      \\\n\t\t  (int)(*(X+24)) >= 0 && (int)(*(X+24)) <= 23 &&            \\\n\t\t  (int)(*(X+25)) >= 0 && (int)(*(X+25)) <= 59 &&            \\\n\t\t  (int)(*(X+26)) >= 0 && (int)(*(X+26)) <= 60 )\n\t\n\t修正的方式可以将mseed_buffer的前6个字节置为 0(ascii 0, 不是 '0')，之前注意保存副本。\n\n\t此外，可能会遇到大小端的问题\n\n大小端转换\n\n\t\n\t#define BigtoLittle16(A) ((((u16)(A) & 0xff00) >> 8) | (((u16)(A) & 0x00ff) << 8))\n\t#define BigtoLittle32(A) ((((u32)(A) & 0xff000000) >> 24) | (((u32)(A) & 0x00ff0000) >> 8) | (((u32)(A) & 0x0000ff00) << 8)  | (((u32)(A) & 0x000000ff) << 24))\n\t\n\n另外，可能需要在设计数据结构时，注意内存对齐，解决的方法是 修改数据结构，或者 添加编译器指令 \n\n\t#pragma   pack(n)\n\n\n\n","slug":"2015-11-15-miniseed-note","published":1,"updated":"2021-06-18T11:16:37.645Z","comments":1,"photos":[],"link":"","_id":"ckqhkhszf000iuavqdz8laa2e","content":"<p>下载libmseed代码库</p>\n<pre><code>https://seiscode.iris.washington.edu/projects/libmseed/files\n</code></pre><p>将 miniseed 数据流转化为 MSRecord 结构</p>\n<pre><code>// 引入头文件\n#include &quot;libmseed.h&quot;\n// 初始化一个 MSRecord\nMSRecord *msr = msr_init(NULL);\n/* 标注1 */\n// 尝试Unpack，如果 retcode == MS_NOERROR，则成功，相应信息保存在 msr 中\nint retcode = msr_unpack((char *)mseed_buffer, mseed_buffer_length, &amp;msr, true, 1);\n// 从 msr 获取信息\nchar* network = msr-&gt;network;\nchar* station = msr-&gt;station;\nchar* channel = msr-&gt;channel;\nchar* location = msr-&gt;location;\nchar* starttime = msr-&gt;starttime;\nchar* samprate = msr-&gt;samprate;\n\nunsigned int numsamples =  msr-&gt;numsamples;\nchar sampletype = msr-&gt;sampletype;\n\nvoid * datasamples = msr-&gt;datasamples;\n\n// 释放MSRecord\nmsr_free(&amp;msr);\n</code></pre><p>标注</p>\n<pre><code>如果mseed使用的是国家标准\n在 `标注1` 处可能需要修正 mseed 数据流，原因是在libmseed.h中有一个宏定义检查\n\n    #define MS_ISVALIDHEADER(X) (                               \\\n      (isdigit ((int) *(X))   || *(X)   == &apos; &apos; || !*(X) )   &amp;&amp;  \\\n      (isdigit ((int) *(X+1)) || *(X+1) == &apos; &apos; || !*(X+1) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+2)) || *(X+2) == &apos; &apos; || !*(X+2) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+3)) || *(X+3) == &apos; &apos; || !*(X+3) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+4)) || *(X+4) == &apos; &apos; || !*(X+4) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+5)) || *(X+5) == &apos; &apos; || !*(X+5) ) &amp;&amp;  \\\n      MS_ISDATAINDICATOR(*(X+6)) &amp;&amp;                             \\\n      (*(X+7) == &apos; &apos; || *(X+7) == &apos;\\0&apos;) &amp;&amp;                      \\\n      (int)(*(X+24)) &gt;= 0 &amp;&amp; (int)(*(X+24)) &lt;= 23 &amp;&amp;            \\\n      (int)(*(X+25)) &gt;= 0 &amp;&amp; (int)(*(X+25)) &lt;= 59 &amp;&amp;            \\\n      (int)(*(X+26)) &gt;= 0 &amp;&amp; (int)(*(X+26)) &lt;= 60 )\n\n修正的方式可以将mseed_buffer的前6个字节置为 0(ascii 0, 不是 &apos;0&apos;)，之前注意保存副本。\n\n此外，可能会遇到大小端的问题\n</code></pre><p>大小端转换</p>\n<pre><code>#define BigtoLittle16(A) ((((u16)(A) &amp; 0xff00) &gt;&gt; 8) | (((u16)(A) &amp; 0x00ff) &lt;&lt; 8))\n#define BigtoLittle32(A) ((((u32)(A) &amp; 0xff000000) &gt;&gt; 24) | (((u32)(A) &amp; 0x00ff0000) &gt;&gt; 8) | (((u32)(A) &amp; 0x0000ff00) &lt;&lt; 8)  | (((u32)(A) &amp; 0x000000ff) &lt;&lt; 24))\n</code></pre><p>另外，可能需要在设计数据结构时，注意内存对齐，解决的方法是 修改数据结构，或者 添加编译器指令 </p>\n<pre><code>#pragma   pack(n)\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>下载libmseed代码库</p>\n<pre><code>https://seiscode.iris.washington.edu/projects/libmseed/files\n</code></pre><p>将 miniseed 数据流转化为 MSRecord 结构</p>\n<pre><code>// 引入头文件\n#include &quot;libmseed.h&quot;\n// 初始化一个 MSRecord\nMSRecord *msr = msr_init(NULL);\n/* 标注1 */\n// 尝试Unpack，如果 retcode == MS_NOERROR，则成功，相应信息保存在 msr 中\nint retcode = msr_unpack((char *)mseed_buffer, mseed_buffer_length, &amp;msr, true, 1);\n// 从 msr 获取信息\nchar* network = msr-&gt;network;\nchar* station = msr-&gt;station;\nchar* channel = msr-&gt;channel;\nchar* location = msr-&gt;location;\nchar* starttime = msr-&gt;starttime;\nchar* samprate = msr-&gt;samprate;\n\nunsigned int numsamples =  msr-&gt;numsamples;\nchar sampletype = msr-&gt;sampletype;\n\nvoid * datasamples = msr-&gt;datasamples;\n\n// 释放MSRecord\nmsr_free(&amp;msr);\n</code></pre><p>标注</p>\n<pre><code>如果mseed使用的是国家标准\n在 `标注1` 处可能需要修正 mseed 数据流，原因是在libmseed.h中有一个宏定义检查\n\n    #define MS_ISVALIDHEADER(X) (                               \\\n      (isdigit ((int) *(X))   || *(X)   == &apos; &apos; || !*(X) )   &amp;&amp;  \\\n      (isdigit ((int) *(X+1)) || *(X+1) == &apos; &apos; || !*(X+1) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+2)) || *(X+2) == &apos; &apos; || !*(X+2) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+3)) || *(X+3) == &apos; &apos; || !*(X+3) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+4)) || *(X+4) == &apos; &apos; || !*(X+4) ) &amp;&amp;  \\\n      (isdigit ((int) *(X+5)) || *(X+5) == &apos; &apos; || !*(X+5) ) &amp;&amp;  \\\n      MS_ISDATAINDICATOR(*(X+6)) &amp;&amp;                             \\\n      (*(X+7) == &apos; &apos; || *(X+7) == &apos;\\0&apos;) &amp;&amp;                      \\\n      (int)(*(X+24)) &gt;= 0 &amp;&amp; (int)(*(X+24)) &lt;= 23 &amp;&amp;            \\\n      (int)(*(X+25)) &gt;= 0 &amp;&amp; (int)(*(X+25)) &lt;= 59 &amp;&amp;            \\\n      (int)(*(X+26)) &gt;= 0 &amp;&amp; (int)(*(X+26)) &lt;= 60 )\n\n修正的方式可以将mseed_buffer的前6个字节置为 0(ascii 0, 不是 &apos;0&apos;)，之前注意保存副本。\n\n此外，可能会遇到大小端的问题\n</code></pre><p>大小端转换</p>\n<pre><code>#define BigtoLittle16(A) ((((u16)(A) &amp; 0xff00) &gt;&gt; 8) | (((u16)(A) &amp; 0x00ff) &lt;&lt; 8))\n#define BigtoLittle32(A) ((((u32)(A) &amp; 0xff000000) &gt;&gt; 24) | (((u32)(A) &amp; 0x00ff0000) &gt;&gt; 8) | (((u32)(A) &amp; 0x0000ff00) &lt;&lt; 8)  | (((u32)(A) &amp; 0x000000ff) &lt;&lt; 24))\n</code></pre><p>另外，可能需要在设计数据结构时，注意内存对齐，解决的方法是 修改数据结构，或者 添加编译器指令 </p>\n<pre><code>#pragma   pack(n)\n</code></pre>"},{"layout":"post","title":"C++内存对齐","date":"2015-11-20T02:06:05.000Z","_content":"\n# 代码\n\n\t`\n\t#pragma pack(push)\n\t#pragma pack(n)\n\t#pragma pack(show)\n\tstruct A\n\t{\n\t\tchar     c;     //1byte\n\t\tdouble   d;     //8byte\n\t\tshort    s;     //2byte\n\t\tint      i;     //4byte\n\t};\n\t#pragma pack(pop)\n\t#pragma pack(show)\n\tint main(int argc, char* argv[])\n\t{\n\t\tA a;\n\t\tprintf(\"A length: %d\\n\",sizeof(A));\n\t\tprintf(\"a.c:%10d\\na.d:%10d\\na.s:%10d\\na.i:%10d\\n\",&a.c, &a.d, &a.s, &a.i);\n\t\treturn 0;\n\t}\n\t`\n# n = 1\n内存对齐的结果为1，相当于不进行内存对齐，一些协议的设计可能会迫使我们修改n为1，\n结果如下：\n\n\tA length: 15\n\ta.c:  11795164\n\ta.d:  11795165\n\ta.s:  11795173\n\ta.i:  11795175\n\n其中，这里的4913360不一定是2、4或者8的倍数。\n\n# n = 2\n结果如下：\n\n\tA length: 16\n\ta.c:  12516948\n\ta.d:  12516950\n\ta.s:  12516958\n\ta.i:  12516960\n\n# n = 3\n编译器警告：warning C4086: 杂注参数应为“1”、“2”、“4”、“8”或者“16”\n结果是：\n\n\tA length: 24\n\ta.c:   9959560\n\ta.d:   9959568\n\ta.s:   9959576\n\ta.i:   9959580\n\n所以，最好取n为2的幂（此时，编译器以默认值#pragma pack(8)对齐）\n\n# n = 4\n结果如下：\n\n\tA length: 20\n\ta.c:  12516320\n\ta.d:  12516324\n\ta.s:  12516332\n\ta.i:  12516336\n\n# n = 8\n结果如下：\n\n\tA length: 24\n\ta.c:  17300184\n\ta.d:  17300192\n\ta.s:  17300200\n\ta.i:  17300204\n\n# 当注释内存对齐指令时\n//#pragma   pack(n)\n\n结果\n\n\tA length: 24\n\ta.c:   8453680\n\ta.d:   8453688\n\ta.s:   8453696\n\ta.i:   8453700\n\n所以 如果不指定内存对齐，或者内存对齐不是2的幂次时，\n编译器给出默认值 \n`#pragma   pack(8)`\n另外，当n取值不合适时，可能需要2次寻址\n\n注：\n\nWindows 8.1 Pro x64 bit\n\n用于 80x86 的 Microsoft (R) 32 位 C/C++ 优化编译器 16.00.30319.01 版\n","source":"_posts/2015-11-20-C++内存对齐.md","raw":"---\nlayout: post\ntitle: C++内存对齐\ndate: 2015-11-20 10:06:05\ncategories: 未分类\n---\n\n# 代码\n\n\t`\n\t#pragma pack(push)\n\t#pragma pack(n)\n\t#pragma pack(show)\n\tstruct A\n\t{\n\t\tchar     c;     //1byte\n\t\tdouble   d;     //8byte\n\t\tshort    s;     //2byte\n\t\tint      i;     //4byte\n\t};\n\t#pragma pack(pop)\n\t#pragma pack(show)\n\tint main(int argc, char* argv[])\n\t{\n\t\tA a;\n\t\tprintf(\"A length: %d\\n\",sizeof(A));\n\t\tprintf(\"a.c:%10d\\na.d:%10d\\na.s:%10d\\na.i:%10d\\n\",&a.c, &a.d, &a.s, &a.i);\n\t\treturn 0;\n\t}\n\t`\n# n = 1\n内存对齐的结果为1，相当于不进行内存对齐，一些协议的设计可能会迫使我们修改n为1，\n结果如下：\n\n\tA length: 15\n\ta.c:  11795164\n\ta.d:  11795165\n\ta.s:  11795173\n\ta.i:  11795175\n\n其中，这里的4913360不一定是2、4或者8的倍数。\n\n# n = 2\n结果如下：\n\n\tA length: 16\n\ta.c:  12516948\n\ta.d:  12516950\n\ta.s:  12516958\n\ta.i:  12516960\n\n# n = 3\n编译器警告：warning C4086: 杂注参数应为“1”、“2”、“4”、“8”或者“16”\n结果是：\n\n\tA length: 24\n\ta.c:   9959560\n\ta.d:   9959568\n\ta.s:   9959576\n\ta.i:   9959580\n\n所以，最好取n为2的幂（此时，编译器以默认值#pragma pack(8)对齐）\n\n# n = 4\n结果如下：\n\n\tA length: 20\n\ta.c:  12516320\n\ta.d:  12516324\n\ta.s:  12516332\n\ta.i:  12516336\n\n# n = 8\n结果如下：\n\n\tA length: 24\n\ta.c:  17300184\n\ta.d:  17300192\n\ta.s:  17300200\n\ta.i:  17300204\n\n# 当注释内存对齐指令时\n//#pragma   pack(n)\n\n结果\n\n\tA length: 24\n\ta.c:   8453680\n\ta.d:   8453688\n\ta.s:   8453696\n\ta.i:   8453700\n\n所以 如果不指定内存对齐，或者内存对齐不是2的幂次时，\n编译器给出默认值 \n`#pragma   pack(8)`\n另外，当n取值不合适时，可能需要2次寻址\n\n注：\n\nWindows 8.1 Pro x64 bit\n\n用于 80x86 的 Microsoft (R) 32 位 C/C++ 优化编译器 16.00.30319.01 版\n","slug":"2015-11-20-C++内存对齐","published":1,"updated":"2021-06-16T08:32:53.703Z","comments":1,"photos":[],"link":"","_id":"ckqhkhszi000luavq8nm90t9k","content":"<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><pre><code>`\n#pragma pack(push)\n#pragma pack(n)\n#pragma pack(show)\nstruct A\n&#123;\n    char     c;     //1byte\n    double   d;     //8byte\n    short    s;     //2byte\n    int      i;     //4byte\n&#125;;\n#pragma pack(pop)\n#pragma pack(show)\nint main(int argc, char* argv[])\n&#123;\n    A a;\n    printf(&quot;A length: %d\\n&quot;,sizeof(A));\n    printf(&quot;a.c:%10d\\na.d:%10d\\na.s:%10d\\na.i:%10d\\n&quot;,&amp;a.c, &amp;a.d, &amp;a.s, &amp;a.i);\n    return 0;\n&#125;\n`\n</code></pre><h1 id=\"n-1\"><a href=\"#n-1\" class=\"headerlink\" title=\"n = 1\"></a>n = 1</h1><p>内存对齐的结果为1，相当于不进行内存对齐，一些协议的设计可能会迫使我们修改n为1，<br>结果如下：</p>\n<pre><code>A length: 15\na.c:  11795164\na.d:  11795165\na.s:  11795173\na.i:  11795175\n</code></pre><p>其中，这里的4913360不一定是2、4或者8的倍数。</p>\n<h1 id=\"n-2\"><a href=\"#n-2\" class=\"headerlink\" title=\"n = 2\"></a>n = 2</h1><p>结果如下：</p>\n<pre><code>A length: 16\na.c:  12516948\na.d:  12516950\na.s:  12516958\na.i:  12516960\n</code></pre><h1 id=\"n-3\"><a href=\"#n-3\" class=\"headerlink\" title=\"n = 3\"></a>n = 3</h1><p>编译器警告：warning C4086: 杂注参数应为“1”、“2”、“4”、“8”或者“16”<br>结果是：</p>\n<pre><code>A length: 24\na.c:   9959560\na.d:   9959568\na.s:   9959576\na.i:   9959580\n</code></pre><p>所以，最好取n为2的幂（此时，编译器以默认值#pragma pack(8)对齐）</p>\n<h1 id=\"n-4\"><a href=\"#n-4\" class=\"headerlink\" title=\"n = 4\"></a>n = 4</h1><p>结果如下：</p>\n<pre><code>A length: 20\na.c:  12516320\na.d:  12516324\na.s:  12516332\na.i:  12516336\n</code></pre><h1 id=\"n-8\"><a href=\"#n-8\" class=\"headerlink\" title=\"n = 8\"></a>n = 8</h1><p>结果如下：</p>\n<pre><code>A length: 24\na.c:  17300184\na.d:  17300192\na.s:  17300200\na.i:  17300204\n</code></pre><h1 id=\"当注释内存对齐指令时\"><a href=\"#当注释内存对齐指令时\" class=\"headerlink\" title=\"当注释内存对齐指令时\"></a>当注释内存对齐指令时</h1><p>//#pragma   pack(n)</p>\n<p>结果</p>\n<pre><code>A length: 24\na.c:   8453680\na.d:   8453688\na.s:   8453696\na.i:   8453700\n</code></pre><p>所以 如果不指定内存对齐，或者内存对齐不是2的幂次时，<br>编译器给出默认值<br><code>#pragma   pack(8)</code><br>另外，当n取值不合适时，可能需要2次寻址</p>\n<p>注：</p>\n<p>Windows 8.1 Pro x64 bit</p>\n<p>用于 80x86 的 Microsoft (R) 32 位 C/C++ 优化编译器 16.00.30319.01 版</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><pre><code>`\n#pragma pack(push)\n#pragma pack(n)\n#pragma pack(show)\nstruct A\n&#123;\n    char     c;     //1byte\n    double   d;     //8byte\n    short    s;     //2byte\n    int      i;     //4byte\n&#125;;\n#pragma pack(pop)\n#pragma pack(show)\nint main(int argc, char* argv[])\n&#123;\n    A a;\n    printf(&quot;A length: %d\\n&quot;,sizeof(A));\n    printf(&quot;a.c:%10d\\na.d:%10d\\na.s:%10d\\na.i:%10d\\n&quot;,&amp;a.c, &amp;a.d, &amp;a.s, &amp;a.i);\n    return 0;\n&#125;\n`\n</code></pre><h1 id=\"n-1\"><a href=\"#n-1\" class=\"headerlink\" title=\"n = 1\"></a>n = 1</h1><p>内存对齐的结果为1，相当于不进行内存对齐，一些协议的设计可能会迫使我们修改n为1，<br>结果如下：</p>\n<pre><code>A length: 15\na.c:  11795164\na.d:  11795165\na.s:  11795173\na.i:  11795175\n</code></pre><p>其中，这里的4913360不一定是2、4或者8的倍数。</p>\n<h1 id=\"n-2\"><a href=\"#n-2\" class=\"headerlink\" title=\"n = 2\"></a>n = 2</h1><p>结果如下：</p>\n<pre><code>A length: 16\na.c:  12516948\na.d:  12516950\na.s:  12516958\na.i:  12516960\n</code></pre><h1 id=\"n-3\"><a href=\"#n-3\" class=\"headerlink\" title=\"n = 3\"></a>n = 3</h1><p>编译器警告：warning C4086: 杂注参数应为“1”、“2”、“4”、“8”或者“16”<br>结果是：</p>\n<pre><code>A length: 24\na.c:   9959560\na.d:   9959568\na.s:   9959576\na.i:   9959580\n</code></pre><p>所以，最好取n为2的幂（此时，编译器以默认值#pragma pack(8)对齐）</p>\n<h1 id=\"n-4\"><a href=\"#n-4\" class=\"headerlink\" title=\"n = 4\"></a>n = 4</h1><p>结果如下：</p>\n<pre><code>A length: 20\na.c:  12516320\na.d:  12516324\na.s:  12516332\na.i:  12516336\n</code></pre><h1 id=\"n-8\"><a href=\"#n-8\" class=\"headerlink\" title=\"n = 8\"></a>n = 8</h1><p>结果如下：</p>\n<pre><code>A length: 24\na.c:  17300184\na.d:  17300192\na.s:  17300200\na.i:  17300204\n</code></pre><h1 id=\"当注释内存对齐指令时\"><a href=\"#当注释内存对齐指令时\" class=\"headerlink\" title=\"当注释内存对齐指令时\"></a>当注释内存对齐指令时</h1><p>//#pragma   pack(n)</p>\n<p>结果</p>\n<pre><code>A length: 24\na.c:   8453680\na.d:   8453688\na.s:   8453696\na.i:   8453700\n</code></pre><p>所以 如果不指定内存对齐，或者内存对齐不是2的幂次时，<br>编译器给出默认值<br><code>#pragma   pack(8)</code><br>另外，当n取值不合适时，可能需要2次寻址</p>\n<p>注：</p>\n<p>Windows 8.1 Pro x64 bit</p>\n<p>用于 80x86 的 Microsoft (R) 32 位 C/C++ 优化编译器 16.00.30319.01 版</p>\n"},{"layout":"post","title":"CentOS 升级 GCC 整理记录","date":"2016-07-28T01:45:50.000Z","_content":"\nCentOS 升级 GCC 整理记录\n\n\tCentOS 版本: 6.0 (x64)\n\tGCC 原版本： 4.4.7\n\tGCC 升级版本：4.8.5\n\tGCC 4.8.5 链接： https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\n\n执行过程\n\n\twget https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\n\ttar zxf gcc-4.8.5.tar.gz\n\tcd gcc-4.8.5\n\n\tyum install gcc g++\n\tyum install glibc-static\n\tyum install cloog-ppl gmp-devel\n\n\twget ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.11.1.tar.bz2\n\ttar jxf isl-0.11.1.tar.bz2\n\tcd isl-0.11.1\n\t./configure\n\tmake\n\tmake install\n\t\n\tcd ..\n\t./contrib/download_prerequisites\n\tmkdir build\n\tcd build\n\t../configure --prefix=/usr --enable-languages=c,c++ --disable-multilib\n\tmake -j4\n\tmake install\n\nGCC 4.8.5 支持 C++11 的部分特性","source":"_posts/2016-07-28-centos_upgrade_gcc.md","raw":"---\nlayout: post\ntitle: CentOS 升级 GCC 整理记录\ndate: 2016-07-28 09:45:50\ncategories: 未分类\n---\n\nCentOS 升级 GCC 整理记录\n\n\tCentOS 版本: 6.0 (x64)\n\tGCC 原版本： 4.4.7\n\tGCC 升级版本：4.8.5\n\tGCC 4.8.5 链接： https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\n\n执行过程\n\n\twget https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\n\ttar zxf gcc-4.8.5.tar.gz\n\tcd gcc-4.8.5\n\n\tyum install gcc g++\n\tyum install glibc-static\n\tyum install cloog-ppl gmp-devel\n\n\twget ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.11.1.tar.bz2\n\ttar jxf isl-0.11.1.tar.bz2\n\tcd isl-0.11.1\n\t./configure\n\tmake\n\tmake install\n\t\n\tcd ..\n\t./contrib/download_prerequisites\n\tmkdir build\n\tcd build\n\t../configure --prefix=/usr --enable-languages=c,c++ --disable-multilib\n\tmake -j4\n\tmake install\n\nGCC 4.8.5 支持 C++11 的部分特性","slug":"2016-07-28-centos_upgrade_gcc","published":1,"updated":"2021-06-18T11:16:37.645Z","comments":1,"photos":[],"link":"","_id":"ckqhkhszj000ouavq4onda0ii","content":"<p>CentOS 升级 GCC 整理记录</p>\n<pre><code>CentOS 版本: 6.0 (x64)\nGCC 原版本： 4.4.7\nGCC 升级版本：4.8.5\nGCC 4.8.5 链接： https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\n</code></pre><p>执行过程</p>\n<pre><code>wget https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\ntar zxf gcc-4.8.5.tar.gz\ncd gcc-4.8.5\n\nyum install gcc g++\nyum install glibc-static\nyum install cloog-ppl gmp-devel\n\nwget ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.11.1.tar.bz2\ntar jxf isl-0.11.1.tar.bz2\ncd isl-0.11.1\n./configure\nmake\nmake install\n\ncd ..\n./contrib/download_prerequisites\nmkdir build\ncd build\n../configure --prefix=/usr --enable-languages=c,c++ --disable-multilib\nmake -j4\nmake install\n</code></pre><p>GCC 4.8.5 支持 C++11 的部分特性</p>\n","site":{"data":{}},"excerpt":"","more":"<p>CentOS 升级 GCC 整理记录</p>\n<pre><code>CentOS 版本: 6.0 (x64)\nGCC 原版本： 4.4.7\nGCC 升级版本：4.8.5\nGCC 4.8.5 链接： https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\n</code></pre><p>执行过程</p>\n<pre><code>wget https://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gz\ntar zxf gcc-4.8.5.tar.gz\ncd gcc-4.8.5\n\nyum install gcc g++\nyum install glibc-static\nyum install cloog-ppl gmp-devel\n\nwget ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.11.1.tar.bz2\ntar jxf isl-0.11.1.tar.bz2\ncd isl-0.11.1\n./configure\nmake\nmake install\n\ncd ..\n./contrib/download_prerequisites\nmkdir build\ncd build\n../configure --prefix=/usr --enable-languages=c,c++ --disable-multilib\nmake -j4\nmake install\n</code></pre><p>GCC 4.8.5 支持 C++11 的部分特性</p>\n"},{"layout":"post","title":"CentOS 升级 Python 整理记录","date":"2016-07-28T01:46:14.000Z","_content":"\nCentOS 升级 Python 整理记录\n\n\tCentOS 版本: 6.0 (x64)\n\tPython 原版本： 2.6.5\n\tPython 升级版本：2.7.12\n\tPython 2.7.12 链接： https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\n\n执行过程\n\n\t# 预先准备\n\tcd /usr/bin\n\tpython --version\n\n\t# 拷贝 python2.6.5 副本\n\tcp python python2.6.5  # 安全起见(1)\n\n\t# 修改下述三个文件开头, 指定 python 解释器为 /usr/bin/python2.6.5\n\t# 原因是它们不支持 python27\n\tvim /usr/bin/yum\n\tvim /usr/bin/ibus-setup\n\tvim /usr/libexec/ibus-ui-gtk\n\n\t# 下载安装\n\twget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\n\ttar xf Python-2.7.12.tar.xz\n\tcd Python-2.7.12\n\t./configure\n\tmake all\n\tmake install\n\tmake clean\n\tmake distclean\n\t/usr/local/bin/python2.7 --version\n\trm /usr/bin/python # 呼应上文命令(1)\n\tln -s /usr/local/bin/python2.7 /usr/bin/python\n\n\t# 安装后\n\t## 修复 或 安装 pip\n\tyum install python-pip\n\tpip install --upgrade setuptools\n\twget --no-check-certificate  https://raw.github.com/pypa/pip/master/contrib/get-pip.py # 命令(3)\n\twget --no-check-certificate  https://bootstrap.pypa.io/get-pip.py                      # 命令(4)\n\n\t# 尝试运行 命令 (3, 4) 下载的脚本, 至此 pip 修复完成 \n\tpython get-pip.py\n\tpip --version\n\tpip install bs4\n\tpip install requests\n\n\t# 小工具\n\tyum install dos2unix lrzsz\n","source":"_posts/2016-07-28-centos_upgrade_python.md","raw":"---\nlayout: post\ntitle: CentOS 升级 Python 整理记录\ndate: 2016-07-28 09:46:14\ncategories: 未分类\n---\n\nCentOS 升级 Python 整理记录\n\n\tCentOS 版本: 6.0 (x64)\n\tPython 原版本： 2.6.5\n\tPython 升级版本：2.7.12\n\tPython 2.7.12 链接： https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\n\n执行过程\n\n\t# 预先准备\n\tcd /usr/bin\n\tpython --version\n\n\t# 拷贝 python2.6.5 副本\n\tcp python python2.6.5  # 安全起见(1)\n\n\t# 修改下述三个文件开头, 指定 python 解释器为 /usr/bin/python2.6.5\n\t# 原因是它们不支持 python27\n\tvim /usr/bin/yum\n\tvim /usr/bin/ibus-setup\n\tvim /usr/libexec/ibus-ui-gtk\n\n\t# 下载安装\n\twget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\n\ttar xf Python-2.7.12.tar.xz\n\tcd Python-2.7.12\n\t./configure\n\tmake all\n\tmake install\n\tmake clean\n\tmake distclean\n\t/usr/local/bin/python2.7 --version\n\trm /usr/bin/python # 呼应上文命令(1)\n\tln -s /usr/local/bin/python2.7 /usr/bin/python\n\n\t# 安装后\n\t## 修复 或 安装 pip\n\tyum install python-pip\n\tpip install --upgrade setuptools\n\twget --no-check-certificate  https://raw.github.com/pypa/pip/master/contrib/get-pip.py # 命令(3)\n\twget --no-check-certificate  https://bootstrap.pypa.io/get-pip.py                      # 命令(4)\n\n\t# 尝试运行 命令 (3, 4) 下载的脚本, 至此 pip 修复完成 \n\tpython get-pip.py\n\tpip --version\n\tpip install bs4\n\tpip install requests\n\n\t# 小工具\n\tyum install dos2unix lrzsz\n","slug":"2016-07-28-centos_upgrade_python","published":1,"updated":"2021-06-18T11:16:37.646Z","comments":1,"photos":[],"link":"","_id":"ckqhkhszl000ruavq4pmn2pzl","content":"<p>CentOS 升级 Python 整理记录</p>\n<pre><code>CentOS 版本: 6.0 (x64)\nPython 原版本： 2.6.5\nPython 升级版本：2.7.12\nPython 2.7.12 链接： https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\n</code></pre><p>执行过程</p>\n<pre><code># 预先准备\ncd /usr/bin\npython --version\n\n# 拷贝 python2.6.5 副本\ncp python python2.6.5  # 安全起见(1)\n\n# 修改下述三个文件开头, 指定 python 解释器为 /usr/bin/python2.6.5\n# 原因是它们不支持 python27\nvim /usr/bin/yum\nvim /usr/bin/ibus-setup\nvim /usr/libexec/ibus-ui-gtk\n\n# 下载安装\nwget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\ntar xf Python-2.7.12.tar.xz\ncd Python-2.7.12\n./configure\nmake all\nmake install\nmake clean\nmake distclean\n/usr/local/bin/python2.7 --version\nrm /usr/bin/python # 呼应上文命令(1)\nln -s /usr/local/bin/python2.7 /usr/bin/python\n\n# 安装后\n## 修复 或 安装 pip\nyum install python-pip\npip install --upgrade setuptools\nwget --no-check-certificate  https://raw.github.com/pypa/pip/master/contrib/get-pip.py # 命令(3)\nwget --no-check-certificate  https://bootstrap.pypa.io/get-pip.py                      # 命令(4)\n\n# 尝试运行 命令 (3, 4) 下载的脚本, 至此 pip 修复完成 \npython get-pip.py\npip --version\npip install bs4\npip install requests\n\n# 小工具\nyum install dos2unix lrzsz\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>CentOS 升级 Python 整理记录</p>\n<pre><code>CentOS 版本: 6.0 (x64)\nPython 原版本： 2.6.5\nPython 升级版本：2.7.12\nPython 2.7.12 链接： https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\n</code></pre><p>执行过程</p>\n<pre><code># 预先准备\ncd /usr/bin\npython --version\n\n# 拷贝 python2.6.5 副本\ncp python python2.6.5  # 安全起见(1)\n\n# 修改下述三个文件开头, 指定 python 解释器为 /usr/bin/python2.6.5\n# 原因是它们不支持 python27\nvim /usr/bin/yum\nvim /usr/bin/ibus-setup\nvim /usr/libexec/ibus-ui-gtk\n\n# 下载安装\nwget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\ntar xf Python-2.7.12.tar.xz\ncd Python-2.7.12\n./configure\nmake all\nmake install\nmake clean\nmake distclean\n/usr/local/bin/python2.7 --version\nrm /usr/bin/python # 呼应上文命令(1)\nln -s /usr/local/bin/python2.7 /usr/bin/python\n\n# 安装后\n## 修复 或 安装 pip\nyum install python-pip\npip install --upgrade setuptools\nwget --no-check-certificate  https://raw.github.com/pypa/pip/master/contrib/get-pip.py # 命令(3)\nwget --no-check-certificate  https://bootstrap.pypa.io/get-pip.py                      # 命令(4)\n\n# 尝试运行 命令 (3, 4) 下载的脚本, 至此 pip 修复完成 \npython get-pip.py\npip --version\npip install bs4\npip install requests\n\n# 小工具\nyum install dos2unix lrzsz\n</code></pre>"},{"layout":"post","title":"单引号 字符串","date":"2016-08-29T02:23:40.000Z","_content":"\n阅读项目发现的一段代码\n\t\n\tstruct PACK_HEAD // 新结构，与类型长度无关\n\t{\n\t\tULONG synch   :16;\t\t//同步字节\n\t\tULONG version : 8;\t\t//协议版本\n\t\tULONG type    : 8;\t\t//包类型\n\t\tULONG sn      :32;\t\t//包序列号\n\t\tULONG fun     :32;\t\t//主功能号\n\t\tULONG sub     :32;\t\t//子功能号\n\t\tULONG datalen :32;\t\t//数据域总长\n\t\tULONG retcode :32;\t\t//返回码\n\t\tULONG total   :16;\t\t//包的分片总数\n\t\tULONG index   :16;\t\t//包的分片序号,从0开始\n\t\tULONG patch   :24;\t\t//补位字节,使结构长度适应4字节对齐方式\n\t\tULONG checksum: 8;\t\t//异或校验和\n\t} m_head;\n\t...\n\tif(this->m_head.sub == 'REC')  \t\t\t\n\t{\n\t\tWriteDebugLog(\"录像查询: [%s]\", pTask->m_body.data);\t\n\t\t\ttodo_other(...);\t\t\t\n\t}\n\n\tthis->m_head.sub == 'REC' 这句是什么意思\n\t'REC' 是什么类型\n\n查询资料得知这是一种数据表示，测试代码如下\n\n\t#include <cstdio>\n\t#include <cstdlib>\n\t#include <ctime>\n\n\t#define WriteErrorLog(format, ...) \\\n\t\tdo {\\\n\t\ttime_t nowtime = time(NULL); struct tm* local = localtime(&nowtime); char timestramp[80] = {0}; strftime(timestramp, 80, \"%Y-%m-%d %H:%M:%S\", local);\\\n\t\tfprintf(stderr, \"%s [ERROR] %s(%d): \"format\"\\n\", timestramp, __FUNCTION__ , __LINE__, __VA_ARGS__); \\\n\t\t} while(0)\n\n\n\tint main()\n\t{\t\n\t\tint ab = 'AB';\n\t\tint a = 'A';\n\t\tint b = 'B';\n\t\tint a_b = ('A' << 8) + 'B';\n\n\t\tWriteErrorLog(\"A:%d, B:%d\", a, b);\n\t\tWriteErrorLog(\"ab: %d\", ab);\n\t\tWriteErrorLog(\"a_b: %d\", a_b);\n\n\t\tsystem(\"pause\");\n\t\treturn 0;\n\t}\n\t\n![cmd](20160829101359.png, \"cmd\")\n\t\n'AB' 与 12 类比:\n\n\t'AB' 表示  'A' * 2^8 + 'B'\n\t12   表示 1 * 10^1 + 2\n\t\n注意\n\n\tdata_type var = 'ABCD';\n\t这里 'ABCD' 需要在 data_type (char short int long) 的取值范围内, 不可越界.","source":"_posts/2016-08-29-单引号-字符串.md","raw":"---\nlayout: post\ntitle: 单引号 字符串\ndate: 2016-08-29 10:23:40\ncategories: 未分类\n---\n\n阅读项目发现的一段代码\n\t\n\tstruct PACK_HEAD // 新结构，与类型长度无关\n\t{\n\t\tULONG synch   :16;\t\t//同步字节\n\t\tULONG version : 8;\t\t//协议版本\n\t\tULONG type    : 8;\t\t//包类型\n\t\tULONG sn      :32;\t\t//包序列号\n\t\tULONG fun     :32;\t\t//主功能号\n\t\tULONG sub     :32;\t\t//子功能号\n\t\tULONG datalen :32;\t\t//数据域总长\n\t\tULONG retcode :32;\t\t//返回码\n\t\tULONG total   :16;\t\t//包的分片总数\n\t\tULONG index   :16;\t\t//包的分片序号,从0开始\n\t\tULONG patch   :24;\t\t//补位字节,使结构长度适应4字节对齐方式\n\t\tULONG checksum: 8;\t\t//异或校验和\n\t} m_head;\n\t...\n\tif(this->m_head.sub == 'REC')  \t\t\t\n\t{\n\t\tWriteDebugLog(\"录像查询: [%s]\", pTask->m_body.data);\t\n\t\t\ttodo_other(...);\t\t\t\n\t}\n\n\tthis->m_head.sub == 'REC' 这句是什么意思\n\t'REC' 是什么类型\n\n查询资料得知这是一种数据表示，测试代码如下\n\n\t#include <cstdio>\n\t#include <cstdlib>\n\t#include <ctime>\n\n\t#define WriteErrorLog(format, ...) \\\n\t\tdo {\\\n\t\ttime_t nowtime = time(NULL); struct tm* local = localtime(&nowtime); char timestramp[80] = {0}; strftime(timestramp, 80, \"%Y-%m-%d %H:%M:%S\", local);\\\n\t\tfprintf(stderr, \"%s [ERROR] %s(%d): \"format\"\\n\", timestramp, __FUNCTION__ , __LINE__, __VA_ARGS__); \\\n\t\t} while(0)\n\n\n\tint main()\n\t{\t\n\t\tint ab = 'AB';\n\t\tint a = 'A';\n\t\tint b = 'B';\n\t\tint a_b = ('A' << 8) + 'B';\n\n\t\tWriteErrorLog(\"A:%d, B:%d\", a, b);\n\t\tWriteErrorLog(\"ab: %d\", ab);\n\t\tWriteErrorLog(\"a_b: %d\", a_b);\n\n\t\tsystem(\"pause\");\n\t\treturn 0;\n\t}\n\t\n![cmd](20160829101359.png, \"cmd\")\n\t\n'AB' 与 12 类比:\n\n\t'AB' 表示  'A' * 2^8 + 'B'\n\t12   表示 1 * 10^1 + 2\n\t\n注意\n\n\tdata_type var = 'ABCD';\n\t这里 'ABCD' 需要在 data_type (char short int long) 的取值范围内, 不可越界.","slug":"2016-08-29-单引号-字符串","published":1,"updated":"2021-06-18T11:16:37.647Z","comments":1,"photos":[],"link":"","_id":"ckqhkhszm000uuavq8cff0ebq","content":"<p>阅读项目发现的一段代码</p>\n<pre><code>struct PACK_HEAD // 新结构，与类型长度无关\n&#123;\n    ULONG synch   :16;        //同步字节\n    ULONG version : 8;        //协议版本\n    ULONG type    : 8;        //包类型\n    ULONG sn      :32;        //包序列号\n    ULONG fun     :32;        //主功能号\n    ULONG sub     :32;        //子功能号\n    ULONG datalen :32;        //数据域总长\n    ULONG retcode :32;        //返回码\n    ULONG total   :16;        //包的分片总数\n    ULONG index   :16;        //包的分片序号,从0开始\n    ULONG patch   :24;        //补位字节,使结构长度适应4字节对齐方式\n    ULONG checksum: 8;        //异或校验和\n&#125; m_head;\n...\nif(this-&gt;m_head.sub == &apos;REC&apos;)              \n&#123;\n    WriteDebugLog(&quot;录像查询: [%s]&quot;, pTask-&gt;m_body.data);    \n        todo_other(...);            \n&#125;\n\nthis-&gt;m_head.sub == &apos;REC&apos; 这句是什么意思\n&apos;REC&apos; 是什么类型\n</code></pre><p>查询资料得知这是一种数据表示，测试代码如下</p>\n<pre><code>#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;ctime&gt;\n\n#define WriteErrorLog(format, ...) \\\n    do &#123;\\\n    time_t nowtime = time(NULL); struct tm* local = localtime(&amp;nowtime); char timestramp[80] = &#123;0&#125;; strftime(timestramp, 80, &quot;%Y-%m-%d %H:%M:%S&quot;, local);\\\n    fprintf(stderr, &quot;%s [ERROR] %s(%d): &quot;format&quot;\\n&quot;, timestramp, __FUNCTION__ , __LINE__, __VA_ARGS__); \\\n    &#125; while(0)\n\n\nint main()\n&#123;    \n    int ab = &apos;AB&apos;;\n    int a = &apos;A&apos;;\n    int b = &apos;B&apos;;\n    int a_b = (&apos;A&apos; &lt;&lt; 8) + &apos;B&apos;;\n\n    WriteErrorLog(&quot;A:%d, B:%d&quot;, a, b);\n    WriteErrorLog(&quot;ab: %d&quot;, ab);\n    WriteErrorLog(&quot;a_b: %d&quot;, a_b);\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre><p><img src=\"20160829101359.png,\" alt=\"cmd\" title=\"cmd\"></p>\n<p>‘AB’ 与 12 类比:</p>\n<pre><code>&apos;AB&apos; 表示  &apos;A&apos; * 2^8 + &apos;B&apos;\n12   表示 1 * 10^1 + 2\n</code></pre><p>注意</p>\n<pre><code>data_type var = &apos;ABCD&apos;;\n这里 &apos;ABCD&apos; 需要在 data_type (char short int long) 的取值范围内, 不可越界.\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>阅读项目发现的一段代码</p>\n<pre><code>struct PACK_HEAD // 新结构，与类型长度无关\n&#123;\n    ULONG synch   :16;        //同步字节\n    ULONG version : 8;        //协议版本\n    ULONG type    : 8;        //包类型\n    ULONG sn      :32;        //包序列号\n    ULONG fun     :32;        //主功能号\n    ULONG sub     :32;        //子功能号\n    ULONG datalen :32;        //数据域总长\n    ULONG retcode :32;        //返回码\n    ULONG total   :16;        //包的分片总数\n    ULONG index   :16;        //包的分片序号,从0开始\n    ULONG patch   :24;        //补位字节,使结构长度适应4字节对齐方式\n    ULONG checksum: 8;        //异或校验和\n&#125; m_head;\n...\nif(this-&gt;m_head.sub == &apos;REC&apos;)              \n&#123;\n    WriteDebugLog(&quot;录像查询: [%s]&quot;, pTask-&gt;m_body.data);    \n        todo_other(...);            \n&#125;\n\nthis-&gt;m_head.sub == &apos;REC&apos; 这句是什么意思\n&apos;REC&apos; 是什么类型\n</code></pre><p>查询资料得知这是一种数据表示，测试代码如下</p>\n<pre><code>#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;ctime&gt;\n\n#define WriteErrorLog(format, ...) \\\n    do &#123;\\\n    time_t nowtime = time(NULL); struct tm* local = localtime(&amp;nowtime); char timestramp[80] = &#123;0&#125;; strftime(timestramp, 80, &quot;%Y-%m-%d %H:%M:%S&quot;, local);\\\n    fprintf(stderr, &quot;%s [ERROR] %s(%d): &quot;format&quot;\\n&quot;, timestramp, __FUNCTION__ , __LINE__, __VA_ARGS__); \\\n    &#125; while(0)\n\n\nint main()\n&#123;    \n    int ab = &apos;AB&apos;;\n    int a = &apos;A&apos;;\n    int b = &apos;B&apos;;\n    int a_b = (&apos;A&apos; &lt;&lt; 8) + &apos;B&apos;;\n\n    WriteErrorLog(&quot;A:%d, B:%d&quot;, a, b);\n    WriteErrorLog(&quot;ab: %d&quot;, ab);\n    WriteErrorLog(&quot;a_b: %d&quot;, a_b);\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre><p><img src=\"20160829101359.png,\" alt=\"cmd\" title=\"cmd\"></p>\n<p>‘AB’ 与 12 类比:</p>\n<pre><code>&apos;AB&apos; 表示  &apos;A&apos; * 2^8 + &apos;B&apos;\n12   表示 1 * 10^1 + 2\n</code></pre><p>注意</p>\n<pre><code>data_type var = &apos;ABCD&apos;;\n这里 &apos;ABCD&apos; 需要在 data_type (char short int long) 的取值范围内, 不可越界.\n</code></pre>"},{"layout":"post","title":"C++中set和get的简单方式","date":"2016-01-18T02:46:05.000Z","_content":"\n在C#中, 有比较通用的set和get, 在C++中可以使用引用和访问限制符来简单处理,   具体如下\n\n\t`\n\t#define SUCCESS 1 // #define SUCCESS 1\n\t#define FAIL 0 // #define FAIL 0\n\t#include <iostream>\n\tint add(int a, int b) { return a + b; }\n\tclass A\n\t{\n\tprivate:\n\t\tint a_;\n\t\tint b_;\n\tpublic:\n\t\tconst int& a;\n\t\tconst int& b;\n\tpublic:\n\t\tint x_;\n\t\tint y_;\n\t\tconst int& x;\n\t\tconst int& y;\n\t\tA()\n\t\t: a_(0), b_(0), x_(0), y_(0)\n\t\t, a(a_), b(b_), x(x_), y(y_)\n\t\t{}\n\t\t\n\t\tvoid print() { \n\t\t\tstd::cout << \"  a=\" << a << \", a_=\" << a_ \n\t\t\t\t  << \", b=\" << b << \", b_=\" << b_\n\t\t\t\t  << \", x=\" << x << \", x_=\" << x_\n\t\t\t\t  << \", y=\" << y << \", y_=\" << y_\n\t                          << \".\\n\";\n\t\t}\n\t};\n\n\tint  main()\n\t{\n\t\tint result = add(SUCCESS, FAIL);\n\t\tA a;\n\t\ta.x_ = 4;\t// (1) \n\t\t//a.x = 5;\t// (2) \n\t\t//a.a_ = 3; // (3)\n\t\t//a.a = 5;  // (4)\n\t\ta.y_ = a.x; // (5)\n\t\t// a.y = a.x; // (6)\n\t\t// a.a = a.y; // (7)\t\n\t\ta.print();\n\t\treturn 0;\n\t}\n\t`\n其中,\n\n(1) `public int x_`, 跟全局变量的访问一样  \n(2) `a.x` 为 `public int&` 类型, 指向`public int x_`, 这里相当于 `set`  \n(3) error, `private int a_` 尝试修改私有变量的值  \n(4) error, `public const int& y` 尝试修改`const`变量  \n(5) `a.x` 相当于`get`, 并修改 `y_`  \n(6) `error`, `public const int& y` 尝试修改`const`变量  \n(7) `error`, `a.x` 相当于`get`, `a.a` 尝试修改`const`变量  \n\n对此，如果一个变量 `var` 是只读的，但是在对象构造时需要赋值, 可以参照如下方式\n\n\tclass A \n\t{\n\tprivate:\n\t\tint var_;\n\tpublic:\n\t\tconst int& var;\n\tpublic:\n\t\tA(int a):var_(a){}\n\t\tFoo() { /*process var_*/ }\n\t};\n\n于是, 在初始化是可以 `A a(5)`, 在`a`的内部, 仍然可以对 `var_` 做任何处理, 使用时 `a.var`, 而不必考虑`var`被外界修改的问题.\n\n(完)\n\n","source":"_posts/2016-1-18-C++中set和get的简单方式.md","raw":"---\nlayout: post\ntitle: C++中set和get的简单方式\ndate: 2016-1-18 10:46:05\ncategories: 未分类\n---\n\n在C#中, 有比较通用的set和get, 在C++中可以使用引用和访问限制符来简单处理,   具体如下\n\n\t`\n\t#define SUCCESS 1 // #define SUCCESS 1\n\t#define FAIL 0 // #define FAIL 0\n\t#include <iostream>\n\tint add(int a, int b) { return a + b; }\n\tclass A\n\t{\n\tprivate:\n\t\tint a_;\n\t\tint b_;\n\tpublic:\n\t\tconst int& a;\n\t\tconst int& b;\n\tpublic:\n\t\tint x_;\n\t\tint y_;\n\t\tconst int& x;\n\t\tconst int& y;\n\t\tA()\n\t\t: a_(0), b_(0), x_(0), y_(0)\n\t\t, a(a_), b(b_), x(x_), y(y_)\n\t\t{}\n\t\t\n\t\tvoid print() { \n\t\t\tstd::cout << \"  a=\" << a << \", a_=\" << a_ \n\t\t\t\t  << \", b=\" << b << \", b_=\" << b_\n\t\t\t\t  << \", x=\" << x << \", x_=\" << x_\n\t\t\t\t  << \", y=\" << y << \", y_=\" << y_\n\t                          << \".\\n\";\n\t\t}\n\t};\n\n\tint  main()\n\t{\n\t\tint result = add(SUCCESS, FAIL);\n\t\tA a;\n\t\ta.x_ = 4;\t// (1) \n\t\t//a.x = 5;\t// (2) \n\t\t//a.a_ = 3; // (3)\n\t\t//a.a = 5;  // (4)\n\t\ta.y_ = a.x; // (5)\n\t\t// a.y = a.x; // (6)\n\t\t// a.a = a.y; // (7)\t\n\t\ta.print();\n\t\treturn 0;\n\t}\n\t`\n其中,\n\n(1) `public int x_`, 跟全局变量的访问一样  \n(2) `a.x` 为 `public int&` 类型, 指向`public int x_`, 这里相当于 `set`  \n(3) error, `private int a_` 尝试修改私有变量的值  \n(4) error, `public const int& y` 尝试修改`const`变量  \n(5) `a.x` 相当于`get`, 并修改 `y_`  \n(6) `error`, `public const int& y` 尝试修改`const`变量  \n(7) `error`, `a.x` 相当于`get`, `a.a` 尝试修改`const`变量  \n\n对此，如果一个变量 `var` 是只读的，但是在对象构造时需要赋值, 可以参照如下方式\n\n\tclass A \n\t{\n\tprivate:\n\t\tint var_;\n\tpublic:\n\t\tconst int& var;\n\tpublic:\n\t\tA(int a):var_(a){}\n\t\tFoo() { /*process var_*/ }\n\t};\n\n于是, 在初始化是可以 `A a(5)`, 在`a`的内部, 仍然可以对 `var_` 做任何处理, 使用时 `a.var`, 而不必考虑`var`被外界修改的问题.\n\n(完)\n\n","slug":"2016-1-18-C++中set和get的简单方式","published":1,"updated":"2021-06-18T11:16:37.648Z","comments":1,"photos":[],"link":"","_id":"ckqhkhszn000xuavqd04i6tkk","content":"<p>在C#中, 有比较通用的set和get, 在C++中可以使用引用和访问限制符来简单处理,   具体如下</p>\n<pre><code>`\n#define SUCCESS 1 // #define SUCCESS 1\n#define FAIL 0 // #define FAIL 0\n#include &lt;iostream&gt;\nint add(int a, int b) &#123; return a + b; &#125;\nclass A\n&#123;\nprivate:\n    int a_;\n    int b_;\npublic:\n    const int&amp; a;\n    const int&amp; b;\npublic:\n    int x_;\n    int y_;\n    const int&amp; x;\n    const int&amp; y;\n    A()\n    : a_(0), b_(0), x_(0), y_(0)\n    , a(a_), b(b_), x(x_), y(y_)\n    &#123;&#125;\n\n    void print() &#123; \n        std::cout &lt;&lt; &quot;  a=&quot; &lt;&lt; a &lt;&lt; &quot;, a_=&quot; &lt;&lt; a_ \n              &lt;&lt; &quot;, b=&quot; &lt;&lt; b &lt;&lt; &quot;, b_=&quot; &lt;&lt; b_\n              &lt;&lt; &quot;, x=&quot; &lt;&lt; x &lt;&lt; &quot;, x_=&quot; &lt;&lt; x_\n              &lt;&lt; &quot;, y=&quot; &lt;&lt; y &lt;&lt; &quot;, y_=&quot; &lt;&lt; y_\n                          &lt;&lt; &quot;.\\n&quot;;\n    &#125;\n&#125;;\n\nint  main()\n&#123;\n    int result = add(SUCCESS, FAIL);\n    A a;\n    a.x_ = 4;    // (1) \n    //a.x = 5;    // (2) \n    //a.a_ = 3; // (3)\n    //a.a = 5;  // (4)\n    a.y_ = a.x; // (5)\n    // a.y = a.x; // (6)\n    // a.a = a.y; // (7)    \n    a.print();\n    return 0;\n&#125;\n`\n</code></pre><p>其中,</p>\n<p>(1) <code>public int x_</code>, 跟全局变量的访问一样<br>(2) <code>a.x</code> 为 <code>public int&amp;</code> 类型, 指向<code>public int x_</code>, 这里相当于 <code>set</code><br>(3) error, <code>private int a_</code> 尝试修改私有变量的值<br>(4) error, <code>public const int&amp; y</code> 尝试修改<code>const</code>变量<br>(5) <code>a.x</code> 相当于<code>get</code>, 并修改 <code>y_</code><br>(6) <code>error</code>, <code>public const int&amp; y</code> 尝试修改<code>const</code>变量<br>(7) <code>error</code>, <code>a.x</code> 相当于<code>get</code>, <code>a.a</code> 尝试修改<code>const</code>变量  </p>\n<p>对此，如果一个变量 <code>var</code> 是只读的，但是在对象构造时需要赋值, 可以参照如下方式</p>\n<pre><code>class A \n&#123;\nprivate:\n    int var_;\npublic:\n    const int&amp; var;\npublic:\n    A(int a):var_(a)&#123;&#125;\n    Foo() &#123; /*process var_*/ &#125;\n&#125;;\n</code></pre><p>于是, 在初始化是可以 <code>A a(5)</code>, 在<code>a</code>的内部, 仍然可以对 <code>var_</code> 做任何处理, 使用时 <code>a.var</code>, 而不必考虑<code>var</code>被外界修改的问题.</p>\n<p>(完)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在C#中, 有比较通用的set和get, 在C++中可以使用引用和访问限制符来简单处理,   具体如下</p>\n<pre><code>`\n#define SUCCESS 1 // #define SUCCESS 1\n#define FAIL 0 // #define FAIL 0\n#include &lt;iostream&gt;\nint add(int a, int b) &#123; return a + b; &#125;\nclass A\n&#123;\nprivate:\n    int a_;\n    int b_;\npublic:\n    const int&amp; a;\n    const int&amp; b;\npublic:\n    int x_;\n    int y_;\n    const int&amp; x;\n    const int&amp; y;\n    A()\n    : a_(0), b_(0), x_(0), y_(0)\n    , a(a_), b(b_), x(x_), y(y_)\n    &#123;&#125;\n\n    void print() &#123; \n        std::cout &lt;&lt; &quot;  a=&quot; &lt;&lt; a &lt;&lt; &quot;, a_=&quot; &lt;&lt; a_ \n              &lt;&lt; &quot;, b=&quot; &lt;&lt; b &lt;&lt; &quot;, b_=&quot; &lt;&lt; b_\n              &lt;&lt; &quot;, x=&quot; &lt;&lt; x &lt;&lt; &quot;, x_=&quot; &lt;&lt; x_\n              &lt;&lt; &quot;, y=&quot; &lt;&lt; y &lt;&lt; &quot;, y_=&quot; &lt;&lt; y_\n                          &lt;&lt; &quot;.\\n&quot;;\n    &#125;\n&#125;;\n\nint  main()\n&#123;\n    int result = add(SUCCESS, FAIL);\n    A a;\n    a.x_ = 4;    // (1) \n    //a.x = 5;    // (2) \n    //a.a_ = 3; // (3)\n    //a.a = 5;  // (4)\n    a.y_ = a.x; // (5)\n    // a.y = a.x; // (6)\n    // a.a = a.y; // (7)    \n    a.print();\n    return 0;\n&#125;\n`\n</code></pre><p>其中,</p>\n<p>(1) <code>public int x_</code>, 跟全局变量的访问一样<br>(2) <code>a.x</code> 为 <code>public int&amp;</code> 类型, 指向<code>public int x_</code>, 这里相当于 <code>set</code><br>(3) error, <code>private int a_</code> 尝试修改私有变量的值<br>(4) error, <code>public const int&amp; y</code> 尝试修改<code>const</code>变量<br>(5) <code>a.x</code> 相当于<code>get</code>, 并修改 <code>y_</code><br>(6) <code>error</code>, <code>public const int&amp; y</code> 尝试修改<code>const</code>变量<br>(7) <code>error</code>, <code>a.x</code> 相当于<code>get</code>, <code>a.a</code> 尝试修改<code>const</code>变量  </p>\n<p>对此，如果一个变量 <code>var</code> 是只读的，但是在对象构造时需要赋值, 可以参照如下方式</p>\n<pre><code>class A \n&#123;\nprivate:\n    int var_;\npublic:\n    const int&amp; var;\npublic:\n    A(int a):var_(a)&#123;&#125;\n    Foo() &#123; /*process var_*/ &#125;\n&#125;;\n</code></pre><p>于是, 在初始化是可以 <code>A a(5)</code>, 在<code>a</code>的内部, 仍然可以对 <code>var_</code> 做任何处理, 使用时 <code>a.var</code>, 而不必考虑<code>var</code>被外界修改的问题.</p>\n<p>(完)</p>\n"},{"layout":"post","title":"一种字符串序列描述","date":"2016-04-13T09:57:35.000Z","_content":"\n将两个序列\n\n    A = {1, 4, 6, 8, 9}\n    B = {10, 11, 12, ...20}\n\n转为如下形式\n\n    string a = \"1,4,6,8-9\";\n    string b = \"10-20\"; \n\n实现如下\n\n```\nQString SeriesEdit::FormatSeries(const QSet<int>& series)\n{\t\n\tQList<int> series_list = series.toList();\n\tqSort(series_list.begin(), series_list.end());\n\n\tint last = 0xffffffff;\n\tbool match = false;\n\n\tQString series_str;\n\tfor (QList<int>::iterator it = series_list.begin(); it != series_list.end(); ++it)\n\t{\n\t\tint var = *it;\n\t\tif (it == series_list.begin())\n\t\t{\n\t\t\tseries_str += QString::number(var);\n\t\t}\n\t\telse if (last + 1 == var)\n\t\t{\n\t\t\tseries_str += \"-\";\n\t\t\tmatch = true;\n\t\t}\n\t\telse if (match)\n\t\t{\t\t\t\n\t\t\tseries_str += QString::number(last) + \",\" + QString::number(var);\n\t\t\tmatch = false;\n\t\t}\t\n\t\telse\n\t\t{\n\t\t\tseries_str += \",\" + QString::number(var);\n\t\t}\n\t\tlast = *it;\n\t}\n\tif (match)\n\t{\n\t\tseries_str += QString::number(last);\n\t}\n\n\treturn series_str.split(\"-\", QString::SkipEmptyParts).join(\"-\");\n\n}\n\n```\n\n\n","source":"_posts/2016-4-13-my-string-format.md","raw":"---\nlayout: post\ntitle: 一种字符串序列描述\ndate: 2016-04-13 17:57:35\ncategories: 未分类\n---\n\n将两个序列\n\n    A = {1, 4, 6, 8, 9}\n    B = {10, 11, 12, ...20}\n\n转为如下形式\n\n    string a = \"1,4,6,8-9\";\n    string b = \"10-20\"; \n\n实现如下\n\n```\nQString SeriesEdit::FormatSeries(const QSet<int>& series)\n{\t\n\tQList<int> series_list = series.toList();\n\tqSort(series_list.begin(), series_list.end());\n\n\tint last = 0xffffffff;\n\tbool match = false;\n\n\tQString series_str;\n\tfor (QList<int>::iterator it = series_list.begin(); it != series_list.end(); ++it)\n\t{\n\t\tint var = *it;\n\t\tif (it == series_list.begin())\n\t\t{\n\t\t\tseries_str += QString::number(var);\n\t\t}\n\t\telse if (last + 1 == var)\n\t\t{\n\t\t\tseries_str += \"-\";\n\t\t\tmatch = true;\n\t\t}\n\t\telse if (match)\n\t\t{\t\t\t\n\t\t\tseries_str += QString::number(last) + \",\" + QString::number(var);\n\t\t\tmatch = false;\n\t\t}\t\n\t\telse\n\t\t{\n\t\t\tseries_str += \",\" + QString::number(var);\n\t\t}\n\t\tlast = *it;\n\t}\n\tif (match)\n\t{\n\t\tseries_str += QString::number(last);\n\t}\n\n\treturn series_str.split(\"-\", QString::SkipEmptyParts).join(\"-\");\n\n}\n\n```\n\n\n","slug":"2016-4-13-my-string-format","published":1,"updated":"2021-06-18T11:16:37.649Z","comments":1,"photos":[],"link":"","_id":"ckqhkhszo0010uavq669l6z67","content":"<p>将两个序列</p>\n<pre><code>A = &#123;1, 4, 6, 8, 9&#125;\nB = &#123;10, 11, 12, ...20&#125;\n</code></pre><p>转为如下形式</p>\n<pre><code>string a = &quot;1,4,6,8-9&quot;;\nstring b = &quot;10-20&quot;; \n</code></pre><p>实现如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QString SeriesEdit::FormatSeries(const QSet&lt;int&gt;&amp; series)</span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\tQList&lt;int&gt; series_list = series.toList();</span><br><span class=\"line\">\tqSort(series_list.begin(), series_list.end());</span><br><span class=\"line\"></span><br><span class=\"line\">\tint last = 0xffffffff;</span><br><span class=\"line\">\tbool match = false;</span><br><span class=\"line\"></span><br><span class=\"line\">\tQString series_str;</span><br><span class=\"line\">\tfor (QList&lt;int&gt;::iterator it = series_list.begin(); it != series_list.end(); ++it)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint var = *it;</span><br><span class=\"line\">\t\tif (it == series_list.begin())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tseries_str += QString::number(var);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (last + 1 == var)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tseries_str += &quot;-&quot;;</span><br><span class=\"line\">\t\t\tmatch = true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (match)</span><br><span class=\"line\">\t\t&#123;\t\t\t</span><br><span class=\"line\">\t\t\tseries_str += QString::number(last) + &quot;,&quot; + QString::number(var);</span><br><span class=\"line\">\t\t\tmatch = false;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tseries_str += &quot;,&quot; + QString::number(var);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlast = *it;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif (match)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tseries_str += QString::number(last);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn series_str.split(&quot;-&quot;, QString::SkipEmptyParts).join(&quot;-&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>将两个序列</p>\n<pre><code>A = &#123;1, 4, 6, 8, 9&#125;\nB = &#123;10, 11, 12, ...20&#125;\n</code></pre><p>转为如下形式</p>\n<pre><code>string a = &quot;1,4,6,8-9&quot;;\nstring b = &quot;10-20&quot;; \n</code></pre><p>实现如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QString SeriesEdit::FormatSeries(const QSet&lt;int&gt;&amp; series)</span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\tQList&lt;int&gt; series_list = series.toList();</span><br><span class=\"line\">\tqSort(series_list.begin(), series_list.end());</span><br><span class=\"line\"></span><br><span class=\"line\">\tint last = 0xffffffff;</span><br><span class=\"line\">\tbool match = false;</span><br><span class=\"line\"></span><br><span class=\"line\">\tQString series_str;</span><br><span class=\"line\">\tfor (QList&lt;int&gt;::iterator it = series_list.begin(); it != series_list.end(); ++it)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint var = *it;</span><br><span class=\"line\">\t\tif (it == series_list.begin())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tseries_str += QString::number(var);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (last + 1 == var)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tseries_str += &quot;-&quot;;</span><br><span class=\"line\">\t\t\tmatch = true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (match)</span><br><span class=\"line\">\t\t&#123;\t\t\t</span><br><span class=\"line\">\t\t\tseries_str += QString::number(last) + &quot;,&quot; + QString::number(var);</span><br><span class=\"line\">\t\t\tmatch = false;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tseries_str += &quot;,&quot; + QString::number(var);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlast = *it;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif (match)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tseries_str += QString::number(last);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn series_str.split(&quot;-&quot;, QString::SkipEmptyParts).join(&quot;-&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"浏览器插件","date":"2016-06-06T04:40:05.000Z","_content":"\n\nChrome 插件\n\t\n\t1. ADfree.Player.Online\n\t一款屏蔽国内主要视频网站部分视频广告的扩展。\n\n\t2. Allow Copy\n\t解除一些网站不允许的右键复制\n\n\t3. Bookmark Manager\n\t来自 google\n\n\t4. ChaZD\n\tChaZD 查字典，简洁易用的英汉字典扩展程序，支持划词哦:)\n\n\t5. crxMouse Chrome Gestures\n\tBoost browsing productivity with your fingertips - Mouse Gestures, Super Drag, Wheel Gestures, Rocker Gestures.\n\t(不经常使用, 更多使用 vim 插件)\n\n\t6. Disconnect\n\tMake the web faster, more private, and more secure.\n\t(google 已跪, 可以使用 duckduckgo)\n\n\t7. Ghostery\n\tEnjoy a faster, safer and cleaner browsing experience.\n\t(用于屏蔽网页的一些信息跟踪)\n\n\t8. Google Art Project\n\tArt Project masterpieces from Google Cultural Institute in your browser tabs\n\t(还行)\n\n\t9. HTTPS Everywhere\n\tEncrypt the Web! Automatically use HTTPS security on many sites.\n\t(提高安全姿势)\n\n\t10. ImprovedTube - YouTube Extension\n\tImproves YouTube's functions and site with Limited Permissions. Auto HD, Resize, Annotations, Playback Speed and more.\n\t(美化youtube, 不及 Magic Actions)\n\n\t11. iReader\n\tView news stories and other articles in a very easy to read, clutter-free, scrollable display.\n\t(阅读模式)\n\n\t12. Magic Actions for YouTube™\n\tEnhance your YouTube watching experience! Auto HD, Ad Block, Cinema Mode, Mouse Wheel Volume Control, Screenshot...\n\t(更加美化youtube)\n\n\t13. Octotree\n\tCode tree for GitHub and GitLab\n\t(神器)\n\n\t14. OneTab\n\tSave up to 95% memory and reduce tab clutter\n\t(节省资源)\n\n\t15. Privacy Badger\n\tPrivacy Badger protects you from trackers as you surf the web!\n\t(隐私安全)\n\n\t16. Proxy SwitchyOmega\n\tManage and switch between multiple proxies quickly & easily.\n\t(科学上网)\n\n\t17. Redirector\n\tAutomatically redirect pages based on user-defined rules. E.g. always redirect an article url to its printer-friendly version.\n\n\t18. Remove Google Redirection\n\tProhibit click-tracking, and prevent url redirection when clicks on the result links in Google search page\n\n\t19. scroll style\n\tLike android's scroll bars .像android的滚动条\n\n\t20. StopFingerprinting\n\tFingerprinting analysis extension.\n\t(隐私安全, 不知是否有效)\n\n\t21. Stylish\n\tRestyle the web with Stylish, a user styles manager. Stylish lets you easily install themes and skins for many popular sites.\n\t(神器, 自定义 css 样式)\n\n\t22. Tampermonkey\n\tThe most popular userscript manager for Blink-based browsers\n\t(神器, 自定义 js 样式)\n\n\t23. The Great Suspender\n\tAutomatically suspends unused tabs to free up system resources\n\t(节省资源, 配合 OneTab)\n\n\t24. User-Agent Switcher for Google Chrome\n\tUser-Agent Switcher for Google Chrome switches between different user-agents.\n\n\t25. Vimium\n\tThe Hacker's Browser. Vimium provides keyboard shortcuts for navigation and control in the spirit of Vim.\n\t(神器, 已上瘾)\n\n\t26. WebRTC Leak Prevent\n\tPrevent WebRTC leaks, without blocking WebRTC.\n\t(安全, 隐藏本地IP)\n\n\t27. 买买买购物助手\n\t(还没有使用)\n\n\t28. 保护眼睛\n\t阿姆斯特朗回旋喷气式阿姆斯特朗墨镜\n\n\t29. 隐藏帖自动回复 (AutoReply 纯净版)\n\t自动回复隐藏帖 (要求已登录, 改自同名 Chrome 插件, 版权归原作者所有)\n\n\nFirefox\n\n\tACVAA\n\tAdblock Plus\n\tDisconnect\n\tDisconnect Search\n\tElement Hiding Helper for Adblock Plus\n\tFEBE\n\tFoxyProxy Standard\n\tGhostery\n\tGreasemonkey\n\tHTTPS-Everywhere\n\tNoScript\n\tOmnibar\n\tPopVideo\n\tSmartVideo For YouTube\n\tVimperator\n\t\n以下在破坏本文规则\n\nPowerShell\n\n\tposh-git\n\tPowerTab\n\tPSCX\n\tPsGet\n\tPSReadline\n\t\nZsh\n\n\tgit \n\tincr  \n\tterminitor \n\ttmux\n\tz \n\tzsh-history-substring-search\n\n","source":"_posts/2016-6-6-browser-plugin.md","raw":"---\nlayout: post\ntitle: 浏览器插件\ndate: 2016-06-06 12:40:05\ncategories: 未分类\n---\n\n\nChrome 插件\n\t\n\t1. ADfree.Player.Online\n\t一款屏蔽国内主要视频网站部分视频广告的扩展。\n\n\t2. Allow Copy\n\t解除一些网站不允许的右键复制\n\n\t3. Bookmark Manager\n\t来自 google\n\n\t4. ChaZD\n\tChaZD 查字典，简洁易用的英汉字典扩展程序，支持划词哦:)\n\n\t5. crxMouse Chrome Gestures\n\tBoost browsing productivity with your fingertips - Mouse Gestures, Super Drag, Wheel Gestures, Rocker Gestures.\n\t(不经常使用, 更多使用 vim 插件)\n\n\t6. Disconnect\n\tMake the web faster, more private, and more secure.\n\t(google 已跪, 可以使用 duckduckgo)\n\n\t7. Ghostery\n\tEnjoy a faster, safer and cleaner browsing experience.\n\t(用于屏蔽网页的一些信息跟踪)\n\n\t8. Google Art Project\n\tArt Project masterpieces from Google Cultural Institute in your browser tabs\n\t(还行)\n\n\t9. HTTPS Everywhere\n\tEncrypt the Web! Automatically use HTTPS security on many sites.\n\t(提高安全姿势)\n\n\t10. ImprovedTube - YouTube Extension\n\tImproves YouTube's functions and site with Limited Permissions. Auto HD, Resize, Annotations, Playback Speed and more.\n\t(美化youtube, 不及 Magic Actions)\n\n\t11. iReader\n\tView news stories and other articles in a very easy to read, clutter-free, scrollable display.\n\t(阅读模式)\n\n\t12. Magic Actions for YouTube™\n\tEnhance your YouTube watching experience! Auto HD, Ad Block, Cinema Mode, Mouse Wheel Volume Control, Screenshot...\n\t(更加美化youtube)\n\n\t13. Octotree\n\tCode tree for GitHub and GitLab\n\t(神器)\n\n\t14. OneTab\n\tSave up to 95% memory and reduce tab clutter\n\t(节省资源)\n\n\t15. Privacy Badger\n\tPrivacy Badger protects you from trackers as you surf the web!\n\t(隐私安全)\n\n\t16. Proxy SwitchyOmega\n\tManage and switch between multiple proxies quickly & easily.\n\t(科学上网)\n\n\t17. Redirector\n\tAutomatically redirect pages based on user-defined rules. E.g. always redirect an article url to its printer-friendly version.\n\n\t18. Remove Google Redirection\n\tProhibit click-tracking, and prevent url redirection when clicks on the result links in Google search page\n\n\t19. scroll style\n\tLike android's scroll bars .像android的滚动条\n\n\t20. StopFingerprinting\n\tFingerprinting analysis extension.\n\t(隐私安全, 不知是否有效)\n\n\t21. Stylish\n\tRestyle the web with Stylish, a user styles manager. Stylish lets you easily install themes and skins for many popular sites.\n\t(神器, 自定义 css 样式)\n\n\t22. Tampermonkey\n\tThe most popular userscript manager for Blink-based browsers\n\t(神器, 自定义 js 样式)\n\n\t23. The Great Suspender\n\tAutomatically suspends unused tabs to free up system resources\n\t(节省资源, 配合 OneTab)\n\n\t24. User-Agent Switcher for Google Chrome\n\tUser-Agent Switcher for Google Chrome switches between different user-agents.\n\n\t25. Vimium\n\tThe Hacker's Browser. Vimium provides keyboard shortcuts for navigation and control in the spirit of Vim.\n\t(神器, 已上瘾)\n\n\t26. WebRTC Leak Prevent\n\tPrevent WebRTC leaks, without blocking WebRTC.\n\t(安全, 隐藏本地IP)\n\n\t27. 买买买购物助手\n\t(还没有使用)\n\n\t28. 保护眼睛\n\t阿姆斯特朗回旋喷气式阿姆斯特朗墨镜\n\n\t29. 隐藏帖自动回复 (AutoReply 纯净版)\n\t自动回复隐藏帖 (要求已登录, 改自同名 Chrome 插件, 版权归原作者所有)\n\n\nFirefox\n\n\tACVAA\n\tAdblock Plus\n\tDisconnect\n\tDisconnect Search\n\tElement Hiding Helper for Adblock Plus\n\tFEBE\n\tFoxyProxy Standard\n\tGhostery\n\tGreasemonkey\n\tHTTPS-Everywhere\n\tNoScript\n\tOmnibar\n\tPopVideo\n\tSmartVideo For YouTube\n\tVimperator\n\t\n以下在破坏本文规则\n\nPowerShell\n\n\tposh-git\n\tPowerTab\n\tPSCX\n\tPsGet\n\tPSReadline\n\t\nZsh\n\n\tgit \n\tincr  \n\tterminitor \n\ttmux\n\tz \n\tzsh-history-substring-search\n\n","slug":"2016-6-6-browser-plugin","published":1,"updated":"2021-06-18T11:16:37.649Z","comments":1,"photos":[],"link":"","_id":"ckqhkhszp0013uavqbepa59l2","content":"<p>Chrome 插件</p>\n<pre><code>1. ADfree.Player.Online\n一款屏蔽国内主要视频网站部分视频广告的扩展。\n\n2. Allow Copy\n解除一些网站不允许的右键复制\n\n3. Bookmark Manager\n来自 google\n\n4. ChaZD\nChaZD 查字典，简洁易用的英汉字典扩展程序，支持划词哦:)\n\n5. crxMouse Chrome Gestures\nBoost browsing productivity with your fingertips - Mouse Gestures, Super Drag, Wheel Gestures, Rocker Gestures.\n(不经常使用, 更多使用 vim 插件)\n\n6. Disconnect\nMake the web faster, more private, and more secure.\n(google 已跪, 可以使用 duckduckgo)\n\n7. Ghostery\nEnjoy a faster, safer and cleaner browsing experience.\n(用于屏蔽网页的一些信息跟踪)\n\n8. Google Art Project\nArt Project masterpieces from Google Cultural Institute in your browser tabs\n(还行)\n\n9. HTTPS Everywhere\nEncrypt the Web! Automatically use HTTPS security on many sites.\n(提高安全姿势)\n\n10. ImprovedTube - YouTube Extension\nImproves YouTube&apos;s functions and site with Limited Permissions. Auto HD, Resize, Annotations, Playback Speed and more.\n(美化youtube, 不及 Magic Actions)\n\n11. iReader\nView news stories and other articles in a very easy to read, clutter-free, scrollable display.\n(阅读模式)\n\n12. Magic Actions for YouTube™\nEnhance your YouTube watching experience! Auto HD, Ad Block, Cinema Mode, Mouse Wheel Volume Control, Screenshot...\n(更加美化youtube)\n\n13. Octotree\nCode tree for GitHub and GitLab\n(神器)\n\n14. OneTab\nSave up to 95% memory and reduce tab clutter\n(节省资源)\n\n15. Privacy Badger\nPrivacy Badger protects you from trackers as you surf the web!\n(隐私安全)\n\n16. Proxy SwitchyOmega\nManage and switch between multiple proxies quickly &amp; easily.\n(科学上网)\n\n17. Redirector\nAutomatically redirect pages based on user-defined rules. E.g. always redirect an article url to its printer-friendly version.\n\n18. Remove Google Redirection\nProhibit click-tracking, and prevent url redirection when clicks on the result links in Google search page\n\n19. scroll style\nLike android&apos;s scroll bars .像android的滚动条\n\n20. StopFingerprinting\nFingerprinting analysis extension.\n(隐私安全, 不知是否有效)\n\n21. Stylish\nRestyle the web with Stylish, a user styles manager. Stylish lets you easily install themes and skins for many popular sites.\n(神器, 自定义 css 样式)\n\n22. Tampermonkey\nThe most popular userscript manager for Blink-based browsers\n(神器, 自定义 js 样式)\n\n23. The Great Suspender\nAutomatically suspends unused tabs to free up system resources\n(节省资源, 配合 OneTab)\n\n24. User-Agent Switcher for Google Chrome\nUser-Agent Switcher for Google Chrome switches between different user-agents.\n\n25. Vimium\nThe Hacker&apos;s Browser. Vimium provides keyboard shortcuts for navigation and control in the spirit of Vim.\n(神器, 已上瘾)\n\n26. WebRTC Leak Prevent\nPrevent WebRTC leaks, without blocking WebRTC.\n(安全, 隐藏本地IP)\n\n27. 买买买购物助手\n(还没有使用)\n\n28. 保护眼睛\n阿姆斯特朗回旋喷气式阿姆斯特朗墨镜\n\n29. 隐藏帖自动回复 (AutoReply 纯净版)\n自动回复隐藏帖 (要求已登录, 改自同名 Chrome 插件, 版权归原作者所有)\n</code></pre><p>Firefox</p>\n<pre><code>ACVAA\nAdblock Plus\nDisconnect\nDisconnect Search\nElement Hiding Helper for Adblock Plus\nFEBE\nFoxyProxy Standard\nGhostery\nGreasemonkey\nHTTPS-Everywhere\nNoScript\nOmnibar\nPopVideo\nSmartVideo For YouTube\nVimperator\n</code></pre><p>以下在破坏本文规则</p>\n<p>PowerShell</p>\n<pre><code>posh-git\nPowerTab\nPSCX\nPsGet\nPSReadline\n</code></pre><p>Zsh</p>\n<pre><code>git \nincr  \nterminitor \ntmux\nz \nzsh-history-substring-search\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>Chrome 插件</p>\n<pre><code>1. ADfree.Player.Online\n一款屏蔽国内主要视频网站部分视频广告的扩展。\n\n2. Allow Copy\n解除一些网站不允许的右键复制\n\n3. Bookmark Manager\n来自 google\n\n4. ChaZD\nChaZD 查字典，简洁易用的英汉字典扩展程序，支持划词哦:)\n\n5. crxMouse Chrome Gestures\nBoost browsing productivity with your fingertips - Mouse Gestures, Super Drag, Wheel Gestures, Rocker Gestures.\n(不经常使用, 更多使用 vim 插件)\n\n6. Disconnect\nMake the web faster, more private, and more secure.\n(google 已跪, 可以使用 duckduckgo)\n\n7. Ghostery\nEnjoy a faster, safer and cleaner browsing experience.\n(用于屏蔽网页的一些信息跟踪)\n\n8. Google Art Project\nArt Project masterpieces from Google Cultural Institute in your browser tabs\n(还行)\n\n9. HTTPS Everywhere\nEncrypt the Web! Automatically use HTTPS security on many sites.\n(提高安全姿势)\n\n10. ImprovedTube - YouTube Extension\nImproves YouTube&apos;s functions and site with Limited Permissions. Auto HD, Resize, Annotations, Playback Speed and more.\n(美化youtube, 不及 Magic Actions)\n\n11. iReader\nView news stories and other articles in a very easy to read, clutter-free, scrollable display.\n(阅读模式)\n\n12. Magic Actions for YouTube™\nEnhance your YouTube watching experience! Auto HD, Ad Block, Cinema Mode, Mouse Wheel Volume Control, Screenshot...\n(更加美化youtube)\n\n13. Octotree\nCode tree for GitHub and GitLab\n(神器)\n\n14. OneTab\nSave up to 95% memory and reduce tab clutter\n(节省资源)\n\n15. Privacy Badger\nPrivacy Badger protects you from trackers as you surf the web!\n(隐私安全)\n\n16. Proxy SwitchyOmega\nManage and switch between multiple proxies quickly &amp; easily.\n(科学上网)\n\n17. Redirector\nAutomatically redirect pages based on user-defined rules. E.g. always redirect an article url to its printer-friendly version.\n\n18. Remove Google Redirection\nProhibit click-tracking, and prevent url redirection when clicks on the result links in Google search page\n\n19. scroll style\nLike android&apos;s scroll bars .像android的滚动条\n\n20. StopFingerprinting\nFingerprinting analysis extension.\n(隐私安全, 不知是否有效)\n\n21. Stylish\nRestyle the web with Stylish, a user styles manager. Stylish lets you easily install themes and skins for many popular sites.\n(神器, 自定义 css 样式)\n\n22. Tampermonkey\nThe most popular userscript manager for Blink-based browsers\n(神器, 自定义 js 样式)\n\n23. The Great Suspender\nAutomatically suspends unused tabs to free up system resources\n(节省资源, 配合 OneTab)\n\n24. User-Agent Switcher for Google Chrome\nUser-Agent Switcher for Google Chrome switches between different user-agents.\n\n25. Vimium\nThe Hacker&apos;s Browser. Vimium provides keyboard shortcuts for navigation and control in the spirit of Vim.\n(神器, 已上瘾)\n\n26. WebRTC Leak Prevent\nPrevent WebRTC leaks, without blocking WebRTC.\n(安全, 隐藏本地IP)\n\n27. 买买买购物助手\n(还没有使用)\n\n28. 保护眼睛\n阿姆斯特朗回旋喷气式阿姆斯特朗墨镜\n\n29. 隐藏帖自动回复 (AutoReply 纯净版)\n自动回复隐藏帖 (要求已登录, 改自同名 Chrome 插件, 版权归原作者所有)\n</code></pre><p>Firefox</p>\n<pre><code>ACVAA\nAdblock Plus\nDisconnect\nDisconnect Search\nElement Hiding Helper for Adblock Plus\nFEBE\nFoxyProxy Standard\nGhostery\nGreasemonkey\nHTTPS-Everywhere\nNoScript\nOmnibar\nPopVideo\nSmartVideo For YouTube\nVimperator\n</code></pre><p>以下在破坏本文规则</p>\n<p>PowerShell</p>\n<pre><code>posh-git\nPowerTab\nPSCX\nPsGet\nPSReadline\n</code></pre><p>Zsh</p>\n<pre><code>git \nincr  \nterminitor \ntmux\nz \nzsh-history-substring-search\n</code></pre>"},{"title":"ffmpeg scale samples","date":"2018-05-13T09:49:16.000Z","_content":"\nffmpeg 音量增益\n\n```c\n// https://www.ffmpeg.org/doxygen/2.7/af__volume_8c_source.html\n\n// static inline int16_t av_clip_int16(int a)\n// {\n//     if ((a+0x8000U) & ~0xFFFF) return (a>>31) ^ 0x7FFF;\n//     else                      return a;\n// }\n\nstatic inline void scaleSamplesS16Volume(uint8_t *dst, int nb_samples, double adjustVolumeValue) {\n    int16_t *smp_dst       = (int16_t *)dst;\n\n    int volume = (int)(adjustVolumeValue * 256 + 0.5);\n    // volume < if (vol->volume_i < 0x1000000)\n    printf(\"\\r====%d %lf   \", volume, adjustVolumeValue);\n    if (volume < 0x1000000) {\n        // vol->scale_samples = scale_samples_u8_small;\n        for (int i = 0; i < nb_samples; ++i) {\n            smp_dst[i] = av_clip_int16((smp_dst[i] * volume + 128) >> 8);\n        }\n    } else {\n        // vol->scale_samples = scale_samples_u8;\n        for (int i = 0; i < nb_samples; ++i) {\n            smp_dst[i] = av_clip_int16(((int64_t)smp_dst[i] * volume + 128) >> 8);\n        }\n    }\n}\n\n```","source":"_posts/2018-05-13-ffmpeg-scale-samples.md","raw":"---\ntitle: ffmpeg scale samples\ndate: 2018-05-13 17:49:16\ntags: ffmpeg\n---\n\nffmpeg 音量增益\n\n```c\n// https://www.ffmpeg.org/doxygen/2.7/af__volume_8c_source.html\n\n// static inline int16_t av_clip_int16(int a)\n// {\n//     if ((a+0x8000U) & ~0xFFFF) return (a>>31) ^ 0x7FFF;\n//     else                      return a;\n// }\n\nstatic inline void scaleSamplesS16Volume(uint8_t *dst, int nb_samples, double adjustVolumeValue) {\n    int16_t *smp_dst       = (int16_t *)dst;\n\n    int volume = (int)(adjustVolumeValue * 256 + 0.5);\n    // volume < if (vol->volume_i < 0x1000000)\n    printf(\"\\r====%d %lf   \", volume, adjustVolumeValue);\n    if (volume < 0x1000000) {\n        // vol->scale_samples = scale_samples_u8_small;\n        for (int i = 0; i < nb_samples; ++i) {\n            smp_dst[i] = av_clip_int16((smp_dst[i] * volume + 128) >> 8);\n        }\n    } else {\n        // vol->scale_samples = scale_samples_u8;\n        for (int i = 0; i < nb_samples; ++i) {\n            smp_dst[i] = av_clip_int16(((int64_t)smp_dst[i] * volume + 128) >> 8);\n        }\n    }\n}\n\n```","slug":"2018-05-13-ffmpeg-scale-samples","published":1,"updated":"2021-06-16T08:32:53.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhkhszq0016uavq0xwn0l99","content":"<p>ffmpeg 音量增益</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://www.ffmpeg.org/doxygen/2.7/af__volume_8c_source.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// static inline int16_t av_clip_int16(int a)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     if ((a+0x8000U) &amp; ~0xFFFF) return (a&gt;&gt;31) ^ 0x7FFF;</span></span><br><span class=\"line\"><span class=\"comment\">//     else                      return a;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">scaleSamplesS16Volume</span><span class=\"params\">(<span class=\"keyword\">uint8_t</span> *dst, <span class=\"keyword\">int</span> nb_samples, <span class=\"keyword\">double</span> adjustVolumeValue)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int16_t</span> *smp_dst       = (<span class=\"keyword\">int16_t</span> *)dst;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> volume = (<span class=\"keyword\">int</span>)(adjustVolumeValue * <span class=\"number\">256</span> + <span class=\"number\">0.5</span>);</span><br><span class=\"line\">    <span class=\"comment\">// volume &lt; if (vol-&gt;volume_i &lt; 0x1000000)</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\r====%d %lf   &quot;</span>, volume, adjustVolumeValue);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (volume &lt; <span class=\"number\">0x1000000</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// vol-&gt;scale_samples = scale_samples_u8_small;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nb_samples; ++i) &#123;</span><br><span class=\"line\">            smp_dst[i] = av_clip_int16((smp_dst[i] * volume + <span class=\"number\">128</span>) &gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// vol-&gt;scale_samples = scale_samples_u8;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nb_samples; ++i) &#123;</span><br><span class=\"line\">            smp_dst[i] = av_clip_int16(((<span class=\"keyword\">int64_t</span>)smp_dst[i] * volume + <span class=\"number\">128</span>) &gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>ffmpeg 音量增益</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://www.ffmpeg.org/doxygen/2.7/af__volume_8c_source.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// static inline int16_t av_clip_int16(int a)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     if ((a+0x8000U) &amp; ~0xFFFF) return (a&gt;&gt;31) ^ 0x7FFF;</span></span><br><span class=\"line\"><span class=\"comment\">//     else                      return a;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">scaleSamplesS16Volume</span><span class=\"params\">(<span class=\"keyword\">uint8_t</span> *dst, <span class=\"keyword\">int</span> nb_samples, <span class=\"keyword\">double</span> adjustVolumeValue)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int16_t</span> *smp_dst       = (<span class=\"keyword\">int16_t</span> *)dst;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> volume = (<span class=\"keyword\">int</span>)(adjustVolumeValue * <span class=\"number\">256</span> + <span class=\"number\">0.5</span>);</span><br><span class=\"line\">    <span class=\"comment\">// volume &lt; if (vol-&gt;volume_i &lt; 0x1000000)</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\r====%d %lf   &quot;</span>, volume, adjustVolumeValue);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (volume &lt; <span class=\"number\">0x1000000</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// vol-&gt;scale_samples = scale_samples_u8_small;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nb_samples; ++i) &#123;</span><br><span class=\"line\">            smp_dst[i] = av_clip_int16((smp_dst[i] * volume + <span class=\"number\">128</span>) &gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// vol-&gt;scale_samples = scale_samples_u8;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nb_samples; ++i) &#123;</span><br><span class=\"line\">            smp_dst[i] = av_clip_int16(((<span class=\"keyword\">int64_t</span>)smp_dst[i] * volume + <span class=\"number\">128</span>) &gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"a mac bug about udp port triggered by srs","date":"2021-06-28T09:31:04.000Z","_content":"\n在srs上,有一个bug困扰我很长时间了, 最近才分析清楚其原因.\n\n### 1 问题概述\n\n在srs中开启rtc,打开浏览器多次publish 和 play 后, 出现ice协商失败的情况; \n调试发现udp阻塞所致;\n更换 rtc 端口可暂时解决问题.\n\n### 2 问题分析\n在srs中阻塞函数是来自st的st_recvfrom, 可以从`srs/trunk/research/st` 入手, 设计如下测试 \n\n问题组\n```\nserver: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server && ./udp-server 127.0.0.1 8000 3\nclient: g++ udp-client.cpp ../../objs/st/libst.a -g -O0 -o udp-client && ./udp-client 127.0.0.1 8000 3\n```\n\n对照组\n```\nserver: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server && ./udp-server 127.0.0.1 18000 3\nclient: g++ udp-client.cpp ../../objs/st/libst.a -g -O0 -o udp-client && ./udp-client 127.0.0.1 18000 3\n```\n\n测试发现问题组server会卡住, 与srs情况一致\n\n### 3 更换server的监听ip\n\n将 server 端 ip 换成 `0.0.0.0`(即 `udp-server 0.0.0.0 8000 3` 和 `udp-server 0.0.0.0 3`)\n\n测试结果没有变化;\n\n初步结论是: bug 与 st 有关\n\n### 4 调整client\n\n将 client换成 nc, 具体如下\n\n问题组\n```\nserver: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server && ./udp-server 127.0.0.1 8000 3\nclient: echo \"Hello\" | nc -4u $CANDIDATE 8000\n```\n对照组\n```\nserver: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server && ./udp-server 127.0.0.1 18000 3\nclient: echo \"Hello\" | nc -4u $CANDIDATE 18000\n```\n\n测试结果与之前一致.\n\n### 5 调整server\n\n再进一步调整测试\n\n问题组\n\n```\nserver: nc -u -l 8000\nclient: echo \"Hello\" | nc -4u $CANDIDATE 8000\n```\n对照组\n\n```\nserver: nc -u -l 8000\nclient: echo \"Hello\" | nc -4u $CANDIDATE 18000\n```\n\n测试结果与之前依然一致. 不过,可以排除st的嫌疑了;\n\n结论是: bug与st无关\n\n那么,只能是与mac有关了\n\n### 6 结论\n\n综合上述各次测试对比, 这个bug与st无关,与操作系统mac有关. \n\n能力有限, 这个问题就不再往下分析了,就此记录一下.\n\n我的系统是`macOS Big Sur 11.4`, 通过`uname -a`查看, 具体为 `Darwin Kernel Version 20.5.0: Sat May  8 05:10:33 PDT 2021; root:xnu-7195.121.3~9/RELEASE_X86_64 x86_64`\n\n不过在升级系统前(macOS 10.15)也同样存在这个问题.\n\nPS: \n1. CANDIDATE=$(ifconfig en0 inet| grep inet|awk '{print $2}')\n2. 查看端口占用 lsof -i:8000\n","source":"_posts/a-mac-bug-about-udp-port-triggered-by-srs.md","raw":"---\ntitle: a mac bug about udp port triggered by srs\ndate: 2021-06-28 17:31:04\ntags:\n---\n\n在srs上,有一个bug困扰我很长时间了, 最近才分析清楚其原因.\n\n### 1 问题概述\n\n在srs中开启rtc,打开浏览器多次publish 和 play 后, 出现ice协商失败的情况; \n调试发现udp阻塞所致;\n更换 rtc 端口可暂时解决问题.\n\n### 2 问题分析\n在srs中阻塞函数是来自st的st_recvfrom, 可以从`srs/trunk/research/st` 入手, 设计如下测试 \n\n问题组\n```\nserver: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server && ./udp-server 127.0.0.1 8000 3\nclient: g++ udp-client.cpp ../../objs/st/libst.a -g -O0 -o udp-client && ./udp-client 127.0.0.1 8000 3\n```\n\n对照组\n```\nserver: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server && ./udp-server 127.0.0.1 18000 3\nclient: g++ udp-client.cpp ../../objs/st/libst.a -g -O0 -o udp-client && ./udp-client 127.0.0.1 18000 3\n```\n\n测试发现问题组server会卡住, 与srs情况一致\n\n### 3 更换server的监听ip\n\n将 server 端 ip 换成 `0.0.0.0`(即 `udp-server 0.0.0.0 8000 3` 和 `udp-server 0.0.0.0 3`)\n\n测试结果没有变化;\n\n初步结论是: bug 与 st 有关\n\n### 4 调整client\n\n将 client换成 nc, 具体如下\n\n问题组\n```\nserver: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server && ./udp-server 127.0.0.1 8000 3\nclient: echo \"Hello\" | nc -4u $CANDIDATE 8000\n```\n对照组\n```\nserver: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server && ./udp-server 127.0.0.1 18000 3\nclient: echo \"Hello\" | nc -4u $CANDIDATE 18000\n```\n\n测试结果与之前一致.\n\n### 5 调整server\n\n再进一步调整测试\n\n问题组\n\n```\nserver: nc -u -l 8000\nclient: echo \"Hello\" | nc -4u $CANDIDATE 8000\n```\n对照组\n\n```\nserver: nc -u -l 8000\nclient: echo \"Hello\" | nc -4u $CANDIDATE 18000\n```\n\n测试结果与之前依然一致. 不过,可以排除st的嫌疑了;\n\n结论是: bug与st无关\n\n那么,只能是与mac有关了\n\n### 6 结论\n\n综合上述各次测试对比, 这个bug与st无关,与操作系统mac有关. \n\n能力有限, 这个问题就不再往下分析了,就此记录一下.\n\n我的系统是`macOS Big Sur 11.4`, 通过`uname -a`查看, 具体为 `Darwin Kernel Version 20.5.0: Sat May  8 05:10:33 PDT 2021; root:xnu-7195.121.3~9/RELEASE_X86_64 x86_64`\n\n不过在升级系统前(macOS 10.15)也同样存在这个问题.\n\nPS: \n1. CANDIDATE=$(ifconfig en0 inet| grep inet|awk '{print $2}')\n2. 查看端口占用 lsof -i:8000\n","slug":"a-mac-bug-about-udp-port-triggered-by-srs","published":1,"updated":"2021-06-28T10:06:08.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhkhszr0019uavq1ut412su","content":"<p>在srs上,有一个bug困扰我很长时间了, 最近才分析清楚其原因.</p>\n<h3 id=\"1-问题概述\"><a href=\"#1-问题概述\" class=\"headerlink\" title=\"1 问题概述\"></a>1 问题概述</h3><p>在srs中开启rtc,打开浏览器多次publish 和 play 后, 出现ice协商失败的情况;<br>调试发现udp阻塞所致;<br>更换 rtc 端口可暂时解决问题.</p>\n<h3 id=\"2-问题分析\"><a href=\"#2-问题分析\" class=\"headerlink\" title=\"2 问题分析\"></a>2 问题分析</h3><p>在srs中阻塞函数是来自st的st_recvfrom, 可以从<code>srs/trunk/research/st</code> 入手, 设计如下测试 </p>\n<p>问题组<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server &amp;&amp; ./udp-server 127.0.0.1 8000 3</span><br><span class=\"line\">client: g++ udp-client.cpp ../../objs/st/libst.a -g -O0 -o udp-client &amp;&amp; ./udp-client 127.0.0.1 8000 3</span><br></pre></td></tr></table></figure></p>\n<p>对照组<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server &amp;&amp; ./udp-server 127.0.0.1 18000 3</span><br><span class=\"line\">client: g++ udp-client.cpp ../../objs/st/libst.a -g -O0 -o udp-client &amp;&amp; ./udp-client 127.0.0.1 18000 3</span><br></pre></td></tr></table></figure></p>\n<p>测试发现问题组server会卡住, 与srs情况一致</p>\n<h3 id=\"3-更换server的监听ip\"><a href=\"#3-更换server的监听ip\" class=\"headerlink\" title=\"3 更换server的监听ip\"></a>3 更换server的监听ip</h3><p>将 server 端 ip 换成 <code>0.0.0.0</code>(即 <code>udp-server 0.0.0.0 8000 3</code> 和 <code>udp-server 0.0.0.0 3</code>)</p>\n<p>测试结果没有变化;</p>\n<p>初步结论是: bug 与 st 有关</p>\n<h3 id=\"4-调整client\"><a href=\"#4-调整client\" class=\"headerlink\" title=\"4 调整client\"></a>4 调整client</h3><p>将 client换成 nc, 具体如下</p>\n<p>问题组<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server &amp;&amp; ./udp-server 127.0.0.1 8000 3</span><br><span class=\"line\">client: echo &quot;Hello&quot; | nc -4u $CANDIDATE 8000</span><br></pre></td></tr></table></figure><br>对照组<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server &amp;&amp; ./udp-server 127.0.0.1 18000 3</span><br><span class=\"line\">client: echo &quot;Hello&quot; | nc -4u $CANDIDATE 18000</span><br></pre></td></tr></table></figure></p>\n<p>测试结果与之前一致.</p>\n<h3 id=\"5-调整server\"><a href=\"#5-调整server\" class=\"headerlink\" title=\"5 调整server\"></a>5 调整server</h3><p>再进一步调整测试</p>\n<p>问题组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server: nc -u -l 8000</span><br><span class=\"line\">client: echo &quot;Hello&quot; | nc -4u $CANDIDATE 8000</span><br></pre></td></tr></table></figure>\n<p>对照组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server: nc -u -l 8000</span><br><span class=\"line\">client: echo &quot;Hello&quot; | nc -4u $CANDIDATE 18000</span><br></pre></td></tr></table></figure>\n<p>测试结果与之前依然一致. 不过,可以排除st的嫌疑了;</p>\n<p>结论是: bug与st无关</p>\n<p>那么,只能是与mac有关了</p>\n<h3 id=\"6-结论\"><a href=\"#6-结论\" class=\"headerlink\" title=\"6 结论\"></a>6 结论</h3><p>综合上述各次测试对比, 这个bug与st无关,与操作系统mac有关. </p>\n<p>能力有限, 这个问题就不再往下分析了,就此记录一下.</p>\n<p>我的系统是<code>macOS Big Sur 11.4</code>, 通过<code>uname -a</code>查看, 具体为 <code>Darwin Kernel Version 20.5.0: Sat May  8 05:10:33 PDT 2021; root:xnu-7195.121.3~9/RELEASE_X86_64 x86_64</code></p>\n<p>不过在升级系统前(macOS 10.15)也同样存在这个问题.</p>\n<p>PS: </p>\n<ol>\n<li>CANDIDATE=$(ifconfig en0 inet| grep inet|awk ‘{print $2}’)</li>\n<li>查看端口占用 lsof -i:8000</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在srs上,有一个bug困扰我很长时间了, 最近才分析清楚其原因.</p>\n<h3 id=\"1-问题概述\"><a href=\"#1-问题概述\" class=\"headerlink\" title=\"1 问题概述\"></a>1 问题概述</h3><p>在srs中开启rtc,打开浏览器多次publish 和 play 后, 出现ice协商失败的情况;<br>调试发现udp阻塞所致;<br>更换 rtc 端口可暂时解决问题.</p>\n<h3 id=\"2-问题分析\"><a href=\"#2-问题分析\" class=\"headerlink\" title=\"2 问题分析\"></a>2 问题分析</h3><p>在srs中阻塞函数是来自st的st_recvfrom, 可以从<code>srs/trunk/research/st</code> 入手, 设计如下测试 </p>\n<p>问题组<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server &amp;&amp; ./udp-server 127.0.0.1 8000 3</span><br><span class=\"line\">client: g++ udp-client.cpp ../../objs/st/libst.a -g -O0 -o udp-client &amp;&amp; ./udp-client 127.0.0.1 8000 3</span><br></pre></td></tr></table></figure></p>\n<p>对照组<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server &amp;&amp; ./udp-server 127.0.0.1 18000 3</span><br><span class=\"line\">client: g++ udp-client.cpp ../../objs/st/libst.a -g -O0 -o udp-client &amp;&amp; ./udp-client 127.0.0.1 18000 3</span><br></pre></td></tr></table></figure></p>\n<p>测试发现问题组server会卡住, 与srs情况一致</p>\n<h3 id=\"3-更换server的监听ip\"><a href=\"#3-更换server的监听ip\" class=\"headerlink\" title=\"3 更换server的监听ip\"></a>3 更换server的监听ip</h3><p>将 server 端 ip 换成 <code>0.0.0.0</code>(即 <code>udp-server 0.0.0.0 8000 3</code> 和 <code>udp-server 0.0.0.0 3</code>)</p>\n<p>测试结果没有变化;</p>\n<p>初步结论是: bug 与 st 有关</p>\n<h3 id=\"4-调整client\"><a href=\"#4-调整client\" class=\"headerlink\" title=\"4 调整client\"></a>4 调整client</h3><p>将 client换成 nc, 具体如下</p>\n<p>问题组<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server &amp;&amp; ./udp-server 127.0.0.1 8000 3</span><br><span class=\"line\">client: echo &quot;Hello&quot; | nc -4u $CANDIDATE 8000</span><br></pre></td></tr></table></figure><br>对照组<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server: g++ udp-server.cpp ../../objs/st/libst.a -g -O0 -o udp-server &amp;&amp; ./udp-server 127.0.0.1 18000 3</span><br><span class=\"line\">client: echo &quot;Hello&quot; | nc -4u $CANDIDATE 18000</span><br></pre></td></tr></table></figure></p>\n<p>测试结果与之前一致.</p>\n<h3 id=\"5-调整server\"><a href=\"#5-调整server\" class=\"headerlink\" title=\"5 调整server\"></a>5 调整server</h3><p>再进一步调整测试</p>\n<p>问题组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server: nc -u -l 8000</span><br><span class=\"line\">client: echo &quot;Hello&quot; | nc -4u $CANDIDATE 8000</span><br></pre></td></tr></table></figure>\n<p>对照组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server: nc -u -l 8000</span><br><span class=\"line\">client: echo &quot;Hello&quot; | nc -4u $CANDIDATE 18000</span><br></pre></td></tr></table></figure>\n<p>测试结果与之前依然一致. 不过,可以排除st的嫌疑了;</p>\n<p>结论是: bug与st无关</p>\n<p>那么,只能是与mac有关了</p>\n<h3 id=\"6-结论\"><a href=\"#6-结论\" class=\"headerlink\" title=\"6 结论\"></a>6 结论</h3><p>综合上述各次测试对比, 这个bug与st无关,与操作系统mac有关. </p>\n<p>能力有限, 这个问题就不再往下分析了,就此记录一下.</p>\n<p>我的系统是<code>macOS Big Sur 11.4</code>, 通过<code>uname -a</code>查看, 具体为 <code>Darwin Kernel Version 20.5.0: Sat May  8 05:10:33 PDT 2021; root:xnu-7195.121.3~9/RELEASE_X86_64 x86_64</code></p>\n<p>不过在升级系统前(macOS 10.15)也同样存在这个问题.</p>\n<p>PS: </p>\n<ol>\n<li>CANDIDATE=$(ifconfig en0 inet| grep inet|awk ‘{print $2}’)</li>\n<li>查看端口占用 lsof -i:8000</li>\n</ol>\n"},{"title":"Field Trails","date":"2021-06-01T11:34:12.000Z","_content":"\n\n## Field Trials 介绍\nfield trials （试用特性）是Chrome 的一种特性开关机制，WebRTC沿用了它。其本质是一种特定格式的字符串，格式如下：\n\n    \"FieldTrialName1/Enabled/FieldTrialName2/Disabled/FieldTrialName3/Disabled/\"\n\n### 最简格式为空字符串\n\n    \"\"\n\n### 基本单元\n    \n    \"FieldTrialName/FieldTrialValue/\"\n\n### FieldTrialValue的有效值\n常见的FieldTrialValue取值有 Enabled 和 Disabled，一些例外的还有形如 Default，EnabledByFlag_2SL3TL，比如\n\n    WebRTC-H264Simulcast/Enabled/\n    WebRTC-LegacySimulcastLayerLimit/Disabled/\n    WebRTC-SupportVP9SVC/Default/\n    WebRTC-SupportVP9SVC/EnabledByFlag_2SL3TL/\n    WebRTC-Vp9InterLayerPred/Enabled,inter_layer_pred_mode:off/\n    WebRTC-Vp9InterLayerPred/Enabled,inter_layer_pred_mode:on/\n    WebRTC-Vp9InterLayerPred/Enabled,inter_layer_pred_mode:onkeypic/\n    WebRTC-VP8-Forced-Fallback-Encoder-v2/Enabled-1,2,34567/\n    // 开启 Audio-NetEqExtraDelay 值为 120ms\n    WebRTC-Audio-NetEqExtraDelay/Enabled-120/\n\n特殊例子中FieldTrialValue的具体含义取决于相应代码的解释，一般以Enabled开头\n\n\n在chrome浏览器中，可以打开 chrome://flags 查看 FieldTrials\n\n\n## WebRTC利用它完成了什么？\n\n    constexpr char kUseLegacySimulcastLayerLimitFieldTrial[] =\n        \"WebRTC-LegacySimulcastLayerLimit\";\n    \n    \n    if (!absl::StartsWith(trials.Lookup(kUseLegacySimulcastLayerLimitFieldTrial), \"Disabled\")) {\n    // Case A: kUseLegacySimulcastLayerLimitFieldTrial is Enabled\n    } else {\n    // Case B: kUseLegacySimulcastLayerLimitFieldTrial is Disabled\n    }\n\n当我们设置的 fieldtrials 中包含 \"WebRTC-LegacySimulcastLayerLimit/Disabled\" 则走到 Case B，包含 \"WebRTC-LegacySimulcastLayerLimit/Enabled\" 则走到 Case A。\n\n思考：都不包含会走A还是B？\n\n\n\n## FieldTrials 如何使用？\n\n    // c++ @see https://github.com/johzzy/webrtc-mirror/blob/master/system_wrappers/include/field_trial.h#L83\n    webrtc::field_trial::InitFieldTrialsFromString(const char* trials_string);\n    // 举例\n    webrtc::field_trial::InitFieldTrialsFromString(\"Audio/Enabled/Video/Disabled/\");\n \n \n \n    // java @see https://github.com/johzzy/webrtc-mirror/blob/master/sdk/android/api/org/webrtc/PeerConnectionFactory.java#L99\n    public PeerConnectionFactory.InitializationOptions.Builder setFieldTrials(String fieldTrials)\n    // 举例\n    String fieldTrials = \"WebRTC-LegacySimulcastLayerLimit/Disabled/\";\n    PeerConnectionFactory.initialize(\n            PeerConnectionFactory.InitializationOptions.builder(context)\n                    .setFieldTrials(fieldTrials)\n                    .setEnableInternalTracer(true)\n                    .createInitializationOptions());\n    // oc @see https://github.com/johzzy/webrtc-mirror/blob/master/sdk/objc/api/peerconnection/RTCFieldTrials.h#L33\n    void RTCInitFieldTrialDictionary(NSDictionary<NSString *, NSString *> *fieldTrials) {\n    if (!fieldTrials) {\n        RTCLogWarning(@\"No fieldTrials provided.\");\n        return;\n    }\n    // Assemble the keys and values into the field trial string.\n    // We don't perform any extra format checking. That should be done by the underlying WebRTC calls.\n    NSMutableString *fieldTrialInitString = [NSMutableString string];\n    for (NSString *key in fieldTrials) {\n        NSString *fieldTrialEntry = [NSString stringWithFormat:@\"%@/%@/\", key, fieldTrials[key]];\n        [fieldTrialInitString appendString:fieldTrialEntry];\n    }\n    size_t len = fieldTrialInitString.length + 1;\n    gFieldTrialInitString.reset(new char[len]);\n    if (![fieldTrialInitString getCString:gFieldTrialInitString.get()\n                                maxLength:len\n                                encoding:NSUTF8StringEncoding]) {\n        RTCLogError(@\"Failed to convert field trial string.\");\n        return;\n    }\n    webrtc::field_trial::InitFieldTrialsFromString(gFieldTrialInitString.get());\n    }\n    \n \n    举例\n    NSDictionary *fieldTrials = @{};\n    RTCInitFieldTrialDictionary(fieldTrials);\n    \n    \n    // 命令行\n    --force-fieldtrials=WebRTC-H264Simulcast/Enabled/\n\n\n## FieldTrials 实现\n\n    https://github.com/johzzy/webrtc-mirror/blob/master/system_wrappers/include/field_trial.h\n    https://github.com/johzzy/webrtc-mirror/blob/master/system_wrappers/source/field_trial_unittest.cc\n\n\n## FieldTrials 应用示例\n\n使用 WebRTC-PcFactoryDefaultBitrates 控制码率\n\n    WebRTC-PcFactoryDefaultBitrates/Enabled,min:60,max:4000,start:600/\n\n\n码率控制也可以通过sdp进行（相比FieldTrials，sdp设置的优先级更高）\n\n    a=fmtp:102 level-asymmetry-allowed=1;packetization-mode=1;x-google-min-bitrate=400;x-google-max-bitrate=600;profile-level-id=42e01f\n\n\n\n\n","source":"_posts/field-trails.md","raw":"---\ntitle: Field Trails\ndate: 2021-06-01 19:34:12\ntags: webrtc\n---\n\n\n## Field Trials 介绍\nfield trials （试用特性）是Chrome 的一种特性开关机制，WebRTC沿用了它。其本质是一种特定格式的字符串，格式如下：\n\n    \"FieldTrialName1/Enabled/FieldTrialName2/Disabled/FieldTrialName3/Disabled/\"\n\n### 最简格式为空字符串\n\n    \"\"\n\n### 基本单元\n    \n    \"FieldTrialName/FieldTrialValue/\"\n\n### FieldTrialValue的有效值\n常见的FieldTrialValue取值有 Enabled 和 Disabled，一些例外的还有形如 Default，EnabledByFlag_2SL3TL，比如\n\n    WebRTC-H264Simulcast/Enabled/\n    WebRTC-LegacySimulcastLayerLimit/Disabled/\n    WebRTC-SupportVP9SVC/Default/\n    WebRTC-SupportVP9SVC/EnabledByFlag_2SL3TL/\n    WebRTC-Vp9InterLayerPred/Enabled,inter_layer_pred_mode:off/\n    WebRTC-Vp9InterLayerPred/Enabled,inter_layer_pred_mode:on/\n    WebRTC-Vp9InterLayerPred/Enabled,inter_layer_pred_mode:onkeypic/\n    WebRTC-VP8-Forced-Fallback-Encoder-v2/Enabled-1,2,34567/\n    // 开启 Audio-NetEqExtraDelay 值为 120ms\n    WebRTC-Audio-NetEqExtraDelay/Enabled-120/\n\n特殊例子中FieldTrialValue的具体含义取决于相应代码的解释，一般以Enabled开头\n\n\n在chrome浏览器中，可以打开 chrome://flags 查看 FieldTrials\n\n\n## WebRTC利用它完成了什么？\n\n    constexpr char kUseLegacySimulcastLayerLimitFieldTrial[] =\n        \"WebRTC-LegacySimulcastLayerLimit\";\n    \n    \n    if (!absl::StartsWith(trials.Lookup(kUseLegacySimulcastLayerLimitFieldTrial), \"Disabled\")) {\n    // Case A: kUseLegacySimulcastLayerLimitFieldTrial is Enabled\n    } else {\n    // Case B: kUseLegacySimulcastLayerLimitFieldTrial is Disabled\n    }\n\n当我们设置的 fieldtrials 中包含 \"WebRTC-LegacySimulcastLayerLimit/Disabled\" 则走到 Case B，包含 \"WebRTC-LegacySimulcastLayerLimit/Enabled\" 则走到 Case A。\n\n思考：都不包含会走A还是B？\n\n\n\n## FieldTrials 如何使用？\n\n    // c++ @see https://github.com/johzzy/webrtc-mirror/blob/master/system_wrappers/include/field_trial.h#L83\n    webrtc::field_trial::InitFieldTrialsFromString(const char* trials_string);\n    // 举例\n    webrtc::field_trial::InitFieldTrialsFromString(\"Audio/Enabled/Video/Disabled/\");\n \n \n \n    // java @see https://github.com/johzzy/webrtc-mirror/blob/master/sdk/android/api/org/webrtc/PeerConnectionFactory.java#L99\n    public PeerConnectionFactory.InitializationOptions.Builder setFieldTrials(String fieldTrials)\n    // 举例\n    String fieldTrials = \"WebRTC-LegacySimulcastLayerLimit/Disabled/\";\n    PeerConnectionFactory.initialize(\n            PeerConnectionFactory.InitializationOptions.builder(context)\n                    .setFieldTrials(fieldTrials)\n                    .setEnableInternalTracer(true)\n                    .createInitializationOptions());\n    // oc @see https://github.com/johzzy/webrtc-mirror/blob/master/sdk/objc/api/peerconnection/RTCFieldTrials.h#L33\n    void RTCInitFieldTrialDictionary(NSDictionary<NSString *, NSString *> *fieldTrials) {\n    if (!fieldTrials) {\n        RTCLogWarning(@\"No fieldTrials provided.\");\n        return;\n    }\n    // Assemble the keys and values into the field trial string.\n    // We don't perform any extra format checking. That should be done by the underlying WebRTC calls.\n    NSMutableString *fieldTrialInitString = [NSMutableString string];\n    for (NSString *key in fieldTrials) {\n        NSString *fieldTrialEntry = [NSString stringWithFormat:@\"%@/%@/\", key, fieldTrials[key]];\n        [fieldTrialInitString appendString:fieldTrialEntry];\n    }\n    size_t len = fieldTrialInitString.length + 1;\n    gFieldTrialInitString.reset(new char[len]);\n    if (![fieldTrialInitString getCString:gFieldTrialInitString.get()\n                                maxLength:len\n                                encoding:NSUTF8StringEncoding]) {\n        RTCLogError(@\"Failed to convert field trial string.\");\n        return;\n    }\n    webrtc::field_trial::InitFieldTrialsFromString(gFieldTrialInitString.get());\n    }\n    \n \n    举例\n    NSDictionary *fieldTrials = @{};\n    RTCInitFieldTrialDictionary(fieldTrials);\n    \n    \n    // 命令行\n    --force-fieldtrials=WebRTC-H264Simulcast/Enabled/\n\n\n## FieldTrials 实现\n\n    https://github.com/johzzy/webrtc-mirror/blob/master/system_wrappers/include/field_trial.h\n    https://github.com/johzzy/webrtc-mirror/blob/master/system_wrappers/source/field_trial_unittest.cc\n\n\n## FieldTrials 应用示例\n\n使用 WebRTC-PcFactoryDefaultBitrates 控制码率\n\n    WebRTC-PcFactoryDefaultBitrates/Enabled,min:60,max:4000,start:600/\n\n\n码率控制也可以通过sdp进行（相比FieldTrials，sdp设置的优先级更高）\n\n    a=fmtp:102 level-asymmetry-allowed=1;packetization-mode=1;x-google-min-bitrate=400;x-google-max-bitrate=600;profile-level-id=42e01f\n\n\n\n\n","slug":"field-trails","published":1,"updated":"2021-06-18T11:17:23.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhkhszs001cuavq2mcz54tr","content":"<h2 id=\"Field-Trials-介绍\"><a href=\"#Field-Trials-介绍\" class=\"headerlink\" title=\"Field Trials 介绍\"></a>Field Trials 介绍</h2><p>field trials （试用特性）是Chrome 的一种特性开关机制，WebRTC沿用了它。其本质是一种特定格式的字符串，格式如下：</p>\n<pre><code>&quot;FieldTrialName1/Enabled/FieldTrialName2/Disabled/FieldTrialName3/Disabled/&quot;\n</code></pre><h3 id=\"最简格式为空字符串\"><a href=\"#最简格式为空字符串\" class=\"headerlink\" title=\"最简格式为空字符串\"></a>最简格式为空字符串</h3><pre><code>&quot;&quot;\n</code></pre><h3 id=\"基本单元\"><a href=\"#基本单元\" class=\"headerlink\" title=\"基本单元\"></a>基本单元</h3><pre><code>&quot;FieldTrialName/FieldTrialValue/&quot;\n</code></pre><h3 id=\"FieldTrialValue的有效值\"><a href=\"#FieldTrialValue的有效值\" class=\"headerlink\" title=\"FieldTrialValue的有效值\"></a>FieldTrialValue的有效值</h3><p>常见的FieldTrialValue取值有 Enabled 和 Disabled，一些例外的还有形如 Default，EnabledByFlag_2SL3TL，比如</p>\n<pre><code>WebRTC-H264Simulcast/Enabled/\nWebRTC-LegacySimulcastLayerLimit/Disabled/\nWebRTC-SupportVP9SVC/Default/\nWebRTC-SupportVP9SVC/EnabledByFlag_2SL3TL/\nWebRTC-Vp9InterLayerPred/Enabled,inter_layer_pred_mode:off/\nWebRTC-Vp9InterLayerPred/Enabled,inter_layer_pred_mode:on/\nWebRTC-Vp9InterLayerPred/Enabled,inter_layer_pred_mode:onkeypic/\nWebRTC-VP8-Forced-Fallback-Encoder-v2/Enabled-1,2,34567/\n// 开启 Audio-NetEqExtraDelay 值为 120ms\nWebRTC-Audio-NetEqExtraDelay/Enabled-120/\n</code></pre><p>特殊例子中FieldTrialValue的具体含义取决于相应代码的解释，一般以Enabled开头</p>\n<p>在chrome浏览器中，可以打开 chrome://flags 查看 FieldTrials</p>\n<h2 id=\"WebRTC利用它完成了什么？\"><a href=\"#WebRTC利用它完成了什么？\" class=\"headerlink\" title=\"WebRTC利用它完成了什么？\"></a>WebRTC利用它完成了什么？</h2><pre><code>constexpr char kUseLegacySimulcastLayerLimitFieldTrial[] =\n    &quot;WebRTC-LegacySimulcastLayerLimit&quot;;\n\n\nif (!absl::StartsWith(trials.Lookup(kUseLegacySimulcastLayerLimitFieldTrial), &quot;Disabled&quot;)) &#123;\n// Case A: kUseLegacySimulcastLayerLimitFieldTrial is Enabled\n&#125; else &#123;\n// Case B: kUseLegacySimulcastLayerLimitFieldTrial is Disabled\n&#125;\n</code></pre><p>当我们设置的 fieldtrials 中包含 “WebRTC-LegacySimulcastLayerLimit/Disabled” 则走到 Case B，包含 “WebRTC-LegacySimulcastLayerLimit/Enabled” 则走到 Case A。</p>\n<p>思考：都不包含会走A还是B？</p>\n<h2 id=\"FieldTrials-如何使用？\"><a href=\"#FieldTrials-如何使用？\" class=\"headerlink\" title=\"FieldTrials 如何使用？\"></a>FieldTrials 如何使用？</h2><pre><code>// c++ @see https://github.com/johzzy/webrtc-mirror/blob/master/system_wrappers/include/field_trial.h#L83\nwebrtc::field_trial::InitFieldTrialsFromString(const char* trials_string);\n// 举例\nwebrtc::field_trial::InitFieldTrialsFromString(&quot;Audio/Enabled/Video/Disabled/&quot;);\n\n\n\n// java @see https://github.com/johzzy/webrtc-mirror/blob/master/sdk/android/api/org/webrtc/PeerConnectionFactory.java#L99\npublic PeerConnectionFactory.InitializationOptions.Builder setFieldTrials(String fieldTrials)\n// 举例\nString fieldTrials = &quot;WebRTC-LegacySimulcastLayerLimit/Disabled/&quot;;\nPeerConnectionFactory.initialize(\n        PeerConnectionFactory.InitializationOptions.builder(context)\n                .setFieldTrials(fieldTrials)\n                .setEnableInternalTracer(true)\n                .createInitializationOptions());\n// oc @see https://github.com/johzzy/webrtc-mirror/blob/master/sdk/objc/api/peerconnection/RTCFieldTrials.h#L33\nvoid RTCInitFieldTrialDictionary(NSDictionary&lt;NSString *, NSString *&gt; *fieldTrials) &#123;\nif (!fieldTrials) &#123;\n    RTCLogWarning(@&quot;No fieldTrials provided.&quot;);\n    return;\n&#125;\n// Assemble the keys and values into the field trial string.\n// We don&apos;t perform any extra format checking. That should be done by the underlying WebRTC calls.\nNSMutableString *fieldTrialInitString = [NSMutableString string];\nfor (NSString *key in fieldTrials) &#123;\n    NSString *fieldTrialEntry = [NSString stringWithFormat:@&quot;%@/%@/&quot;, key, fieldTrials[key]];\n    [fieldTrialInitString appendString:fieldTrialEntry];\n&#125;\nsize_t len = fieldTrialInitString.length + 1;\ngFieldTrialInitString.reset(new char[len]);\nif (![fieldTrialInitString getCString:gFieldTrialInitString.get()\n                            maxLength:len\n                            encoding:NSUTF8StringEncoding]) &#123;\n    RTCLogError(@&quot;Failed to convert field trial string.&quot;);\n    return;\n&#125;\nwebrtc::field_trial::InitFieldTrialsFromString(gFieldTrialInitString.get());\n&#125;\n\n\n举例\nNSDictionary *fieldTrials = @&#123;&#125;;\nRTCInitFieldTrialDictionary(fieldTrials);\n\n\n// 命令行\n--force-fieldtrials=WebRTC-H264Simulcast/Enabled/\n</code></pre><h2 id=\"FieldTrials-实现\"><a href=\"#FieldTrials-实现\" class=\"headerlink\" title=\"FieldTrials 实现\"></a>FieldTrials 实现</h2><pre><code>https://github.com/johzzy/webrtc-mirror/blob/master/system_wrappers/include/field_trial.h\nhttps://github.com/johzzy/webrtc-mirror/blob/master/system_wrappers/source/field_trial_unittest.cc\n</code></pre><h2 id=\"FieldTrials-应用示例\"><a href=\"#FieldTrials-应用示例\" class=\"headerlink\" title=\"FieldTrials 应用示例\"></a>FieldTrials 应用示例</h2><p>使用 WebRTC-PcFactoryDefaultBitrates 控制码率</p>\n<pre><code>WebRTC-PcFactoryDefaultBitrates/Enabled,min:60,max:4000,start:600/\n</code></pre><p>码率控制也可以通过sdp进行（相比FieldTrials，sdp设置的优先级更高）</p>\n<pre><code>a=fmtp:102 level-asymmetry-allowed=1;packetization-mode=1;x-google-min-bitrate=400;x-google-max-bitrate=600;profile-level-id=42e01f\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Field-Trials-介绍\"><a href=\"#Field-Trials-介绍\" class=\"headerlink\" title=\"Field Trials 介绍\"></a>Field Trials 介绍</h2><p>field trials （试用特性）是Chrome 的一种特性开关机制，WebRTC沿用了它。其本质是一种特定格式的字符串，格式如下：</p>\n<pre><code>&quot;FieldTrialName1/Enabled/FieldTrialName2/Disabled/FieldTrialName3/Disabled/&quot;\n</code></pre><h3 id=\"最简格式为空字符串\"><a href=\"#最简格式为空字符串\" class=\"headerlink\" title=\"最简格式为空字符串\"></a>最简格式为空字符串</h3><pre><code>&quot;&quot;\n</code></pre><h3 id=\"基本单元\"><a href=\"#基本单元\" class=\"headerlink\" title=\"基本单元\"></a>基本单元</h3><pre><code>&quot;FieldTrialName/FieldTrialValue/&quot;\n</code></pre><h3 id=\"FieldTrialValue的有效值\"><a href=\"#FieldTrialValue的有效值\" class=\"headerlink\" title=\"FieldTrialValue的有效值\"></a>FieldTrialValue的有效值</h3><p>常见的FieldTrialValue取值有 Enabled 和 Disabled，一些例外的还有形如 Default，EnabledByFlag_2SL3TL，比如</p>\n<pre><code>WebRTC-H264Simulcast/Enabled/\nWebRTC-LegacySimulcastLayerLimit/Disabled/\nWebRTC-SupportVP9SVC/Default/\nWebRTC-SupportVP9SVC/EnabledByFlag_2SL3TL/\nWebRTC-Vp9InterLayerPred/Enabled,inter_layer_pred_mode:off/\nWebRTC-Vp9InterLayerPred/Enabled,inter_layer_pred_mode:on/\nWebRTC-Vp9InterLayerPred/Enabled,inter_layer_pred_mode:onkeypic/\nWebRTC-VP8-Forced-Fallback-Encoder-v2/Enabled-1,2,34567/\n// 开启 Audio-NetEqExtraDelay 值为 120ms\nWebRTC-Audio-NetEqExtraDelay/Enabled-120/\n</code></pre><p>特殊例子中FieldTrialValue的具体含义取决于相应代码的解释，一般以Enabled开头</p>\n<p>在chrome浏览器中，可以打开 chrome://flags 查看 FieldTrials</p>\n<h2 id=\"WebRTC利用它完成了什么？\"><a href=\"#WebRTC利用它完成了什么？\" class=\"headerlink\" title=\"WebRTC利用它完成了什么？\"></a>WebRTC利用它完成了什么？</h2><pre><code>constexpr char kUseLegacySimulcastLayerLimitFieldTrial[] =\n    &quot;WebRTC-LegacySimulcastLayerLimit&quot;;\n\n\nif (!absl::StartsWith(trials.Lookup(kUseLegacySimulcastLayerLimitFieldTrial), &quot;Disabled&quot;)) &#123;\n// Case A: kUseLegacySimulcastLayerLimitFieldTrial is Enabled\n&#125; else &#123;\n// Case B: kUseLegacySimulcastLayerLimitFieldTrial is Disabled\n&#125;\n</code></pre><p>当我们设置的 fieldtrials 中包含 “WebRTC-LegacySimulcastLayerLimit/Disabled” 则走到 Case B，包含 “WebRTC-LegacySimulcastLayerLimit/Enabled” 则走到 Case A。</p>\n<p>思考：都不包含会走A还是B？</p>\n<h2 id=\"FieldTrials-如何使用？\"><a href=\"#FieldTrials-如何使用？\" class=\"headerlink\" title=\"FieldTrials 如何使用？\"></a>FieldTrials 如何使用？</h2><pre><code>// c++ @see https://github.com/johzzy/webrtc-mirror/blob/master/system_wrappers/include/field_trial.h#L83\nwebrtc::field_trial::InitFieldTrialsFromString(const char* trials_string);\n// 举例\nwebrtc::field_trial::InitFieldTrialsFromString(&quot;Audio/Enabled/Video/Disabled/&quot;);\n\n\n\n// java @see https://github.com/johzzy/webrtc-mirror/blob/master/sdk/android/api/org/webrtc/PeerConnectionFactory.java#L99\npublic PeerConnectionFactory.InitializationOptions.Builder setFieldTrials(String fieldTrials)\n// 举例\nString fieldTrials = &quot;WebRTC-LegacySimulcastLayerLimit/Disabled/&quot;;\nPeerConnectionFactory.initialize(\n        PeerConnectionFactory.InitializationOptions.builder(context)\n                .setFieldTrials(fieldTrials)\n                .setEnableInternalTracer(true)\n                .createInitializationOptions());\n// oc @see https://github.com/johzzy/webrtc-mirror/blob/master/sdk/objc/api/peerconnection/RTCFieldTrials.h#L33\nvoid RTCInitFieldTrialDictionary(NSDictionary&lt;NSString *, NSString *&gt; *fieldTrials) &#123;\nif (!fieldTrials) &#123;\n    RTCLogWarning(@&quot;No fieldTrials provided.&quot;);\n    return;\n&#125;\n// Assemble the keys and values into the field trial string.\n// We don&apos;t perform any extra format checking. That should be done by the underlying WebRTC calls.\nNSMutableString *fieldTrialInitString = [NSMutableString string];\nfor (NSString *key in fieldTrials) &#123;\n    NSString *fieldTrialEntry = [NSString stringWithFormat:@&quot;%@/%@/&quot;, key, fieldTrials[key]];\n    [fieldTrialInitString appendString:fieldTrialEntry];\n&#125;\nsize_t len = fieldTrialInitString.length + 1;\ngFieldTrialInitString.reset(new char[len]);\nif (![fieldTrialInitString getCString:gFieldTrialInitString.get()\n                            maxLength:len\n                            encoding:NSUTF8StringEncoding]) &#123;\n    RTCLogError(@&quot;Failed to convert field trial string.&quot;);\n    return;\n&#125;\nwebrtc::field_trial::InitFieldTrialsFromString(gFieldTrialInitString.get());\n&#125;\n\n\n举例\nNSDictionary *fieldTrials = @&#123;&#125;;\nRTCInitFieldTrialDictionary(fieldTrials);\n\n\n// 命令行\n--force-fieldtrials=WebRTC-H264Simulcast/Enabled/\n</code></pre><h2 id=\"FieldTrials-实现\"><a href=\"#FieldTrials-实现\" class=\"headerlink\" title=\"FieldTrials 实现\"></a>FieldTrials 实现</h2><pre><code>https://github.com/johzzy/webrtc-mirror/blob/master/system_wrappers/include/field_trial.h\nhttps://github.com/johzzy/webrtc-mirror/blob/master/system_wrappers/source/field_trial_unittest.cc\n</code></pre><h2 id=\"FieldTrials-应用示例\"><a href=\"#FieldTrials-应用示例\" class=\"headerlink\" title=\"FieldTrials 应用示例\"></a>FieldTrials 应用示例</h2><p>使用 WebRTC-PcFactoryDefaultBitrates 控制码率</p>\n<pre><code>WebRTC-PcFactoryDefaultBitrates/Enabled,min:60,max:4000,start:600/\n</code></pre><p>码率控制也可以通过sdp进行（相比FieldTrials，sdp设置的优先级更高）</p>\n<pre><code>a=fmtp:102 level-asymmetry-allowed=1;packetization-mode=1;x-google-min-bitrate=400;x-google-max-bitrate=600;profile-level-id=42e01f\n</code></pre>"},{"title":"simulcast support in srs","date":"2021-06-18T10:50:41.000Z","_content":"\n最近弄明白了 Simulcast, 就给 SRS 加了 Simulcast 功能支持, 不过是 Chrome 独有的 SDP munging 风格的 Simulcast, 以后了解清楚了标准的 Simulcast 格式再完善一下.\n\nPR 详见 https://github.com/ossrs/srs/pull/2420\n\n\n## 发布端\n\n使用  `numberOfSimulcastLayers` 标示 Simulcast 层级数, 可选的有效值为 1,2,3; 其中1为默认值, 此外的其他值为无效值, 若误用会重置为默认1.\n\n`numberOfSimulcastLayers = 1` 相当于 `Simulcast 流` 退化为 `单流`\n\n    webrtc://127.0.0.1/live/livestream?numberOfSimulcastLayers=1  (相当于单流)\n    webrtc://127.0.0.1/live/livestream?numberOfSimulcastLayers=2  (2 层 Simulcast 流)\n    webrtc://127.0.0.1/live/livestream?numberOfSimulcastLayers=3  (3 层 Simulcast 流)\n\n## 播放端\n\n播放端使用 `layer` 选择哪一层视频流,可选的有效值为 0,1,2,3,...\n如果 `layer` 对应的视频流无法播放,则退化为一般场景的播放端.\n\n    low: webrtc://127.0.0.1/live/livestream?layer=0\n    mid: webrtc://127.0.0.1/live/livestream?layer=1\n    high: webrtc://127.0.0.1/live/livestream?layer=2\n    other1: webrtc://127.0.0.1/live/livestream?layer=1,2\n    other2: webrtc://127.0.0.1/live/livestream?layer=1,2&foo=bar","source":"_posts/simulcast-support-in-srs.md","raw":"---\ntitle: simulcast support in srs\ndate: 2021-06-18 18:50:41\ntags: webrtc\n---\n\n最近弄明白了 Simulcast, 就给 SRS 加了 Simulcast 功能支持, 不过是 Chrome 独有的 SDP munging 风格的 Simulcast, 以后了解清楚了标准的 Simulcast 格式再完善一下.\n\nPR 详见 https://github.com/ossrs/srs/pull/2420\n\n\n## 发布端\n\n使用  `numberOfSimulcastLayers` 标示 Simulcast 层级数, 可选的有效值为 1,2,3; 其中1为默认值, 此外的其他值为无效值, 若误用会重置为默认1.\n\n`numberOfSimulcastLayers = 1` 相当于 `Simulcast 流` 退化为 `单流`\n\n    webrtc://127.0.0.1/live/livestream?numberOfSimulcastLayers=1  (相当于单流)\n    webrtc://127.0.0.1/live/livestream?numberOfSimulcastLayers=2  (2 层 Simulcast 流)\n    webrtc://127.0.0.1/live/livestream?numberOfSimulcastLayers=3  (3 层 Simulcast 流)\n\n## 播放端\n\n播放端使用 `layer` 选择哪一层视频流,可选的有效值为 0,1,2,3,...\n如果 `layer` 对应的视频流无法播放,则退化为一般场景的播放端.\n\n    low: webrtc://127.0.0.1/live/livestream?layer=0\n    mid: webrtc://127.0.0.1/live/livestream?layer=1\n    high: webrtc://127.0.0.1/live/livestream?layer=2\n    other1: webrtc://127.0.0.1/live/livestream?layer=1,2\n    other2: webrtc://127.0.0.1/live/livestream?layer=1,2&foo=bar","slug":"simulcast-support-in-srs","published":1,"updated":"2021-06-18T11:18:13.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhkhszt001euavq1kolbffz","content":"<p>最近弄明白了 Simulcast, 就给 SRS 加了 Simulcast 功能支持, 不过是 Chrome 独有的 SDP munging 风格的 Simulcast, 以后了解清楚了标准的 Simulcast 格式再完善一下.</p>\n<p>PR 详见 <a href=\"https://github.com/ossrs/srs/pull/2420\">https://github.com/ossrs/srs/pull/2420</a></p>\n<h2 id=\"发布端\"><a href=\"#发布端\" class=\"headerlink\" title=\"发布端\"></a>发布端</h2><p>使用  <code>numberOfSimulcastLayers</code> 标示 Simulcast 层级数, 可选的有效值为 1,2,3; 其中1为默认值, 此外的其他值为无效值, 若误用会重置为默认1.</p>\n<p><code>numberOfSimulcastLayers = 1</code> 相当于 <code>Simulcast 流</code> 退化为 <code>单流</code></p>\n<pre><code>webrtc://127.0.0.1/live/livestream?numberOfSimulcastLayers=1  (相当于单流)\nwebrtc://127.0.0.1/live/livestream?numberOfSimulcastLayers=2  (2 层 Simulcast 流)\nwebrtc://127.0.0.1/live/livestream?numberOfSimulcastLayers=3  (3 层 Simulcast 流)\n</code></pre><h2 id=\"播放端\"><a href=\"#播放端\" class=\"headerlink\" title=\"播放端\"></a>播放端</h2><p>播放端使用 <code>layer</code> 选择哪一层视频流,可选的有效值为 0,1,2,3,…<br>如果 <code>layer</code> 对应的视频流无法播放,则退化为一般场景的播放端.</p>\n<pre><code>low: webrtc://127.0.0.1/live/livestream?layer=0\nmid: webrtc://127.0.0.1/live/livestream?layer=1\nhigh: webrtc://127.0.0.1/live/livestream?layer=2\nother1: webrtc://127.0.0.1/live/livestream?layer=1,2\nother2: webrtc://127.0.0.1/live/livestream?layer=1,2&amp;foo=bar\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>最近弄明白了 Simulcast, 就给 SRS 加了 Simulcast 功能支持, 不过是 Chrome 独有的 SDP munging 风格的 Simulcast, 以后了解清楚了标准的 Simulcast 格式再完善一下.</p>\n<p>PR 详见 <a href=\"https://github.com/ossrs/srs/pull/2420\">https://github.com/ossrs/srs/pull/2420</a></p>\n<h2 id=\"发布端\"><a href=\"#发布端\" class=\"headerlink\" title=\"发布端\"></a>发布端</h2><p>使用  <code>numberOfSimulcastLayers</code> 标示 Simulcast 层级数, 可选的有效值为 1,2,3; 其中1为默认值, 此外的其他值为无效值, 若误用会重置为默认1.</p>\n<p><code>numberOfSimulcastLayers = 1</code> 相当于 <code>Simulcast 流</code> 退化为 <code>单流</code></p>\n<pre><code>webrtc://127.0.0.1/live/livestream?numberOfSimulcastLayers=1  (相当于单流)\nwebrtc://127.0.0.1/live/livestream?numberOfSimulcastLayers=2  (2 层 Simulcast 流)\nwebrtc://127.0.0.1/live/livestream?numberOfSimulcastLayers=3  (3 层 Simulcast 流)\n</code></pre><h2 id=\"播放端\"><a href=\"#播放端\" class=\"headerlink\" title=\"播放端\"></a>播放端</h2><p>播放端使用 <code>layer</code> 选择哪一层视频流,可选的有效值为 0,1,2,3,…<br>如果 <code>layer</code> 对应的视频流无法播放,则退化为一般场景的播放端.</p>\n<pre><code>low: webrtc://127.0.0.1/live/livestream?layer=0\nmid: webrtc://127.0.0.1/live/livestream?layer=1\nhigh: webrtc://127.0.0.1/live/livestream?layer=2\nother1: webrtc://127.0.0.1/live/livestream?layer=1,2\nother2: webrtc://127.0.0.1/live/livestream?layer=1,2&amp;foo=bar\n</code></pre>"},{"title":"Simulcast","date":"2021-06-16T09:26:05.000Z","_content":"\nSimulcast, 效果演示可以参考这个项目 [simulcast-playground][simulcast-playground]\n\n### H264EncoderImpl 实现\n\n就 H264 而言, H264EncoderImpl 实现了Simulcast 功能, 为了使用 H264EncoderImpl, 需要webrtc编译ffmpeg和openh264, 代码可以参考 https://github.com/johzzy/webrtc-mirror/tree/feature/h264\n\n```\n// modules/video_coding/codecs/h264/h264_encoder_impl.cc\nint32_t H264EncoderImpl::InitEncode(const VideoCodec* inst,\n                                    const VideoEncoder::Settings& settings) {\n    ...\n    for (int i = 0, idx = number_of_streams - 1; i < number_of_streams;\n       ++i, --idx) {\n    ISVCEncoder* openh264_encoder;\n    // Create encoder.\n    if (WelsCreateSVCEncoder(&openh264_encoder) != 0) {\n      // Failed to create encoder.\n      RTC_LOG(LS_ERROR) << \"Failed to create OpenH264 encoder\";\n      RTC_DCHECK(!openh264_encoder);\n      Release();\n      ReportError();\n      return WEBRTC_VIDEO_CODEC_ERROR;\n    }\n    RTC_DCHECK(openh264_encoder);\n    if (kOpenH264EncoderDetailedLogging) {\n      int trace_level = WELS_LOG_DETAIL;\n      openh264_encoder->SetOption(ENCODER_OPTION_TRACE_LEVEL, &trace_level);\n    }\n    // else WELS_LOG_DEFAULT is used by default.\n\n    // Store h264 encoder.\n    encoders_[i] = openh264_encoder;\n        ...\n```\n\n从 `H264EncoderImpl::InitEncode` 函数可以看到, 真正负责编码工作的对象是 `ISVCEncoder* openh264_encoder;`, `Simulcast` 和 `SVC` 都可以由它完成.\n\n在 `Android/iOS` 等移动端, `H264EncoderImpl` 实现的 `Simulcast` 因 `OpenH264` 软件编码的缘故, 往往有CPU算力和电池续航方面的不足. \n\n另外, `WebRTC iOS`编译 `FFmpeg` 和 `OpenH264` 依然是一个巨坑. 那么有没有利用硬件编码实现的Simulcast呢.\n\n### SimulcastEncoderAdapter 实现\n\n`SimulcastEncoderAdapter` 代码详见 `media/engine/simulcast_encoder_adapter.cc`, 它本身是一个通用的适配器, 给SimulcastEncoderAdapter 传入相应的编码器工厂，就可以组成一个simulcast的编码器, \n\n```\nSimulcastEncoderAdapter::SimulcastEncoderAdapter(VideoEncoderFactory* factory,\n                                                 const SdpVideoFormat& format)\n    : SimulcastEncoderAdapter(factory, nullptr, format) {}\n```\n\n\n具体来说, 在 `Android` 平台,可以给 `SimulcastEncoderAdapter` 传入 `mediacodec` 的 `h264` 编码器开启硬编,在 `iOS` 平台则可以传入 `videotoolbox`. 当然,你可以 SimulcastEncoderAdapter 做到不同层级的视频使用不同的编码器, 混合使用.\n\n在 chrome 中 h264 的 simulcast 就是这样实现的，在 `chrome://webrtc-internals` 如果看到这样的字符串,就是 `SimulcastEncoderAdapter` 实现的\n\n```\nencoderImplementation SimulcastEncoderAdapter (OpenH264, ExternalEncoder, ExternalEncoder)\n```\n\nandroid 平台利用 SimulcastEncoderAdapter 开启 simulcast 的一种实例\n\n```\n// SimulcastEncoderAdapter::GetEncoderInfo().implementation_name 输出\n// 其中 OpenH264 编码小流, HWEncoder 编码大流\nSimulcastEncoderAdapter (OpenH264, HWEncoder)\n```\n\n\n\n### 如何使用 SimulcastEncoderAdapter\n\n可以参考 chromium blink 的使用方式,具体代码见 `third_party/blink/renderer/platform/peerconnection/video_codec_factory.cc`\n\n#### 创建相应工厂\n仿照 blink 创建 EncoderAdapter 和 CreateVideoEncoderAdapterFactory\n```\n\n// @see \ntemplate <typename Factory>\nbool IsFormatSupported(const Factory* factory,\n                       const webrtc::SdpVideoFormat& format) {\n  return factory && IsFormatSupported(factory->GetSupportedFormats(), format);\n}\n\n// Merge |formats1| and |formats2|, but avoid adding duplicate formats.\nstd::vector<webrtc::SdpVideoFormat> MergeFormats(\n    std::vector<webrtc::SdpVideoFormat> formats1,\n    const std::vector<webrtc::SdpVideoFormat>& formats2) {\n  for (const webrtc::SdpVideoFormat& format : formats2) {\n    // Don't add same format twice.\n    if (!IsFormatSupported(formats1, format))\n      formats1.push_back(format);\n  }\n  return formats1;\n}\n\n// This class combines a hardware factory with the internal factory and adds\n// internal SW codecs, simulcast, and SW fallback wrappers.\nclass EncoderAdapter : public webrtc::VideoEncoderFactory {\n public:\n  explicit EncoderAdapter(\n      std::unique_ptr<webrtc::VideoEncoderFactory> hardware_encoder_factory)\n      : hardware_encoder_factory_(std::move(hardware_encoder_factory)) {}\n\n  webrtc::VideoEncoderFactory::CodecInfo QueryVideoEncoder(\n      const webrtc::SdpVideoFormat& format) const override {\n    const webrtc::VideoEncoderFactory* factory =\n        IsFormatSupported(hardware_encoder_factory_.get(), format)\n            ? hardware_encoder_factory_.get()\n            : &software_encoder_factory_;\n    return factory->QueryVideoEncoder(format);\n  }\n\n  std::unique_ptr<webrtc::VideoEncoder> CreateVideoEncoder(\n      const webrtc::SdpVideoFormat& format) override {\n    const bool supported_in_software =\n        IsFormatSupported(&software_encoder_factory_, format);\n    const bool supported_in_hardware =\n        IsFormatSupported(hardware_encoder_factory_.get(), format);\n\n    if (!supported_in_software && !supported_in_hardware)\n      return nullptr;\n\n    if (absl::EqualsIgnoreCase(format.name.c_str(),\n                                         cricket::kVp9CodecName) ||\n        absl::EqualsIgnoreCase(format.name.c_str(),\n                                         cricket::kAv1CodecName)) {\n      // For VP9 and AV1 we don't use simulcast.\n      // return software_encoder_factory_.CreateVideoEncoder(format);\n      return hardware_encoder_factory_->CreateVideoEncoder(format);\n    }\n\n    if (!supported_in_hardware || !hardware_encoder_factory_.get()) {\n      return std::make_unique<webrtc::SimulcastEncoderAdapter>(\n          &software_encoder_factory_, nullptr, format);\n    } else if (!supported_in_software) {\n      return std::make_unique<webrtc::SimulcastEncoderAdapter>(\n          hardware_encoder_factory_.get(), nullptr, format);\n    }\n\n    return std::make_unique<webrtc::SimulcastEncoderAdapter>(\n        hardware_encoder_factory_.get(), &software_encoder_factory_, format);\n  }\n\n  std::vector<webrtc::SdpVideoFormat> GetSupportedFormats() const override {\n    std::vector<webrtc::SdpVideoFormat> software_formats =\n        software_encoder_factory_.GetSupportedFormats();\n    return hardware_encoder_factory_\n               ? MergeFormats(software_formats,\n                              hardware_encoder_factory_->GetSupportedFormats())\n               : software_formats;\n  }\n\n private:\n  webrtc::InternalEncoderFactory software_encoder_factory_;\n  const std::unique_ptr<webrtc::VideoEncoderFactory> hardware_encoder_factory_;\n};\n\nstd::unique_ptr<VideoEncoderFactory> CreateVideoEncoderAdapterFactory(\n  std::unique_ptr<webrtc::VideoEncoderFactory> hardware_encoder_factory) {\n  return std::make_unique<EncoderAdapter>(std::move(hardware_encoder_factory));\n}\n```\n\n#### 使用工厂\n\n```\n//  ios 使用\n        auto video_encoder_factory = std::move(native_encoder_factory);\n        return [self initWithNativeAudioEncoderFactory:webrtc::CreateBuiltinAudioEncoderFactory()\n                             nativeAudioDecoderFactory:webrtc::CreateBuiltinAudioDecoderFactory()\n                             nativeVideoEncoderFactory:webrtc::CreateVideoEncoderAdapterFactory(std::move(video_encoder_factory))\n                             nativeVideoDecoderFactory:webrtc::CreateBuiltinVideoDecoderFactory()\n                                     audioDeviceModule:[self audioDeviceModule]\n                                 audioProcessingModule:nullptr];\n// android 使用\n  cricket::MediaEngineDependencies media_dependencies;\n  media_dependencies.task_queue_factory = dependencies.task_queue_factory.get();\n  media_dependencies.adm = std::move(audio_device_module);\n  media_dependencies.audio_encoder_factory = std::move(audio_encoder_factory);\n  media_dependencies.audio_decoder_factory = std::move(audio_decoder_factory);\n  media_dependencies.audio_processing = std::move(audio_processor);\n  auto video_encoder_factory =\n      absl::WrapUnique(CreateVideoEncoderFactory(jni, jencoder_factory));\n  media_dependencies.video_encoder_factory = \n        CreateVideoEncoderAdapterFactory(std::move(video_encoder_factory));\n  media_dependencies.video_decoder_factory =\n      absl::WrapUnique(CreateVideoDecoderFactory(jni, jdecoder_factory));\n  dependencies.media_engine =\n      cricket::CreateMediaEngine(std::move(media_dependencies));\n\n  rtc::scoped_refptr<PeerConnectionFactoryInterface> factory =\n      CreateModularPeerConnectionFactory(std::move(dependencies));\n```\n\n\n\n\n\n参考: https://blog.jianchihu.net/webrtc-research-simulcast-layer-change.html\n\n\n[simulcast-playground]: https://fippo.github.io/simulcast-playground/\n","source":"_posts/simulcast.md","raw":"---\ntitle: Simulcast\ndate: 2021-06-16 17:26:05\ntags: webrtc\n---\n\nSimulcast, 效果演示可以参考这个项目 [simulcast-playground][simulcast-playground]\n\n### H264EncoderImpl 实现\n\n就 H264 而言, H264EncoderImpl 实现了Simulcast 功能, 为了使用 H264EncoderImpl, 需要webrtc编译ffmpeg和openh264, 代码可以参考 https://github.com/johzzy/webrtc-mirror/tree/feature/h264\n\n```\n// modules/video_coding/codecs/h264/h264_encoder_impl.cc\nint32_t H264EncoderImpl::InitEncode(const VideoCodec* inst,\n                                    const VideoEncoder::Settings& settings) {\n    ...\n    for (int i = 0, idx = number_of_streams - 1; i < number_of_streams;\n       ++i, --idx) {\n    ISVCEncoder* openh264_encoder;\n    // Create encoder.\n    if (WelsCreateSVCEncoder(&openh264_encoder) != 0) {\n      // Failed to create encoder.\n      RTC_LOG(LS_ERROR) << \"Failed to create OpenH264 encoder\";\n      RTC_DCHECK(!openh264_encoder);\n      Release();\n      ReportError();\n      return WEBRTC_VIDEO_CODEC_ERROR;\n    }\n    RTC_DCHECK(openh264_encoder);\n    if (kOpenH264EncoderDetailedLogging) {\n      int trace_level = WELS_LOG_DETAIL;\n      openh264_encoder->SetOption(ENCODER_OPTION_TRACE_LEVEL, &trace_level);\n    }\n    // else WELS_LOG_DEFAULT is used by default.\n\n    // Store h264 encoder.\n    encoders_[i] = openh264_encoder;\n        ...\n```\n\n从 `H264EncoderImpl::InitEncode` 函数可以看到, 真正负责编码工作的对象是 `ISVCEncoder* openh264_encoder;`, `Simulcast` 和 `SVC` 都可以由它完成.\n\n在 `Android/iOS` 等移动端, `H264EncoderImpl` 实现的 `Simulcast` 因 `OpenH264` 软件编码的缘故, 往往有CPU算力和电池续航方面的不足. \n\n另外, `WebRTC iOS`编译 `FFmpeg` 和 `OpenH264` 依然是一个巨坑. 那么有没有利用硬件编码实现的Simulcast呢.\n\n### SimulcastEncoderAdapter 实现\n\n`SimulcastEncoderAdapter` 代码详见 `media/engine/simulcast_encoder_adapter.cc`, 它本身是一个通用的适配器, 给SimulcastEncoderAdapter 传入相应的编码器工厂，就可以组成一个simulcast的编码器, \n\n```\nSimulcastEncoderAdapter::SimulcastEncoderAdapter(VideoEncoderFactory* factory,\n                                                 const SdpVideoFormat& format)\n    : SimulcastEncoderAdapter(factory, nullptr, format) {}\n```\n\n\n具体来说, 在 `Android` 平台,可以给 `SimulcastEncoderAdapter` 传入 `mediacodec` 的 `h264` 编码器开启硬编,在 `iOS` 平台则可以传入 `videotoolbox`. 当然,你可以 SimulcastEncoderAdapter 做到不同层级的视频使用不同的编码器, 混合使用.\n\n在 chrome 中 h264 的 simulcast 就是这样实现的，在 `chrome://webrtc-internals` 如果看到这样的字符串,就是 `SimulcastEncoderAdapter` 实现的\n\n```\nencoderImplementation SimulcastEncoderAdapter (OpenH264, ExternalEncoder, ExternalEncoder)\n```\n\nandroid 平台利用 SimulcastEncoderAdapter 开启 simulcast 的一种实例\n\n```\n// SimulcastEncoderAdapter::GetEncoderInfo().implementation_name 输出\n// 其中 OpenH264 编码小流, HWEncoder 编码大流\nSimulcastEncoderAdapter (OpenH264, HWEncoder)\n```\n\n\n\n### 如何使用 SimulcastEncoderAdapter\n\n可以参考 chromium blink 的使用方式,具体代码见 `third_party/blink/renderer/platform/peerconnection/video_codec_factory.cc`\n\n#### 创建相应工厂\n仿照 blink 创建 EncoderAdapter 和 CreateVideoEncoderAdapterFactory\n```\n\n// @see \ntemplate <typename Factory>\nbool IsFormatSupported(const Factory* factory,\n                       const webrtc::SdpVideoFormat& format) {\n  return factory && IsFormatSupported(factory->GetSupportedFormats(), format);\n}\n\n// Merge |formats1| and |formats2|, but avoid adding duplicate formats.\nstd::vector<webrtc::SdpVideoFormat> MergeFormats(\n    std::vector<webrtc::SdpVideoFormat> formats1,\n    const std::vector<webrtc::SdpVideoFormat>& formats2) {\n  for (const webrtc::SdpVideoFormat& format : formats2) {\n    // Don't add same format twice.\n    if (!IsFormatSupported(formats1, format))\n      formats1.push_back(format);\n  }\n  return formats1;\n}\n\n// This class combines a hardware factory with the internal factory and adds\n// internal SW codecs, simulcast, and SW fallback wrappers.\nclass EncoderAdapter : public webrtc::VideoEncoderFactory {\n public:\n  explicit EncoderAdapter(\n      std::unique_ptr<webrtc::VideoEncoderFactory> hardware_encoder_factory)\n      : hardware_encoder_factory_(std::move(hardware_encoder_factory)) {}\n\n  webrtc::VideoEncoderFactory::CodecInfo QueryVideoEncoder(\n      const webrtc::SdpVideoFormat& format) const override {\n    const webrtc::VideoEncoderFactory* factory =\n        IsFormatSupported(hardware_encoder_factory_.get(), format)\n            ? hardware_encoder_factory_.get()\n            : &software_encoder_factory_;\n    return factory->QueryVideoEncoder(format);\n  }\n\n  std::unique_ptr<webrtc::VideoEncoder> CreateVideoEncoder(\n      const webrtc::SdpVideoFormat& format) override {\n    const bool supported_in_software =\n        IsFormatSupported(&software_encoder_factory_, format);\n    const bool supported_in_hardware =\n        IsFormatSupported(hardware_encoder_factory_.get(), format);\n\n    if (!supported_in_software && !supported_in_hardware)\n      return nullptr;\n\n    if (absl::EqualsIgnoreCase(format.name.c_str(),\n                                         cricket::kVp9CodecName) ||\n        absl::EqualsIgnoreCase(format.name.c_str(),\n                                         cricket::kAv1CodecName)) {\n      // For VP9 and AV1 we don't use simulcast.\n      // return software_encoder_factory_.CreateVideoEncoder(format);\n      return hardware_encoder_factory_->CreateVideoEncoder(format);\n    }\n\n    if (!supported_in_hardware || !hardware_encoder_factory_.get()) {\n      return std::make_unique<webrtc::SimulcastEncoderAdapter>(\n          &software_encoder_factory_, nullptr, format);\n    } else if (!supported_in_software) {\n      return std::make_unique<webrtc::SimulcastEncoderAdapter>(\n          hardware_encoder_factory_.get(), nullptr, format);\n    }\n\n    return std::make_unique<webrtc::SimulcastEncoderAdapter>(\n        hardware_encoder_factory_.get(), &software_encoder_factory_, format);\n  }\n\n  std::vector<webrtc::SdpVideoFormat> GetSupportedFormats() const override {\n    std::vector<webrtc::SdpVideoFormat> software_formats =\n        software_encoder_factory_.GetSupportedFormats();\n    return hardware_encoder_factory_\n               ? MergeFormats(software_formats,\n                              hardware_encoder_factory_->GetSupportedFormats())\n               : software_formats;\n  }\n\n private:\n  webrtc::InternalEncoderFactory software_encoder_factory_;\n  const std::unique_ptr<webrtc::VideoEncoderFactory> hardware_encoder_factory_;\n};\n\nstd::unique_ptr<VideoEncoderFactory> CreateVideoEncoderAdapterFactory(\n  std::unique_ptr<webrtc::VideoEncoderFactory> hardware_encoder_factory) {\n  return std::make_unique<EncoderAdapter>(std::move(hardware_encoder_factory));\n}\n```\n\n#### 使用工厂\n\n```\n//  ios 使用\n        auto video_encoder_factory = std::move(native_encoder_factory);\n        return [self initWithNativeAudioEncoderFactory:webrtc::CreateBuiltinAudioEncoderFactory()\n                             nativeAudioDecoderFactory:webrtc::CreateBuiltinAudioDecoderFactory()\n                             nativeVideoEncoderFactory:webrtc::CreateVideoEncoderAdapterFactory(std::move(video_encoder_factory))\n                             nativeVideoDecoderFactory:webrtc::CreateBuiltinVideoDecoderFactory()\n                                     audioDeviceModule:[self audioDeviceModule]\n                                 audioProcessingModule:nullptr];\n// android 使用\n  cricket::MediaEngineDependencies media_dependencies;\n  media_dependencies.task_queue_factory = dependencies.task_queue_factory.get();\n  media_dependencies.adm = std::move(audio_device_module);\n  media_dependencies.audio_encoder_factory = std::move(audio_encoder_factory);\n  media_dependencies.audio_decoder_factory = std::move(audio_decoder_factory);\n  media_dependencies.audio_processing = std::move(audio_processor);\n  auto video_encoder_factory =\n      absl::WrapUnique(CreateVideoEncoderFactory(jni, jencoder_factory));\n  media_dependencies.video_encoder_factory = \n        CreateVideoEncoderAdapterFactory(std::move(video_encoder_factory));\n  media_dependencies.video_decoder_factory =\n      absl::WrapUnique(CreateVideoDecoderFactory(jni, jdecoder_factory));\n  dependencies.media_engine =\n      cricket::CreateMediaEngine(std::move(media_dependencies));\n\n  rtc::scoped_refptr<PeerConnectionFactoryInterface> factory =\n      CreateModularPeerConnectionFactory(std::move(dependencies));\n```\n\n\n\n\n\n参考: https://blog.jianchihu.net/webrtc-research-simulcast-layer-change.html\n\n\n[simulcast-playground]: https://fippo.github.io/simulcast-playground/\n","slug":"simulcast","published":1,"updated":"2021-06-18T11:17:23.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhkhszv001iuavqhaqleb7d","content":"<p>Simulcast, 效果演示可以参考这个项目 <a href=\"https://fippo.github.io/simulcast-playground/\">simulcast-playground</a></p>\n<h3 id=\"H264EncoderImpl-实现\"><a href=\"#H264EncoderImpl-实现\" class=\"headerlink\" title=\"H264EncoderImpl 实现\"></a>H264EncoderImpl 实现</h3><p>就 H264 而言, H264EncoderImpl 实现了Simulcast 功能, 为了使用 H264EncoderImpl, 需要webrtc编译ffmpeg和openh264, 代码可以参考 <a href=\"https://github.com/johzzy/webrtc-mirror/tree/feature/h264\">https://github.com/johzzy/webrtc-mirror/tree/feature/h264</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// modules/video_coding/codecs/h264/h264_encoder_impl.cc</span><br><span class=\"line\">int32_t H264EncoderImpl::InitEncode(const VideoCodec* inst,</span><br><span class=\"line\">                                    const VideoEncoder::Settings&amp; settings) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    for (int i = 0, idx = number_of_streams - 1; i &lt; number_of_streams;</span><br><span class=\"line\">       ++i, --idx) &#123;</span><br><span class=\"line\">    ISVCEncoder* openh264_encoder;</span><br><span class=\"line\">    // Create encoder.</span><br><span class=\"line\">    if (WelsCreateSVCEncoder(&amp;openh264_encoder) != 0) &#123;</span><br><span class=\"line\">      // Failed to create encoder.</span><br><span class=\"line\">      RTC_LOG(LS_ERROR) &lt;&lt; &quot;Failed to create OpenH264 encoder&quot;;</span><br><span class=\"line\">      RTC_DCHECK(!openh264_encoder);</span><br><span class=\"line\">      Release();</span><br><span class=\"line\">      ReportError();</span><br><span class=\"line\">      return WEBRTC_VIDEO_CODEC_ERROR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    RTC_DCHECK(openh264_encoder);</span><br><span class=\"line\">    if (kOpenH264EncoderDetailedLogging) &#123;</span><br><span class=\"line\">      int trace_level = WELS_LOG_DETAIL;</span><br><span class=\"line\">      openh264_encoder-&gt;SetOption(ENCODER_OPTION_TRACE_LEVEL, &amp;trace_level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // else WELS_LOG_DEFAULT is used by default.</span><br><span class=\"line\"></span><br><span class=\"line\">    // Store h264 encoder.</span><br><span class=\"line\">    encoders_[i] = openh264_encoder;</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<p>从 <code>H264EncoderImpl::InitEncode</code> 函数可以看到, 真正负责编码工作的对象是 <code>ISVCEncoder* openh264_encoder;</code>, <code>Simulcast</code> 和 <code>SVC</code> 都可以由它完成.</p>\n<p>在 <code>Android/iOS</code> 等移动端, <code>H264EncoderImpl</code> 实现的 <code>Simulcast</code> 因 <code>OpenH264</code> 软件编码的缘故, 往往有CPU算力和电池续航方面的不足. </p>\n<p>另外, <code>WebRTC iOS</code>编译 <code>FFmpeg</code> 和 <code>OpenH264</code> 依然是一个巨坑. 那么有没有利用硬件编码实现的Simulcast呢.</p>\n<h3 id=\"SimulcastEncoderAdapter-实现\"><a href=\"#SimulcastEncoderAdapter-实现\" class=\"headerlink\" title=\"SimulcastEncoderAdapter 实现\"></a>SimulcastEncoderAdapter 实现</h3><p><code>SimulcastEncoderAdapter</code> 代码详见 <code>media/engine/simulcast_encoder_adapter.cc</code>, 它本身是一个通用的适配器, 给SimulcastEncoderAdapter 传入相应的编码器工厂，就可以组成一个simulcast的编码器, </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SimulcastEncoderAdapter::SimulcastEncoderAdapter(VideoEncoderFactory* factory,</span><br><span class=\"line\">                                                 const SdpVideoFormat&amp; format)</span><br><span class=\"line\">    : SimulcastEncoderAdapter(factory, nullptr, format) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>具体来说, 在 <code>Android</code> 平台,可以给 <code>SimulcastEncoderAdapter</code> 传入 <code>mediacodec</code> 的 <code>h264</code> 编码器开启硬编,在 <code>iOS</code> 平台则可以传入 <code>videotoolbox</code>. 当然,你可以 SimulcastEncoderAdapter 做到不同层级的视频使用不同的编码器, 混合使用.</p>\n<p>在 chrome 中 h264 的 simulcast 就是这样实现的，在 <code>chrome://webrtc-internals</code> 如果看到这样的字符串,就是 <code>SimulcastEncoderAdapter</code> 实现的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">encoderImplementation SimulcastEncoderAdapter (OpenH264, ExternalEncoder, ExternalEncoder)</span><br></pre></td></tr></table></figure>\n<p>android 平台利用 SimulcastEncoderAdapter 开启 simulcast 的一种实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// SimulcastEncoderAdapter::GetEncoderInfo().implementation_name 输出</span><br><span class=\"line\">// 其中 OpenH264 编码小流, HWEncoder 编码大流</span><br><span class=\"line\">SimulcastEncoderAdapter (OpenH264, HWEncoder)</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何使用-SimulcastEncoderAdapter\"><a href=\"#如何使用-SimulcastEncoderAdapter\" class=\"headerlink\" title=\"如何使用 SimulcastEncoderAdapter\"></a>如何使用 SimulcastEncoderAdapter</h3><p>可以参考 chromium blink 的使用方式,具体代码见 <code>third_party/blink/renderer/platform/peerconnection/video_codec_factory.cc</code></p>\n<h4 id=\"创建相应工厂\"><a href=\"#创建相应工厂\" class=\"headerlink\" title=\"创建相应工厂\"></a>创建相应工厂</h4><p>仿照 blink 创建 EncoderAdapter 和 CreateVideoEncoderAdapterFactory<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// @see </span><br><span class=\"line\">template &lt;typename Factory&gt;</span><br><span class=\"line\">bool IsFormatSupported(const Factory* factory,</span><br><span class=\"line\">                       const webrtc::SdpVideoFormat&amp; format) &#123;</span><br><span class=\"line\">  return factory &amp;&amp; IsFormatSupported(factory-&gt;GetSupportedFormats(), format);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Merge |formats1| and |formats2|, but avoid adding duplicate formats.</span><br><span class=\"line\">std::vector&lt;webrtc::SdpVideoFormat&gt; MergeFormats(</span><br><span class=\"line\">    std::vector&lt;webrtc::SdpVideoFormat&gt; formats1,</span><br><span class=\"line\">    const std::vector&lt;webrtc::SdpVideoFormat&gt;&amp; formats2) &#123;</span><br><span class=\"line\">  for (const webrtc::SdpVideoFormat&amp; format : formats2) &#123;</span><br><span class=\"line\">    // Don&#x27;t add same format twice.</span><br><span class=\"line\">    if (!IsFormatSupported(formats1, format))</span><br><span class=\"line\">      formats1.push_back(format);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return formats1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// This class combines a hardware factory with the internal factory and adds</span><br><span class=\"line\">// internal SW codecs, simulcast, and SW fallback wrappers.</span><br><span class=\"line\">class EncoderAdapter : public webrtc::VideoEncoderFactory &#123;</span><br><span class=\"line\"> public:</span><br><span class=\"line\">  explicit EncoderAdapter(</span><br><span class=\"line\">      std::unique_ptr&lt;webrtc::VideoEncoderFactory&gt; hardware_encoder_factory)</span><br><span class=\"line\">      : hardware_encoder_factory_(std::move(hardware_encoder_factory)) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  webrtc::VideoEncoderFactory::CodecInfo QueryVideoEncoder(</span><br><span class=\"line\">      const webrtc::SdpVideoFormat&amp; format) const override &#123;</span><br><span class=\"line\">    const webrtc::VideoEncoderFactory* factory =</span><br><span class=\"line\">        IsFormatSupported(hardware_encoder_factory_.get(), format)</span><br><span class=\"line\">            ? hardware_encoder_factory_.get()</span><br><span class=\"line\">            : &amp;software_encoder_factory_;</span><br><span class=\"line\">    return factory-&gt;QueryVideoEncoder(format);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::unique_ptr&lt;webrtc::VideoEncoder&gt; CreateVideoEncoder(</span><br><span class=\"line\">      const webrtc::SdpVideoFormat&amp; format) override &#123;</span><br><span class=\"line\">    const bool supported_in_software =</span><br><span class=\"line\">        IsFormatSupported(&amp;software_encoder_factory_, format);</span><br><span class=\"line\">    const bool supported_in_hardware =</span><br><span class=\"line\">        IsFormatSupported(hardware_encoder_factory_.get(), format);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!supported_in_software &amp;&amp; !supported_in_hardware)</span><br><span class=\"line\">      return nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (absl::EqualsIgnoreCase(format.name.c_str(),</span><br><span class=\"line\">                                         cricket::kVp9CodecName) ||</span><br><span class=\"line\">        absl::EqualsIgnoreCase(format.name.c_str(),</span><br><span class=\"line\">                                         cricket::kAv1CodecName)) &#123;</span><br><span class=\"line\">      // For VP9 and AV1 we don&#x27;t use simulcast.</span><br><span class=\"line\">      // return software_encoder_factory_.CreateVideoEncoder(format);</span><br><span class=\"line\">      return hardware_encoder_factory_-&gt;CreateVideoEncoder(format);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!supported_in_hardware || !hardware_encoder_factory_.get()) &#123;</span><br><span class=\"line\">      return std::make_unique&lt;webrtc::SimulcastEncoderAdapter&gt;(</span><br><span class=\"line\">          &amp;software_encoder_factory_, nullptr, format);</span><br><span class=\"line\">    &#125; else if (!supported_in_software) &#123;</span><br><span class=\"line\">      return std::make_unique&lt;webrtc::SimulcastEncoderAdapter&gt;(</span><br><span class=\"line\">          hardware_encoder_factory_.get(), nullptr, format);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return std::make_unique&lt;webrtc::SimulcastEncoderAdapter&gt;(</span><br><span class=\"line\">        hardware_encoder_factory_.get(), &amp;software_encoder_factory_, format);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::vector&lt;webrtc::SdpVideoFormat&gt; GetSupportedFormats() const override &#123;</span><br><span class=\"line\">    std::vector&lt;webrtc::SdpVideoFormat&gt; software_formats =</span><br><span class=\"line\">        software_encoder_factory_.GetSupportedFormats();</span><br><span class=\"line\">    return hardware_encoder_factory_</span><br><span class=\"line\">               ? MergeFormats(software_formats,</span><br><span class=\"line\">                              hardware_encoder_factory_-&gt;GetSupportedFormats())</span><br><span class=\"line\">               : software_formats;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> private:</span><br><span class=\"line\">  webrtc::InternalEncoderFactory software_encoder_factory_;</span><br><span class=\"line\">  const std::unique_ptr&lt;webrtc::VideoEncoderFactory&gt; hardware_encoder_factory_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">std::unique_ptr&lt;VideoEncoderFactory&gt; CreateVideoEncoderAdapterFactory(</span><br><span class=\"line\">  std::unique_ptr&lt;webrtc::VideoEncoderFactory&gt; hardware_encoder_factory) &#123;</span><br><span class=\"line\">  return std::make_unique&lt;EncoderAdapter&gt;(std::move(hardware_encoder_factory));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用工厂\"><a href=\"#使用工厂\" class=\"headerlink\" title=\"使用工厂\"></a>使用工厂</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  ios 使用</span><br><span class=\"line\">        auto video_encoder_factory = std::move(native_encoder_factory);</span><br><span class=\"line\">        return [self initWithNativeAudioEncoderFactory:webrtc::CreateBuiltinAudioEncoderFactory()</span><br><span class=\"line\">                             nativeAudioDecoderFactory:webrtc::CreateBuiltinAudioDecoderFactory()</span><br><span class=\"line\">                             nativeVideoEncoderFactory:webrtc::CreateVideoEncoderAdapterFactory(std::move(video_encoder_factory))</span><br><span class=\"line\">                             nativeVideoDecoderFactory:webrtc::CreateBuiltinVideoDecoderFactory()</span><br><span class=\"line\">                                     audioDeviceModule:[self audioDeviceModule]</span><br><span class=\"line\">                                 audioProcessingModule:nullptr];</span><br><span class=\"line\">// android 使用</span><br><span class=\"line\">  cricket::MediaEngineDependencies media_dependencies;</span><br><span class=\"line\">  media_dependencies.task_queue_factory = dependencies.task_queue_factory.get();</span><br><span class=\"line\">  media_dependencies.adm = std::move(audio_device_module);</span><br><span class=\"line\">  media_dependencies.audio_encoder_factory = std::move(audio_encoder_factory);</span><br><span class=\"line\">  media_dependencies.audio_decoder_factory = std::move(audio_decoder_factory);</span><br><span class=\"line\">  media_dependencies.audio_processing = std::move(audio_processor);</span><br><span class=\"line\">  auto video_encoder_factory =</span><br><span class=\"line\">      absl::WrapUnique(CreateVideoEncoderFactory(jni, jencoder_factory));</span><br><span class=\"line\">  media_dependencies.video_encoder_factory = </span><br><span class=\"line\">        CreateVideoEncoderAdapterFactory(std::move(video_encoder_factory));</span><br><span class=\"line\">  media_dependencies.video_decoder_factory =</span><br><span class=\"line\">      absl::WrapUnique(CreateVideoDecoderFactory(jni, jdecoder_factory));</span><br><span class=\"line\">  dependencies.media_engine =</span><br><span class=\"line\">      cricket::CreateMediaEngine(std::move(media_dependencies));</span><br><span class=\"line\"></span><br><span class=\"line\">  rtc::scoped_refptr&lt;PeerConnectionFactoryInterface&gt; factory =</span><br><span class=\"line\">      CreateModularPeerConnectionFactory(std::move(dependencies));</span><br></pre></td></tr></table></figure>\n<p>参考: <a href=\"https://blog.jianchihu.net/webrtc-research-simulcast-layer-change.html\">https://blog.jianchihu.net/webrtc-research-simulcast-layer-change.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Simulcast, 效果演示可以参考这个项目 <a href=\"https://fippo.github.io/simulcast-playground/\">simulcast-playground</a></p>\n<h3 id=\"H264EncoderImpl-实现\"><a href=\"#H264EncoderImpl-实现\" class=\"headerlink\" title=\"H264EncoderImpl 实现\"></a>H264EncoderImpl 实现</h3><p>就 H264 而言, H264EncoderImpl 实现了Simulcast 功能, 为了使用 H264EncoderImpl, 需要webrtc编译ffmpeg和openh264, 代码可以参考 <a href=\"https://github.com/johzzy/webrtc-mirror/tree/feature/h264\">https://github.com/johzzy/webrtc-mirror/tree/feature/h264</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// modules/video_coding/codecs/h264/h264_encoder_impl.cc</span><br><span class=\"line\">int32_t H264EncoderImpl::InitEncode(const VideoCodec* inst,</span><br><span class=\"line\">                                    const VideoEncoder::Settings&amp; settings) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    for (int i = 0, idx = number_of_streams - 1; i &lt; number_of_streams;</span><br><span class=\"line\">       ++i, --idx) &#123;</span><br><span class=\"line\">    ISVCEncoder* openh264_encoder;</span><br><span class=\"line\">    // Create encoder.</span><br><span class=\"line\">    if (WelsCreateSVCEncoder(&amp;openh264_encoder) != 0) &#123;</span><br><span class=\"line\">      // Failed to create encoder.</span><br><span class=\"line\">      RTC_LOG(LS_ERROR) &lt;&lt; &quot;Failed to create OpenH264 encoder&quot;;</span><br><span class=\"line\">      RTC_DCHECK(!openh264_encoder);</span><br><span class=\"line\">      Release();</span><br><span class=\"line\">      ReportError();</span><br><span class=\"line\">      return WEBRTC_VIDEO_CODEC_ERROR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    RTC_DCHECK(openh264_encoder);</span><br><span class=\"line\">    if (kOpenH264EncoderDetailedLogging) &#123;</span><br><span class=\"line\">      int trace_level = WELS_LOG_DETAIL;</span><br><span class=\"line\">      openh264_encoder-&gt;SetOption(ENCODER_OPTION_TRACE_LEVEL, &amp;trace_level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // else WELS_LOG_DEFAULT is used by default.</span><br><span class=\"line\"></span><br><span class=\"line\">    // Store h264 encoder.</span><br><span class=\"line\">    encoders_[i] = openh264_encoder;</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<p>从 <code>H264EncoderImpl::InitEncode</code> 函数可以看到, 真正负责编码工作的对象是 <code>ISVCEncoder* openh264_encoder;</code>, <code>Simulcast</code> 和 <code>SVC</code> 都可以由它完成.</p>\n<p>在 <code>Android/iOS</code> 等移动端, <code>H264EncoderImpl</code> 实现的 <code>Simulcast</code> 因 <code>OpenH264</code> 软件编码的缘故, 往往有CPU算力和电池续航方面的不足. </p>\n<p>另外, <code>WebRTC iOS</code>编译 <code>FFmpeg</code> 和 <code>OpenH264</code> 依然是一个巨坑. 那么有没有利用硬件编码实现的Simulcast呢.</p>\n<h3 id=\"SimulcastEncoderAdapter-实现\"><a href=\"#SimulcastEncoderAdapter-实现\" class=\"headerlink\" title=\"SimulcastEncoderAdapter 实现\"></a>SimulcastEncoderAdapter 实现</h3><p><code>SimulcastEncoderAdapter</code> 代码详见 <code>media/engine/simulcast_encoder_adapter.cc</code>, 它本身是一个通用的适配器, 给SimulcastEncoderAdapter 传入相应的编码器工厂，就可以组成一个simulcast的编码器, </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SimulcastEncoderAdapter::SimulcastEncoderAdapter(VideoEncoderFactory* factory,</span><br><span class=\"line\">                                                 const SdpVideoFormat&amp; format)</span><br><span class=\"line\">    : SimulcastEncoderAdapter(factory, nullptr, format) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>具体来说, 在 <code>Android</code> 平台,可以给 <code>SimulcastEncoderAdapter</code> 传入 <code>mediacodec</code> 的 <code>h264</code> 编码器开启硬编,在 <code>iOS</code> 平台则可以传入 <code>videotoolbox</code>. 当然,你可以 SimulcastEncoderAdapter 做到不同层级的视频使用不同的编码器, 混合使用.</p>\n<p>在 chrome 中 h264 的 simulcast 就是这样实现的，在 <code>chrome://webrtc-internals</code> 如果看到这样的字符串,就是 <code>SimulcastEncoderAdapter</code> 实现的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">encoderImplementation SimulcastEncoderAdapter (OpenH264, ExternalEncoder, ExternalEncoder)</span><br></pre></td></tr></table></figure>\n<p>android 平台利用 SimulcastEncoderAdapter 开启 simulcast 的一种实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// SimulcastEncoderAdapter::GetEncoderInfo().implementation_name 输出</span><br><span class=\"line\">// 其中 OpenH264 编码小流, HWEncoder 编码大流</span><br><span class=\"line\">SimulcastEncoderAdapter (OpenH264, HWEncoder)</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何使用-SimulcastEncoderAdapter\"><a href=\"#如何使用-SimulcastEncoderAdapter\" class=\"headerlink\" title=\"如何使用 SimulcastEncoderAdapter\"></a>如何使用 SimulcastEncoderAdapter</h3><p>可以参考 chromium blink 的使用方式,具体代码见 <code>third_party/blink/renderer/platform/peerconnection/video_codec_factory.cc</code></p>\n<h4 id=\"创建相应工厂\"><a href=\"#创建相应工厂\" class=\"headerlink\" title=\"创建相应工厂\"></a>创建相应工厂</h4><p>仿照 blink 创建 EncoderAdapter 和 CreateVideoEncoderAdapterFactory<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// @see </span><br><span class=\"line\">template &lt;typename Factory&gt;</span><br><span class=\"line\">bool IsFormatSupported(const Factory* factory,</span><br><span class=\"line\">                       const webrtc::SdpVideoFormat&amp; format) &#123;</span><br><span class=\"line\">  return factory &amp;&amp; IsFormatSupported(factory-&gt;GetSupportedFormats(), format);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Merge |formats1| and |formats2|, but avoid adding duplicate formats.</span><br><span class=\"line\">std::vector&lt;webrtc::SdpVideoFormat&gt; MergeFormats(</span><br><span class=\"line\">    std::vector&lt;webrtc::SdpVideoFormat&gt; formats1,</span><br><span class=\"line\">    const std::vector&lt;webrtc::SdpVideoFormat&gt;&amp; formats2) &#123;</span><br><span class=\"line\">  for (const webrtc::SdpVideoFormat&amp; format : formats2) &#123;</span><br><span class=\"line\">    // Don&#x27;t add same format twice.</span><br><span class=\"line\">    if (!IsFormatSupported(formats1, format))</span><br><span class=\"line\">      formats1.push_back(format);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return formats1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// This class combines a hardware factory with the internal factory and adds</span><br><span class=\"line\">// internal SW codecs, simulcast, and SW fallback wrappers.</span><br><span class=\"line\">class EncoderAdapter : public webrtc::VideoEncoderFactory &#123;</span><br><span class=\"line\"> public:</span><br><span class=\"line\">  explicit EncoderAdapter(</span><br><span class=\"line\">      std::unique_ptr&lt;webrtc::VideoEncoderFactory&gt; hardware_encoder_factory)</span><br><span class=\"line\">      : hardware_encoder_factory_(std::move(hardware_encoder_factory)) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  webrtc::VideoEncoderFactory::CodecInfo QueryVideoEncoder(</span><br><span class=\"line\">      const webrtc::SdpVideoFormat&amp; format) const override &#123;</span><br><span class=\"line\">    const webrtc::VideoEncoderFactory* factory =</span><br><span class=\"line\">        IsFormatSupported(hardware_encoder_factory_.get(), format)</span><br><span class=\"line\">            ? hardware_encoder_factory_.get()</span><br><span class=\"line\">            : &amp;software_encoder_factory_;</span><br><span class=\"line\">    return factory-&gt;QueryVideoEncoder(format);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::unique_ptr&lt;webrtc::VideoEncoder&gt; CreateVideoEncoder(</span><br><span class=\"line\">      const webrtc::SdpVideoFormat&amp; format) override &#123;</span><br><span class=\"line\">    const bool supported_in_software =</span><br><span class=\"line\">        IsFormatSupported(&amp;software_encoder_factory_, format);</span><br><span class=\"line\">    const bool supported_in_hardware =</span><br><span class=\"line\">        IsFormatSupported(hardware_encoder_factory_.get(), format);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!supported_in_software &amp;&amp; !supported_in_hardware)</span><br><span class=\"line\">      return nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (absl::EqualsIgnoreCase(format.name.c_str(),</span><br><span class=\"line\">                                         cricket::kVp9CodecName) ||</span><br><span class=\"line\">        absl::EqualsIgnoreCase(format.name.c_str(),</span><br><span class=\"line\">                                         cricket::kAv1CodecName)) &#123;</span><br><span class=\"line\">      // For VP9 and AV1 we don&#x27;t use simulcast.</span><br><span class=\"line\">      // return software_encoder_factory_.CreateVideoEncoder(format);</span><br><span class=\"line\">      return hardware_encoder_factory_-&gt;CreateVideoEncoder(format);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!supported_in_hardware || !hardware_encoder_factory_.get()) &#123;</span><br><span class=\"line\">      return std::make_unique&lt;webrtc::SimulcastEncoderAdapter&gt;(</span><br><span class=\"line\">          &amp;software_encoder_factory_, nullptr, format);</span><br><span class=\"line\">    &#125; else if (!supported_in_software) &#123;</span><br><span class=\"line\">      return std::make_unique&lt;webrtc::SimulcastEncoderAdapter&gt;(</span><br><span class=\"line\">          hardware_encoder_factory_.get(), nullptr, format);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return std::make_unique&lt;webrtc::SimulcastEncoderAdapter&gt;(</span><br><span class=\"line\">        hardware_encoder_factory_.get(), &amp;software_encoder_factory_, format);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::vector&lt;webrtc::SdpVideoFormat&gt; GetSupportedFormats() const override &#123;</span><br><span class=\"line\">    std::vector&lt;webrtc::SdpVideoFormat&gt; software_formats =</span><br><span class=\"line\">        software_encoder_factory_.GetSupportedFormats();</span><br><span class=\"line\">    return hardware_encoder_factory_</span><br><span class=\"line\">               ? MergeFormats(software_formats,</span><br><span class=\"line\">                              hardware_encoder_factory_-&gt;GetSupportedFormats())</span><br><span class=\"line\">               : software_formats;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> private:</span><br><span class=\"line\">  webrtc::InternalEncoderFactory software_encoder_factory_;</span><br><span class=\"line\">  const std::unique_ptr&lt;webrtc::VideoEncoderFactory&gt; hardware_encoder_factory_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">std::unique_ptr&lt;VideoEncoderFactory&gt; CreateVideoEncoderAdapterFactory(</span><br><span class=\"line\">  std::unique_ptr&lt;webrtc::VideoEncoderFactory&gt; hardware_encoder_factory) &#123;</span><br><span class=\"line\">  return std::make_unique&lt;EncoderAdapter&gt;(std::move(hardware_encoder_factory));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用工厂\"><a href=\"#使用工厂\" class=\"headerlink\" title=\"使用工厂\"></a>使用工厂</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  ios 使用</span><br><span class=\"line\">        auto video_encoder_factory = std::move(native_encoder_factory);</span><br><span class=\"line\">        return [self initWithNativeAudioEncoderFactory:webrtc::CreateBuiltinAudioEncoderFactory()</span><br><span class=\"line\">                             nativeAudioDecoderFactory:webrtc::CreateBuiltinAudioDecoderFactory()</span><br><span class=\"line\">                             nativeVideoEncoderFactory:webrtc::CreateVideoEncoderAdapterFactory(std::move(video_encoder_factory))</span><br><span class=\"line\">                             nativeVideoDecoderFactory:webrtc::CreateBuiltinVideoDecoderFactory()</span><br><span class=\"line\">                                     audioDeviceModule:[self audioDeviceModule]</span><br><span class=\"line\">                                 audioProcessingModule:nullptr];</span><br><span class=\"line\">// android 使用</span><br><span class=\"line\">  cricket::MediaEngineDependencies media_dependencies;</span><br><span class=\"line\">  media_dependencies.task_queue_factory = dependencies.task_queue_factory.get();</span><br><span class=\"line\">  media_dependencies.adm = std::move(audio_device_module);</span><br><span class=\"line\">  media_dependencies.audio_encoder_factory = std::move(audio_encoder_factory);</span><br><span class=\"line\">  media_dependencies.audio_decoder_factory = std::move(audio_decoder_factory);</span><br><span class=\"line\">  media_dependencies.audio_processing = std::move(audio_processor);</span><br><span class=\"line\">  auto video_encoder_factory =</span><br><span class=\"line\">      absl::WrapUnique(CreateVideoEncoderFactory(jni, jencoder_factory));</span><br><span class=\"line\">  media_dependencies.video_encoder_factory = </span><br><span class=\"line\">        CreateVideoEncoderAdapterFactory(std::move(video_encoder_factory));</span><br><span class=\"line\">  media_dependencies.video_decoder_factory =</span><br><span class=\"line\">      absl::WrapUnique(CreateVideoDecoderFactory(jni, jdecoder_factory));</span><br><span class=\"line\">  dependencies.media_engine =</span><br><span class=\"line\">      cricket::CreateMediaEngine(std::move(media_dependencies));</span><br><span class=\"line\"></span><br><span class=\"line\">  rtc::scoped_refptr&lt;PeerConnectionFactoryInterface&gt; factory =</span><br><span class=\"line\">      CreateModularPeerConnectionFactory(std::move(dependencies));</span><br></pre></td></tr></table></figure>\n<p>参考: <a href=\"https://blog.jianchihu.net/webrtc-research-simulcast-layer-change.html\">https://blog.jianchihu.net/webrtc-research-simulcast-layer-change.html</a></p>\n"},{"title":"simulcast layer state control","date":"2021-06-23T09:08:04.000Z","_content":"\nsimulcast 层级状态控制\n\nwebrtc通过 StreamContext 表示simulcast的层级概念\n\n如果需要暂停simulcast某层的工作,设置 layer_context.set_is_paused(true)即可,webrtc代码引用如下\n```\n  for (StreamContext& layer_context : stream_contexts_) {\n    int stream_idx = layer_context.stream_idx();\n    uint32_t stream_bitrate_kbps =\n        parameters.bitrate.GetSpatialLayerSum(stream_idx) / 1000;\n\n    // Need a key frame if we have not sent this stream before.\n    if (stream_bitrate_kbps > 0 && layer_context.is_paused()) {\n      layer_context.set_is_keyframe_needed();\n    }\n    layer_context.set_is_paused(stream_bitrate_kbps == 0);\n    ...\n  }\n```\n\n设置后,webrtc会在以下逻辑中使用它\n```\n  for (auto& layer : stream_contexts_) {\n    // Don't encode frames in resolutions that we don't intend to send.\n    if (layer.is_paused()) {\n      continue;\n    }\n    ...\n  }\n```\n\n有上述代码可知, parameters.bitrate.GetSpatialLayerSum(stream_idx) 控制着 layer_context 的状态 state(actived/paused), 进而通过控制 layer_context 控制编码器工作 \n\n那么从哪里修改 parameters.bitrate 呢? 外部接口如何操作它呢?\n\n(待续未完 ...)\n\n\nMediaStreamTrack.SetEnabled\nJNI_MediaStreamTrack_SetEnabled\nMediaStreamTrackInterface\nVideoTrackInterface\nVideoTrack\nVideoTrackSource::AddOrUpdateSink(video_source_->AddOrUpdateSink)\nAdaptedVideoTrackSource::AddOrUpdateSink\nVideoBroadcaster::AddOrUpdateSink\nVideoSourceBase::AddOrUpdateSink, UpdateWants","source":"_posts/simulcast-layer-state-control.md","raw":"---\ntitle: simulcast layer state control\ndate: 2021-06-23 17:08:04\ntags:\n---\n\nsimulcast 层级状态控制\n\nwebrtc通过 StreamContext 表示simulcast的层级概念\n\n如果需要暂停simulcast某层的工作,设置 layer_context.set_is_paused(true)即可,webrtc代码引用如下\n```\n  for (StreamContext& layer_context : stream_contexts_) {\n    int stream_idx = layer_context.stream_idx();\n    uint32_t stream_bitrate_kbps =\n        parameters.bitrate.GetSpatialLayerSum(stream_idx) / 1000;\n\n    // Need a key frame if we have not sent this stream before.\n    if (stream_bitrate_kbps > 0 && layer_context.is_paused()) {\n      layer_context.set_is_keyframe_needed();\n    }\n    layer_context.set_is_paused(stream_bitrate_kbps == 0);\n    ...\n  }\n```\n\n设置后,webrtc会在以下逻辑中使用它\n```\n  for (auto& layer : stream_contexts_) {\n    // Don't encode frames in resolutions that we don't intend to send.\n    if (layer.is_paused()) {\n      continue;\n    }\n    ...\n  }\n```\n\n有上述代码可知, parameters.bitrate.GetSpatialLayerSum(stream_idx) 控制着 layer_context 的状态 state(actived/paused), 进而通过控制 layer_context 控制编码器工作 \n\n那么从哪里修改 parameters.bitrate 呢? 外部接口如何操作它呢?\n\n(待续未完 ...)\n\n\nMediaStreamTrack.SetEnabled\nJNI_MediaStreamTrack_SetEnabled\nMediaStreamTrackInterface\nVideoTrackInterface\nVideoTrack\nVideoTrackSource::AddOrUpdateSink(video_source_->AddOrUpdateSink)\nAdaptedVideoTrackSource::AddOrUpdateSink\nVideoBroadcaster::AddOrUpdateSink\nVideoSourceBase::AddOrUpdateSink, UpdateWants","slug":"simulcast-layer-state-control","published":1,"updated":"2021-06-23T11:51:28.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqhkhszv001kuavqf00xdmtl","content":"<p>simulcast 层级状态控制</p>\n<p>webrtc通过 StreamContext 表示simulcast的层级概念</p>\n<p>如果需要暂停simulcast某层的工作,设置 layer_context.set_is_paused(true)即可,webrtc代码引用如下<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (StreamContext&amp; layer_context : stream_contexts_) &#123;</span><br><span class=\"line\">  int stream_idx = layer_context.stream_idx();</span><br><span class=\"line\">  uint32_t stream_bitrate_kbps =</span><br><span class=\"line\">      parameters.bitrate.GetSpatialLayerSum(stream_idx) / 1000;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Need a key frame if we have not sent this stream before.</span><br><span class=\"line\">  if (stream_bitrate_kbps &gt; 0 &amp;&amp; layer_context.is_paused()) &#123;</span><br><span class=\"line\">    layer_context.set_is_keyframe_needed();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  layer_context.set_is_paused(stream_bitrate_kbps == 0);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>设置后,webrtc会在以下逻辑中使用它<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (auto&amp; layer : stream_contexts_) &#123;</span><br><span class=\"line\">  // Don&#x27;t encode frames in resolutions that we don&#x27;t intend to send.</span><br><span class=\"line\">  if (layer.is_paused()) &#123;</span><br><span class=\"line\">    continue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>有上述代码可知, parameters.bitrate.GetSpatialLayerSum(stream_idx) 控制着 layer_context 的状态 state(actived/paused), 进而通过控制 layer_context 控制编码器工作 </p>\n<p>那么从哪里修改 parameters.bitrate 呢? 外部接口如何操作它呢?</p>\n<p>(待续未完 …)</p>\n<p>MediaStreamTrack.SetEnabled<br>JNI_MediaStreamTrack_SetEnabled<br>MediaStreamTrackInterface<br>VideoTrackInterface<br>VideoTrack<br>VideoTrackSource::AddOrUpdateSink(video_source_-&gt;AddOrUpdateSink)<br>AdaptedVideoTrackSource::AddOrUpdateSink<br>VideoBroadcaster::AddOrUpdateSink<br>VideoSourceBase::AddOrUpdateSink, UpdateWants</p>\n","site":{"data":{}},"excerpt":"","more":"<p>simulcast 层级状态控制</p>\n<p>webrtc通过 StreamContext 表示simulcast的层级概念</p>\n<p>如果需要暂停simulcast某层的工作,设置 layer_context.set_is_paused(true)即可,webrtc代码引用如下<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (StreamContext&amp; layer_context : stream_contexts_) &#123;</span><br><span class=\"line\">  int stream_idx = layer_context.stream_idx();</span><br><span class=\"line\">  uint32_t stream_bitrate_kbps =</span><br><span class=\"line\">      parameters.bitrate.GetSpatialLayerSum(stream_idx) / 1000;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Need a key frame if we have not sent this stream before.</span><br><span class=\"line\">  if (stream_bitrate_kbps &gt; 0 &amp;&amp; layer_context.is_paused()) &#123;</span><br><span class=\"line\">    layer_context.set_is_keyframe_needed();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  layer_context.set_is_paused(stream_bitrate_kbps == 0);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>设置后,webrtc会在以下逻辑中使用它<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (auto&amp; layer : stream_contexts_) &#123;</span><br><span class=\"line\">  // Don&#x27;t encode frames in resolutions that we don&#x27;t intend to send.</span><br><span class=\"line\">  if (layer.is_paused()) &#123;</span><br><span class=\"line\">    continue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>有上述代码可知, parameters.bitrate.GetSpatialLayerSum(stream_idx) 控制着 layer_context 的状态 state(actived/paused), 进而通过控制 layer_context 控制编码器工作 </p>\n<p>那么从哪里修改 parameters.bitrate 呢? 外部接口如何操作它呢?</p>\n<p>(待续未完 …)</p>\n<p>MediaStreamTrack.SetEnabled<br>JNI_MediaStreamTrack_SetEnabled<br>MediaStreamTrackInterface<br>VideoTrackInterface<br>VideoTrack<br>VideoTrackSource::AddOrUpdateSink(video_source_-&gt;AddOrUpdateSink)<br>AdaptedVideoTrackSource::AddOrUpdateSink<br>VideoBroadcaster::AddOrUpdateSink<br>VideoSourceBase::AddOrUpdateSink, UpdateWants</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckqhkhsz60005uavqfyzy7eqc","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszc000cuavq2gjv1uoo"},{"post_id":"ckqhkhsyx0000uavq6sgr158r","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszf000guavqcjskawad"},{"post_id":"ckqhkhsz70006uavq32b2cffz","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszh000juavq3ts8dupb"},{"post_id":"ckqhkhsza000auavq27eggk5s","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszi000muavq4yyn37q5"},{"post_id":"ckqhkhsz10001uavqeqop3f83","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszk000puavq49b9gt7h"},{"post_id":"ckqhkhszb000buavqb9zach7c","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszm000suavqcrxe14b7"},{"post_id":"ckqhkhsze000fuavqfrmi3qkf","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszn000vuavq55oibwov"},{"post_id":"ckqhkhsz50004uavq9zu16hff","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszo000yuavq9nfmdj59"},{"post_id":"ckqhkhszf000iuavqdz8laa2e","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszp0011uavqcbppdl0x"},{"post_id":"ckqhkhszi000luavq8nm90t9k","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszp0014uavqgmgead4i"},{"post_id":"ckqhkhszj000ouavq4onda0ii","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszq0017uavqbw463eeb"},{"post_id":"ckqhkhszl000ruavq4pmn2pzl","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszs001auavqdv8r0z3n"},{"post_id":"ckqhkhszm000uuavq8cff0ebq","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszt001duavq2yazhkag"},{"post_id":"ckqhkhszn000xuavqd04i6tkk","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszu001fuavqhlyvgsur"},{"post_id":"ckqhkhszo0010uavq669l6z67","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszv001juavq3vqlfv7b"},{"post_id":"ckqhkhszp0013uavqbepa59l2","category_id":"ckqhkhsz30002uavq1cc98020","_id":"ckqhkhszw001luavqdk84calt"}],"PostTag":[{"post_id":"ckqhkhsyx0000uavq6sgr158r","tag_id":"ckqhkhsz40003uavq4j2afkjf","_id":"ckqhkhsza0009uavq5lt239os"},{"post_id":"ckqhkhsz10001uavqeqop3f83","tag_id":"ckqhkhsz80008uavqea5kffgp","_id":"ckqhkhszf000huavq0wnt8n3z"},{"post_id":"ckqhkhsz50004uavq9zu16hff","tag_id":"ckqhkhsz80008uavqea5kffgp","_id":"ckqhkhszj000nuavqf787dq3g"},{"post_id":"ckqhkhsz60005uavqfyzy7eqc","tag_id":"ckqhkhszh000kuavq5cz907nk","_id":"ckqhkhszm000tuavqa0h8bjdg"},{"post_id":"ckqhkhsz70006uavq32b2cffz","tag_id":"ckqhkhszh000kuavq5cz907nk","_id":"ckqhkhszo000zuavq889nd59e"},{"post_id":"ckqhkhsza000auavq27eggk5s","tag_id":"ckqhkhszn000wuavqay5u0qei","_id":"ckqhkhszq0015uavqhsdc9aj1"},{"post_id":"ckqhkhszb000buavqb9zach7c","tag_id":"ckqhkhszh000kuavq5cz907nk","_id":"ckqhkhszs001buavq15oe3lm2"},{"post_id":"ckqhkhsze000fuavqfrmi3qkf","tag_id":"ckqhkhszr0018uavq7ca1h764","_id":"ckqhkhszu001huavq5lfp4okh"},{"post_id":"ckqhkhszq0016uavq0xwn0l99","tag_id":"ckqhkhszu001guavqhdthfz4w","_id":"ckqhkhszw001nuavqc866125w"},{"post_id":"ckqhkhszs001cuavq2mcz54tr","tag_id":"ckqhkhszw001muavqh9ohf0ql","_id":"ckqhkhszw001puavqh83ed3yz"},{"post_id":"ckqhkhszt001euavq1kolbffz","tag_id":"ckqhkhszw001muavqh9ohf0ql","_id":"ckqhkhszx001ruavq7dbmbx64"},{"post_id":"ckqhkhszv001iuavqhaqleb7d","tag_id":"ckqhkhszw001muavqh9ohf0ql","_id":"ckqhkhszx001suavq5dp515v8"}],"Tag":[{"name":"lambda","_id":"ckqhkhsz40003uavq4j2afkjf"},{"name":"shell","_id":"ckqhkhsz80008uavqea5kffgp"},{"name":"Python","_id":"ckqhkhszh000kuavq5cz907nk"},{"name":"C++","_id":"ckqhkhszn000wuavqay5u0qei"},{"name":"FTP","_id":"ckqhkhszr0018uavq7ca1h764"},{"name":"ffmpeg","_id":"ckqhkhszu001guavqhdthfz4w"},{"name":"webrtc","_id":"ckqhkhszw001muavqh9ohf0ql"}]}}